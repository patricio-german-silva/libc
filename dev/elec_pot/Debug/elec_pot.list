
elec_pot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001b0c  08001b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b2c  08001b2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b2c  08001b2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b2c  08001b2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b2c  08001b2c  00011b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  200000b4  0002000c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e7a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d5  00000000  00000000  00024eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00026388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00026930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016598  00000000  00000000  00026e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006687  00000000  00000000  0003d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000810bd  00000000  00000000  00043a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c4afc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014a4  00000000  00000000  000c4b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001af4 	.word	0x08001af4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001af4 	.word	0x08001af4

0800014c <heartbeat_gpio_callback>:
 */

/*
 * Al hearbeat
 */
void heartbeat_gpio_callback(uint8_t state){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, state);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	461a      	mov	r2, r3
 800015a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <heartbeat_gpio_callback+0x20>)
 8000160:	f000 ffe6 	bl	8001130 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40011000 	.word	0x40011000

08000170 <tasks_1ms>:


/*
 * Al planificador usrtick
 */
void tasks_1ms(){}
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <tasks_10ms>:

void tasks_10ms(){}
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <tasks_100ms>:

void tasks_100ms(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	heartbeat(&hb);
 800018c:	4802      	ldr	r0, [pc, #8]	; (8000198 <tasks_100ms+0x10>)
 800018e:	f000 fa9c 	bl	80006ca <heartbeat>
}
 8000192:	bf00      	nop
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	200000a4 	.word	0x200000a4

0800019c <tasks_1s>:

void tasks_1s(){}
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <tasks_10s>:

void tasks_10s(){}
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
 80001ac:	bf00      	nop
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f000 fade 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f83c 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f8d4 	bl	800036c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001c4:	f000 f894 	bl	80002f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Inicializacion del planificador usertick
  usrtick_init(&usrtick, 1000);
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	4812      	ldr	r0, [pc, #72]	; (8000218 <main+0x64>)
 80001ce:	f000 fa18 	bl	8000602 <usrtick_init>
  usrtick_attach(&usrtick, tasks_1ms, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	4911      	ldr	r1, [pc, #68]	; (800021c <main+0x68>)
 80001d6:	4810      	ldr	r0, [pc, #64]	; (8000218 <main+0x64>)
 80001d8:	f000 fa2c 	bl	8000634 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_10ms, 10);
 80001dc:	220a      	movs	r2, #10
 80001de:	4910      	ldr	r1, [pc, #64]	; (8000220 <main+0x6c>)
 80001e0:	480d      	ldr	r0, [pc, #52]	; (8000218 <main+0x64>)
 80001e2:	f000 fa27 	bl	8000634 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_100ms, 100);
 80001e6:	2264      	movs	r2, #100	; 0x64
 80001e8:	490e      	ldr	r1, [pc, #56]	; (8000224 <main+0x70>)
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <main+0x64>)
 80001ec:	f000 fa22 	bl	8000634 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_1s, 1000);
 80001f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f4:	490c      	ldr	r1, [pc, #48]	; (8000228 <main+0x74>)
 80001f6:	4808      	ldr	r0, [pc, #32]	; (8000218 <main+0x64>)
 80001f8:	f000 fa1c 	bl	8000634 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_10s, 10000);
 80001fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000200:	490a      	ldr	r1, [pc, #40]	; (800022c <main+0x78>)
 8000202:	4805      	ldr	r0, [pc, #20]	; (8000218 <main+0x64>)
 8000204:	f000 fa16 	bl	8000634 <usrtick_attach>

  // Inicializacion de heartbeat
  heartbeat_init(&hb);
 8000208:	4809      	ldr	r0, [pc, #36]	; (8000230 <main+0x7c>)
 800020a:	f000 fa4a 	bl	80006a2 <heartbeat_init>
  heartbeat_attach(&hb, heartbeat_gpio_callback);
 800020e:	4909      	ldr	r1, [pc, #36]	; (8000234 <main+0x80>)
 8000210:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0x7c>)
 8000212:	f000 fa7d 	bl	8000710 <heartbeat_attach>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000216:	e7fe      	b.n	8000216 <main+0x62>
 8000218:	20000058 	.word	0x20000058
 800021c:	08000171 	.word	0x08000171
 8000220:	0800017d 	.word	0x0800017d
 8000224:	08000189 	.word	0x08000189
 8000228:	0800019d 	.word	0x0800019d
 800022c:	080001a9 	.word	0x080001a9
 8000230:	200000a4 	.word	0x200000a4
 8000234:	0800014d 	.word	0x0800014d

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fc4c 	bl	8001ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028e:	4618      	mov	r0, r3
 8000290:	f000 ff66 	bl	8001160 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 f911 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f9d2 	bl	8001664 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c6:	f000 f8fb 	bl	80004c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ca:	2302      	movs	r3, #2
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fb2a 	bl	8001930 <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002e2:	f000 f8ed 	bl	80004c0 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3750      	adds	r7, #80	; 0x50
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_ADC1_Init+0x74>)
 8000302:	4a19      	ldr	r2, [pc, #100]	; (8000368 <MX_ADC1_Init+0x78>)
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_ADC1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_ADC1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_ADC1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_ADC1_Init+0x74>)
 800031a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800031e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <MX_ADC1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_ADC1_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <MX_ADC1_Init+0x74>)
 800032e:	f000 fa85 	bl	800083c <HAL_ADC_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000338:	f000 f8c2 	bl	80004c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000340:	2301      	movs	r3, #1
 8000342:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000344:	2303      	movs	r3, #3
 8000346:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4619      	mov	r1, r3
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_ADC1_Init+0x74>)
 800034e:	f000 fb4d 	bl	80009ec <HAL_ADC_ConfigChannel>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000358:	f000 f8b2 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40012400 	.word	0x40012400

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000380:	4b4b      	ldr	r3, [pc, #300]	; (80004b0 <MX_GPIO_Init+0x144>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a4a      	ldr	r2, [pc, #296]	; (80004b0 <MX_GPIO_Init+0x144>)
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <MX_GPIO_Init+0x144>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000398:	4b45      	ldr	r3, [pc, #276]	; (80004b0 <MX_GPIO_Init+0x144>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a44      	ldr	r2, [pc, #272]	; (80004b0 <MX_GPIO_Init+0x144>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b42      	ldr	r3, [pc, #264]	; (80004b0 <MX_GPIO_Init+0x144>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0320 	and.w	r3, r3, #32
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b0:	4b3f      	ldr	r3, [pc, #252]	; (80004b0 <MX_GPIO_Init+0x144>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a3e      	ldr	r2, [pc, #248]	; (80004b0 <MX_GPIO_Init+0x144>)
 80003b6:	f043 0304 	orr.w	r3, r3, #4
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b3c      	ldr	r3, [pc, #240]	; (80004b0 <MX_GPIO_Init+0x144>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0304 	and.w	r3, r3, #4
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b39      	ldr	r3, [pc, #228]	; (80004b0 <MX_GPIO_Init+0x144>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a38      	ldr	r2, [pc, #224]	; (80004b0 <MX_GPIO_Init+0x144>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b36      	ldr	r3, [pc, #216]	; (80004b0 <MX_GPIO_Init+0x144>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4833      	ldr	r0, [pc, #204]	; (80004b4 <MX_GPIO_Init+0x148>)
 80003e8:	f000 fea2 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_A_Pin|SEG_B_Pin|SEG_F_Pin|SEG_DP_Pin
 80003ec:	2200      	movs	r2, #0
 80003ee:	21fe      	movs	r1, #254	; 0xfe
 80003f0:	4831      	ldr	r0, [pc, #196]	; (80004b8 <MX_GPIO_Init+0x14c>)
 80003f2:	f000 fe9d 	bl	8001130 <HAL_GPIO_WritePin>
                          |SEG_C_Pin|D0_CK_Pin|SEG_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_CK_Pin|SEG_E_Pin|SEG_G_Pin|D2_CK_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f640 4103 	movw	r1, #3075	; 0xc03
 80003fc:	482f      	ldr	r0, [pc, #188]	; (80004bc <MX_GPIO_Init+0x150>)
 80003fe:	f000 fe97 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4826      	ldr	r0, [pc, #152]	; (80004b4 <MX_GPIO_Init+0x148>)
 800041c:	f000 fd04 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_F_Pin SEG_DP_Pin
                           SEG_C_Pin D0_CK_Pin SEG_D_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_F_Pin|SEG_DP_Pin
 8000420:	23fe      	movs	r3, #254	; 0xfe
 8000422:	613b      	str	r3, [r7, #16]
                          |SEG_C_Pin|D0_CK_Pin|SEG_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2302      	movs	r3, #2
 800042e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4820      	ldr	r0, [pc, #128]	; (80004b8 <MX_GPIO_Init+0x14c>)
 8000438:	f000 fcf6 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_CK_Pin SEG_E_Pin SEG_G_Pin D2_CK_Pin */
  GPIO_InitStruct.Pin = D1_CK_Pin|SEG_E_Pin|SEG_G_Pin|D2_CK_Pin;
 800043c:	f640 4303 	movw	r3, #3075	; 0xc03
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4619      	mov	r1, r3
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <MX_GPIO_Init+0x150>)
 8000456:	f000 fce7 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_DOWN_Pin BTN_UP_Pin BTN_TV_Pin */
  GPIO_InitStruct.Pin = BTN_DOWN_Pin|BTN_UP_Pin|BTN_TV_Pin;
 800045a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4813      	ldr	r0, [pc, #76]	; (80004bc <MX_GPIO_Init+0x150>)
 8000470:	f000 fcda 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_OFF_Pin */
  GPIO_InitStruct.Pin = BTN_OFF_Pin;
 8000474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800047e:	2302      	movs	r3, #2
 8000480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_OFF_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <MX_GPIO_Init+0x150>)
 800048a:	f000 fccd 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIN_ZERO_Pin PIN_TRIGGER_Pin */
  GPIO_InitStruct.Pin = PIN_ZERO_Pin|PIN_TRIGGER_Pin;
 800048e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_GPIO_Init+0x14c>)
 80004a4:	f000 fcc0 	bl	8000e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40011000 	.word	0x40011000
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a14      	ldr	r2, [pc, #80]	; (800059c <HAL_ADC_MspInit+0x6c>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d121      	bne.n	8000594 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <HAL_ADC_MspInit+0x70>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <HAL_ADC_MspInit+0x70>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <HAL_ADC_MspInit+0x70>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <HAL_ADC_MspInit+0x70>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <HAL_ADC_MspInit+0x70>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <HAL_ADC_MspInit+0x70>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000584:	2303      	movs	r3, #3
 8000586:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <HAL_ADC_MspInit+0x74>)
 8000590:	f000 fc4a 	bl	8000e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40012400 	.word	0x40012400
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <NMI_Handler+0x4>

080005ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <HardFault_Handler+0x4>

080005b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <MemManage_Handler+0x4>

080005ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr

080005ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ee:	f000 f909 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr

08000602 <usrtick_init>:
static inline uint32_t _usrtick_get_us();
static inline uint32_t _usrtick_get_us_since(uint32_t since);


/* Inicializa temporizadores */
void usrtick_init(_usrtick *utk, uint32_t p){
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
	utk->ltime = 0;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
	utk->ctime = 0;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
	utk->ptime = p;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	609a      	str	r2, [r3, #8]
#ifdef _UTIL_USE_USRTICK_STATISTICS
	utk->stime = 0;
	utk->uptime = 0;
#endif
	utk->cbcnt = 0;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	731a      	strb	r2, [r3, #12]
	utk->cbpcs = 0;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	735a      	strb	r2, [r3, #13]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <usrtick_attach>:


void usrtick_attach(_usrtick *utk, usrtick_attach_def f, uint32_t p){
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	if(utk->cbcnt < _UTIL_USRTICK_CALLBACK_NUM){
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	7b1b      	ldrb	r3, [r3, #12]
 8000644:	2b04      	cmp	r3, #4
 8000646:	d827      	bhi.n	8000698 <usrtick_attach+0x64>
		utk->proc[utk->cbcnt].period = p;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	7b1b      	ldrb	r3, [r3, #12]
 800064c:	4619      	mov	r1, r3
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	460b      	mov	r3, r1
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	440b      	add	r3, r1
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	3314      	adds	r3, #20
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]
		utk->proc[utk->cbcnt].curr = 0;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	7b1b      	ldrb	r3, [r3, #12]
 8000664:	4619      	mov	r1, r3
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	460b      	mov	r3, r1
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	440b      	add	r3, r1
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	3318      	adds	r3, #24
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
		utk->proc[utk->cbcnt++].usrtick_callback = f;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	7b1b      	ldrb	r3, [r3, #12]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	b2d1      	uxtb	r1, r2
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	7311      	strb	r1, [r2, #12]
 8000684:	4619      	mov	r1, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	460b      	mov	r3, r1
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	440b      	add	r3, r1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	3310      	adds	r3, #16
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	601a      	str	r2, [r3, #0]
	}
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <heartbeat_init>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _UTIL_USE_HEARTBEAT_UTILITIES
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* Inicializa hearbeat */
void heartbeat_init(_hb *hb){
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
	hb->state = 0;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	801a      	strh	r2, [r3, #0]
	hb->dfmsk = 0b1010000000000000;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80006b6:	809a      	strh	r2, [r3, #4]
	hb->stmsk = 0b1010000000000000;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80006be:	805a      	strh	r2, [r3, #2]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <heartbeat>:

void heartbeat(_hb *hb){
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
	hb->gpio_callback((hb->stmsk & (1 << hb->state)) == 0);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	8852      	ldrh	r2, [r2, #2]
 80006da:	4611      	mov	r1, r2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fa41 f202 	asr.w	r2, r1, r2
 80006e4:	f002 0201 	and.w	r2, r2, #1
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	bf0c      	ite	eq
 80006ec:	2201      	moveq	r2, #1
 80006ee:	2200      	movne	r2, #0
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	4610      	mov	r0, r2
 80006f4:	4798      	blx	r3
	hb->state = (hb->state+1) & 15;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	b29a      	uxth	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	801a      	strh	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <heartbeat_attach>:

void heartbeat_attach(_hb *hb, heartbeat_gpio_def f){
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	hb->gpio_callback = f;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	609a      	str	r2, [r3, #8]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000752:	f7ff ff50 	bl	80005f6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f001 f9a1 	bl	8001a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fd2b 	bl	80001b4 <main>
  bx lr
 800075e:	4770      	bx	lr
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000768:	08001b34 	.word	0x08001b34
  ldr r2, =_sbss
 800076c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000770:	200000b4 	.word	0x200000b4

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 fb19 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	200f      	movs	r0, #15
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fe9a 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fb23 	bl	8000e0e <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e0:	f000 faf9 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000008 	.word	0x20000008
 8000824:	200000b0 	.word	0x200000b0

08000828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	200000b0 	.word	0x200000b0

0800083c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000844:	2300      	movs	r3, #0
 8000846:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e0be      	b.n	80009dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fe58 	bl	8000530 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f9ab 	bl	8000bdc <ADC_ConversionStop_Disable>
 8000886:	4603      	mov	r3, r0
 8000888:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8099 	bne.w	80009ca <HAL_ADC_Init+0x18e>
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 8095 	bne.w	80009ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008a8:	f023 0302 	bic.w	r3, r3, #2
 80008ac:	f043 0202 	orr.w	r2, r3, #2
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7b1b      	ldrb	r3, [r3, #12]
 80008c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008d4:	d003      	beq.n	80008de <HAL_ADC_Init+0xa2>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d102      	bne.n	80008e4 <HAL_ADC_Init+0xa8>
 80008de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e2:	e000      	b.n	80008e6 <HAL_ADC_Init+0xaa>
 80008e4:	2300      	movs	r3, #0
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7d1b      	ldrb	r3, [r3, #20]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d119      	bne.n	8000928 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7b1b      	ldrb	r3, [r3, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d109      	bne.n	8000910 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	3b01      	subs	r3, #1
 8000902:	035a      	lsls	r2, r3, #13
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	e00b      	b.n	8000928 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000914:	f043 0220 	orr.w	r2, r3, #32
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	f043 0201 	orr.w	r2, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	430a      	orrs	r2, r1
 800093a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <HAL_ADC_Init+0x1a8>)
 8000944:	4013      	ands	r3, r2
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6812      	ldr	r2, [r2, #0]
 800094a:	68b9      	ldr	r1, [r7, #8]
 800094c:	430b      	orrs	r3, r1
 800094e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000958:	d003      	beq.n	8000962 <HAL_ADC_Init+0x126>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d104      	bne.n	800096c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	3b01      	subs	r3, #1
 8000968:	051b      	lsls	r3, r3, #20
 800096a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	430a      	orrs	r2, r1
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_ADC_Init+0x1ac>)
 8000988:	4013      	ands	r3, r2
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	429a      	cmp	r2, r3
 800098e:	d10b      	bne.n	80009a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	f023 0303 	bic.w	r3, r3, #3
 800099e:	f043 0201 	orr.w	r2, r3, #1
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009a6:	e018      	b.n	80009da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ac:	f023 0312 	bic.w	r3, r3, #18
 80009b0:	f043 0210 	orr.w	r2, r3, #16
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	f043 0201 	orr.w	r2, r3, #1
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c8:	e007      	b.n	80009da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	f043 0210 	orr.w	r2, r3, #16
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009da:	7dfb      	ldrb	r3, [r7, #23]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	ffe1f7fd 	.word	0xffe1f7fd
 80009e8:	ff1f0efe 	.word	0xff1f0efe

080009ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d101      	bne.n	8000a0c <HAL_ADC_ConfigChannel+0x20>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e0dc      	b.n	8000bc6 <HAL_ADC_ConfigChannel+0x1da>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b06      	cmp	r3, #6
 8000a1a:	d81c      	bhi.n	8000a56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	3b05      	subs	r3, #5
 8000a2e:	221f      	movs	r2, #31
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4019      	ands	r1, r3
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	3b05      	subs	r3, #5
 8000a48:	fa00 f203 	lsl.w	r2, r0, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
 8000a54:	e03c      	b.n	8000ad0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b0c      	cmp	r3, #12
 8000a5c:	d81c      	bhi.n	8000a98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3b23      	subs	r3, #35	; 0x23
 8000a70:	221f      	movs	r2, #31
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	4019      	ands	r1, r3
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	3b23      	subs	r3, #35	; 0x23
 8000a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
 8000a96:	e01b      	b.n	8000ad0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	3b41      	subs	r3, #65	; 0x41
 8000aaa:	221f      	movs	r2, #31
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4019      	ands	r1, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	3b41      	subs	r3, #65	; 0x41
 8000ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b09      	cmp	r3, #9
 8000ad6:	d91c      	bls.n	8000b12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68d9      	ldr	r1, [r3, #12]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	3b1e      	subs	r3, #30
 8000aea:	2207      	movs	r2, #7
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	4019      	ands	r1, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	6898      	ldr	r0, [r3, #8]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	3b1e      	subs	r3, #30
 8000b04:	fa00 f203 	lsl.w	r2, r0, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	e019      	b.n	8000b46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6919      	ldr	r1, [r3, #16]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	2207      	movs	r2, #7
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	4019      	ands	r1, r3
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6898      	ldr	r0, [r3, #8]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b10      	cmp	r3, #16
 8000b4c:	d003      	beq.n	8000b56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b52:	2b11      	cmp	r3, #17
 8000b54:	d132      	bne.n	8000bbc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d125      	bne.n	8000bac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d126      	bne.n	8000bbc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b10      	cmp	r3, #16
 8000b84:	d11a      	bne.n	8000bbc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9a      	lsrs	r2, r3, #18
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b9c:	e002      	b.n	8000ba4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f9      	bne.n	8000b9e <HAL_ADC_ConfigChannel+0x1b2>
 8000baa:	e007      	b.n	8000bbc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f043 0220 	orr.w	r2, r3, #32
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40012400 	.word	0x40012400
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	431bde83 	.word	0x431bde83

08000bdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d12e      	bne.n	8000c54 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0201 	bic.w	r2, r2, #1
 8000c04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c06:	f7ff fe0f 	bl	8000828 <HAL_GetTick>
 8000c0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c0c:	e01b      	b.n	8000c46 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c0e:	f7ff fe0b 	bl	8000828 <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d914      	bls.n	8000c46 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d10d      	bne.n	8000c46 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f043 0210 	orr.w	r2, r3, #16
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e007      	b.n	8000c56 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d0dc      	beq.n	8000c0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f7ff ff90 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff49 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff5e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff90 	bl	8000d18 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5f 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffb0 	bl	8000d7c <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e169      	b.n	8001110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8158 	bne.w	800110a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4a9a      	ldr	r2, [pc, #616]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d05e      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e64:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d875      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a98      	ldr	r2, [pc, #608]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d058      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e70:	4a96      	ldr	r2, [pc, #600]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d86f      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e76:	4a96      	ldr	r2, [pc, #600]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d052      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a94      	ldr	r2, [pc, #592]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d869      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e82:	4a94      	ldr	r2, [pc, #592]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04c      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e88:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d863      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a92      	ldr	r2, [pc, #584]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d046      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e94:	4a90      	ldr	r2, [pc, #576]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d85d      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d82a      	bhi.n	8000ef4 <HAL_GPIO_Init+0xcc>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d859      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_GPIO_Init+0x80>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000efd 	.word	0x08000efd
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f57 	.word	0x08000f57
 8000ebc:	08000f57 	.word	0x08000f57
 8000ec0:	08000f57 	.word	0x08000f57
 8000ec4:	08000f57 	.word	0x08000f57
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f57 	.word	0x08000f57
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f57 	.word	0x08000f57
 8000ed8:	08000f57 	.word	0x08000f57
 8000edc:	08000f57 	.word	0x08000f57
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000f57 	.word	0x08000f57
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	4a79      	ldr	r2, [pc, #484]	; (80010dc <HAL_GPIO_Init+0x2b4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efa:	e02c      	b.n	8000f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e029      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e024      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e01f      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e01a      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e013      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	611a      	str	r2, [r3, #16]
          break;
 8000f42:	e009      	b.n	8000f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	615a      	str	r2, [r3, #20]
          break;
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          break;
 8000f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d801      	bhi.n	8000f62 <HAL_GPIO_Init+0x13a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_Init+0x13e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d802      	bhi.n	8000f74 <HAL_GPIO_Init+0x14c>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x152>
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3b08      	subs	r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	210f      	movs	r1, #15
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	6a39      	ldr	r1, [r7, #32]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80b1 	beq.w	800110a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc0:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1ec>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3f      	ldr	r2, [pc, #252]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1e0>
 8001004:	2303      	movs	r3, #3
 8001006:	e006      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001008:	2304      	movs	r3, #4
 800100a:	e004      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 800100c:	2302      	movs	r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <HAL_GPIO_Init+0x1ee>
 8001014:	2300      	movs	r3, #0
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	f002 0203 	and.w	r2, r2, #3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4093      	lsls	r3, r2
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001026:	492f      	ldr	r1, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	492c      	ldr	r1, [pc, #176]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	4928      	ldr	r1, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4922      	ldr	r1, [pc, #136]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	491e      	ldr	r1, [pc, #120]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d006      	beq.n	800109e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	608b      	str	r3, [r1, #8]
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4914      	ldr	r1, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d021      	beq.n	80010fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60cb      	str	r3, [r1, #12]
 80010c4:	e021      	b.n	800110a <HAL_GPIO_Init+0x2e2>
 80010c6:	bf00      	nop
 80010c8:	10320000 	.word	0x10320000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10220000 	.word	0x10220000
 80010d4:	10210000 	.word	0x10210000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10110000 	.word	0x10110000
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40011400 	.word	0x40011400
 80010f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_GPIO_Init+0x304>)
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	43db      	mvns	r3, r3
 8001104:	4909      	ldr	r1, [pc, #36]	; (800112c <HAL_GPIO_Init+0x304>)
 8001106:	4013      	ands	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	3301      	adds	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	f47f ae8e 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	372c      	adds	r7, #44	; 0x2c
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	611a      	str	r2, [r3, #16]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e272      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8087 	beq.w	800128e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b04      	cmp	r3, #4
 800118a:	d00c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b08      	cmp	r3, #8
 8001196:	d112      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d10b      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d06c      	beq.n	800128c <HAL_RCC_OscConfig+0x12c>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d168      	bne.n	800128c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e24c      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x76>
 80011c8:	4b80      	ldr	r3, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e02e      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a77      	ldr	r2, [pc, #476]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0xbc>
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a71      	ldr	r2, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff faf4 	bl	8000828 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff faf0 	bl	8000828 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e200      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xe4>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fae0 	bl	8000828 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fadc 	bl	8000828 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1ec      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x10c>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c0      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fa95 	bl	8000828 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fa91 	bl	8000828 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fa74 	bl	8000828 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fa70 	bl	8000828 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e180      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d03a      	beq.n	80013e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fa54 	bl	8000828 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fa50 	bl	8000828 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e160      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 faa6 	bl	80018f4 <RCC_Delay>
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fa3a 	bl	8000828 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e00f      	b.n	80013d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fa36 	bl	8000828 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e146      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420000 	.word	0x42420000
 80013d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e9      	bne.n	80013b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a6 	beq.w	800153e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff f9f7 	bl	8000828 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff f9f3 	bl	8000828 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e103      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e02d      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x334>
 800147a:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x356>
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 80014b6:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a5a      	ldr	r2, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff f9a7 	bl	8000828 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff f9a3 	bl	8000828 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x37e>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff f991 	bl	8000828 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff f98d 	bl	8000828 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e09b      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d061      	beq.n	8001618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d146      	bne.n	80015ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f961 	bl	8000828 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff f95d 	bl	8000828 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e06d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d108      	bne.n	80015a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4921      	ldr	r1, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a19      	ldr	r1, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	430b      	orrs	r3, r1
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff f931 	bl	8000828 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff f92d 	bl	8000828 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e03d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
 80015e8:	e035      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff f91a 	bl	8000828 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff f916 	bl	8000828 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e026      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x498>
 8001616:	e01e      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e019      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x500>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	429a      	cmp	r2, r3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff f868 	bl	8000828 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f864 	bl	8000828 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe ffc6 	bl	80007a4 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	08001b1c 	.word	0x08001b1c
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b490      	push	{r4, r7}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001840:	1d3c      	adds	r4, r7, #4
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001848:	f240 2301 	movw	r3, #513	; 0x201
 800184c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x40>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x46>
 8001876:	e02b      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800187a:	623b      	str	r3, [r7, #32]
      break;
 800187c:	e02b      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3328      	adds	r3, #40	; 0x28
 8001888:	443b      	add	r3, r7
 800188a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800188e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d012      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c5b      	lsrs	r3, r3, #17
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	3328      	adds	r3, #40	; 0x28
 80018a6:	443b      	add	r3, r7
 80018a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b2:	fb03 f202 	mul.w	r2, r3, r2
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e004      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	623b      	str	r3, [r7, #32]
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018d2:	623b      	str	r3, [r7, #32]
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6a3b      	ldr	r3, [r7, #32]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc90      	pop	{r4, r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	08001b0c 	.word	0x08001b0c
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <RCC_Delay+0x34>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <RCC_Delay+0x38>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001910:	bf00      	nop
  }
  while (Delay --);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	60fa      	str	r2, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f9      	bne.n	8001910 <RCC_Delay+0x1c>
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20000000 	.word	0x20000000
 800192c:	10624dd3 	.word	0x10624dd3

08001930 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d07d      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001950:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10d      	bne.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800195e:	69db      	ldr	r3, [r3, #28]
 8001960:	4a4b      	ldr	r2, [pc, #300]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001966:	61d3      	str	r3, [r2, #28]
 8001968:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001974:	2301      	movs	r3, #1
 8001976:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d118      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a42      	ldr	r2, [pc, #264]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001990:	f7fe ff4a 	bl	8000828 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	e008      	b.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7fe ff46 	bl	8000828 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e06d      	b.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d02e      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d027      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d014      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7fe ff15 	bl	8000828 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7fe ff11 	bl	8000828 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e036      	b.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4917      	ldr	r1, [pc, #92]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a36:	7dfb      	ldrb	r3, [r7, #23]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	490b      	ldr	r1, [pc, #44]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	4904      	ldr	r1, [pc, #16]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42420440 	.word	0x42420440

08001a9c <__libc_init_array>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	2600      	movs	r6, #0
 8001aa0:	4d0c      	ldr	r5, [pc, #48]	; (8001ad4 <__libc_init_array+0x38>)
 8001aa2:	4c0d      	ldr	r4, [pc, #52]	; (8001ad8 <__libc_init_array+0x3c>)
 8001aa4:	1b64      	subs	r4, r4, r5
 8001aa6:	10a4      	asrs	r4, r4, #2
 8001aa8:	42a6      	cmp	r6, r4
 8001aaa:	d109      	bne.n	8001ac0 <__libc_init_array+0x24>
 8001aac:	f000 f822 	bl	8001af4 <_init>
 8001ab0:	2600      	movs	r6, #0
 8001ab2:	4d0a      	ldr	r5, [pc, #40]	; (8001adc <__libc_init_array+0x40>)
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <__libc_init_array+0x44>)
 8001ab6:	1b64      	subs	r4, r4, r5
 8001ab8:	10a4      	asrs	r4, r4, #2
 8001aba:	42a6      	cmp	r6, r4
 8001abc:	d105      	bne.n	8001aca <__libc_init_array+0x2e>
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
 8001ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac4:	4798      	blx	r3
 8001ac6:	3601      	adds	r6, #1
 8001ac8:	e7ee      	b.n	8001aa8 <__libc_init_array+0xc>
 8001aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ace:	4798      	blx	r3
 8001ad0:	3601      	adds	r6, #1
 8001ad2:	e7f2      	b.n	8001aba <__libc_init_array+0x1e>
 8001ad4:	08001b2c 	.word	0x08001b2c
 8001ad8:	08001b2c 	.word	0x08001b2c
 8001adc:	08001b2c 	.word	0x08001b2c
 8001ae0:	08001b30 	.word	0x08001b30

08001ae4 <memset>:
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4402      	add	r2, r0
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d100      	bne.n	8001aee <memset+0xa>
 8001aec:	4770      	bx	lr
 8001aee:	f803 1b01 	strb.w	r1, [r3], #1
 8001af2:	e7f9      	b.n	8001ae8 <memset+0x4>

08001af4 <_init>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	bf00      	nop
 8001af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001afa:	bc08      	pop	{r3}
 8001afc:	469e      	mov	lr, r3
 8001afe:	4770      	bx	lr

08001b00 <_fini>:
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	bf00      	nop
 8001b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b06:	bc08      	pop	{r3}
 8001b08:	469e      	mov	lr, r3
 8001b0a:	4770      	bx	lr
