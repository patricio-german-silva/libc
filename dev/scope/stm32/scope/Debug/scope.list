
scope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb4  0800acb4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800acb4  0800acb4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800acb4  0800acb4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800acbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038e8  20000180  20000180  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003a68  20003a68  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c1b  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9c  00000000  00000000  00035dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00039860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7ca  00000000  00000000  0003bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172f1  00000000  00000000  00056572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a89  00000000  00000000  0006d863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001002ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  0010033c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800abe0 	.word	0x0800abe0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800abe0 	.word	0x0800abe0

0800014c <cmd_init>:


/*
 *inicializa las estructuras de datos
 */
void cmd_init(_usrtick *ut, _hb *h, _pcomm *p, _control *c){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	usrtick = ut;
 800015a:	4a08      	ldr	r2, [pc, #32]	; (800017c <cmd_init+0x30>)
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	6013      	str	r3, [r2, #0]
	hb = h;
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <cmd_init+0x34>)
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	6013      	str	r3, [r2, #0]
	cdc = p;
 8000166:	4a07      	ldr	r2, [pc, #28]	; (8000184 <cmd_init+0x38>)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	6013      	str	r3, [r2, #0]
	control = c;
 800016c:	4a06      	ldr	r2, [pc, #24]	; (8000188 <cmd_init+0x3c>)
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	6013      	str	r3, [r2, #0]
}
 8000172:	bf00      	nop
 8000174:	3714      	adds	r7, #20
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	200001a0 	.word	0x200001a0
 8000180:	200001a4 	.word	0x200001a4
 8000184:	2000019c 	.word	0x2000019c
 8000188:	200001a8 	.word	0x200001a8

0800018c <cmd_exec>:
 *
 *
 * 	Respuesta Err: Comando desconocodo
 *
 */
void cmd_exec(_pcomm *p){
 800018c:	b590      	push	{r4, r7, lr}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	switch(p->rx.buff[p->rx.datastart]){
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	691b      	ldr	r3, [r3, #16]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800019c:	4413      	add	r3, r2
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2ba1      	cmp	r3, #161	; 0xa1
 80001a2:	f000 80d9 	beq.w	8000358 <cmd_exec+0x1cc>
 80001a6:	2ba1      	cmp	r3, #161	; 0xa1
 80001a8:	f300 80ea 	bgt.w	8000380 <cmd_exec+0x1f4>
 80001ac:	2b11      	cmp	r3, #17
 80001ae:	dc2b      	bgt.n	8000208 <cmd_exec+0x7c>
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	f340 80e5 	ble.w	8000380 <cmd_exec+0x1f4>
 80001b6:	3b01      	subs	r3, #1
 80001b8:	2b10      	cmp	r3, #16
 80001ba:	f200 80e1 	bhi.w	8000380 <cmd_exec+0x1f4>
 80001be:	a201      	add	r2, pc, #4	; (adr r2, 80001c4 <cmd_exec+0x38>)
 80001c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c4:	08000211 	.word	0x08000211
 80001c8:	0800025d 	.word	0x0800025d
 80001cc:	08000237 	.word	0x08000237
 80001d0:	08000283 	.word	0x08000283
 80001d4:	08000381 	.word	0x08000381
 80001d8:	08000381 	.word	0x08000381
 80001dc:	08000381 	.word	0x08000381
 80001e0:	08000381 	.word	0x08000381
 80001e4:	08000381 	.word	0x08000381
 80001e8:	08000381 	.word	0x08000381
 80001ec:	08000381 	.word	0x08000381
 80001f0:	08000381 	.word	0x08000381
 80001f4:	08000381 	.word	0x08000381
 80001f8:	08000381 	.word	0x08000381
 80001fc:	08000381 	.word	0x08000381
 8000200:	080002ab 	.word	0x080002ab
 8000204:	0800031b 	.word	0x0800031b
 8000208:	2ba0      	cmp	r3, #160	; 0xa0
 800020a:	f000 809a 	beq.w	8000342 <cmd_exec+0x1b6>
 800020e:	e0b7      	b.n	8000380 <cmd_exec+0x1f4>
	/*   ·······················   ADC   ······················· */
	case _CMD_ADC_START_ON_CH1:{
		control->control_status |= 0b1000000000000000;
 8000210:	4b63      	ldr	r3, [pc, #396]	; (80003a0 <cmd_exec+0x214>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	695a      	ldr	r2, [r3, #20]
 8000216:	4b62      	ldr	r3, [pc, #392]	; (80003a0 <cmd_exec+0x214>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800021e:	615a      	str	r2, [r3, #20]
		pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000228:	4413      	add	r3, r2
 800022a:	2201      	movs	r2, #1
 800022c:	4619      	mov	r1, r3
 800022e:	6878      	ldr	r0, [r7, #4]
 8000230:	f000 fdd6 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 8000234:	e0ac      	b.n	8000390 <cmd_exec+0x204>
	}
	case _CMD_ADC_START_ON_CH2:{
		control->control_status |= 0b0100000000000000;
 8000236:	4b5a      	ldr	r3, [pc, #360]	; (80003a0 <cmd_exec+0x214>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	4b58      	ldr	r3, [pc, #352]	; (80003a0 <cmd_exec+0x214>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000244:	615a      	str	r2, [r3, #20]
		pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800024e:	4413      	add	r3, r2
 8000250:	2201      	movs	r2, #1
 8000252:	4619      	mov	r1, r3
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fdc3 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 800025a:	e099      	b.n	8000390 <cmd_exec+0x204>
	}
	case _CMD_ADC_STOP_ON_CH1:{
		control->control_status &= 0b0111111111111111;
 800025c:	4b50      	ldr	r3, [pc, #320]	; (80003a0 <cmd_exec+0x214>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	695a      	ldr	r2, [r3, #20]
 8000262:	4b4f      	ldr	r3, [pc, #316]	; (80003a0 <cmd_exec+0x214>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800026a:	615a      	str	r2, [r3, #20]
		pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000274:	4413      	add	r3, r2
 8000276:	2201      	movs	r2, #1
 8000278:	4619      	mov	r1, r3
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f000 fdb0 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 8000280:	e086      	b.n	8000390 <cmd_exec+0x204>
	}
	case _CMD_ADC_STOP_ON_CH2:{
		control->control_status &= 0b1011111111111111;
 8000282:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <cmd_exec+0x214>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	6959      	ldr	r1, [r3, #20]
 8000288:	4b45      	ldr	r3, [pc, #276]	; (80003a0 <cmd_exec+0x214>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000290:	400b      	ands	r3, r1
 8000292:	6153      	str	r3, [r2, #20]
		pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	691b      	ldr	r3, [r3, #16]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800029c:	4413      	add	r3, r2
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f000 fd9c 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 80002a8:	e072      	b.n	8000390 <cmd_exec+0x204>
	 * [1,2]: prescaler
	 * [3,4]: compare
	 * [5,6]: autoreload
	 */
	case _CMD_PWM_START_ON_CH1:{
		if(p->rx.datasize == 7){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d12a      	bne.n	800030a <cmd_exec+0x17e>
			control->control_status |= 0b0010000000000000;
 80002b4:	4b3a      	ldr	r3, [pc, #232]	; (80003a0 <cmd_exec+0x214>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	695a      	ldr	r2, [r3, #20]
 80002ba:	4b39      	ldr	r3, [pc, #228]	; (80003a0 <cmd_exec+0x214>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80002c2:	615a      	str	r2, [r3, #20]
			control->pwm_prescaler = pcomm_rx_read_uint16_t(p, 1);
 80002c4:	4b36      	ldr	r3, [pc, #216]	; (80003a0 <cmd_exec+0x214>)
 80002c6:	681c      	ldr	r4, [r3, #0]
 80002c8:	2101      	movs	r1, #1
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 fe46 	bl	8000f5c <pcomm_rx_read_uint16_t>
 80002d0:	4603      	mov	r3, r0
 80002d2:	8423      	strh	r3, [r4, #32]
			control->pwm_compare = pcomm_rx_read_uint16_t(p, 3);
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <cmd_exec+0x214>)
 80002d6:	681c      	ldr	r4, [r3, #0]
 80002d8:	2103      	movs	r1, #3
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 fe3e 	bl	8000f5c <pcomm_rx_read_uint16_t>
 80002e0:	4603      	mov	r3, r0
 80002e2:	8463      	strh	r3, [r4, #34]	; 0x22
			control->pwm_autoreload = pcomm_rx_read_uint16_t(p, 5);
 80002e4:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <cmd_exec+0x214>)
 80002e6:	681c      	ldr	r4, [r3, #0]
 80002e8:	2105      	movs	r1, #5
 80002ea:	6878      	ldr	r0, [r7, #4]
 80002ec:	f000 fe36 	bl	8000f5c <pcomm_rx_read_uint16_t>
 80002f0:	4603      	mov	r3, r0
 80002f2:	84a3      	strh	r3, [r4, #36]	; 0x24
			pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80002fc:	4413      	add	r3, r2
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f000 fd6c 	bl	8000de0 <pcomm_tx_put_data_frame>
		}else{
			pcomm_tx_put_data_frame(p, (uint8_t *)cmd_error, 3);
		}
		break;
 8000308:	e042      	b.n	8000390 <cmd_exec+0x204>
			pcomm_tx_put_data_frame(p, (uint8_t *)cmd_error, 3);
 800030a:	4b26      	ldr	r3, [pc, #152]	; (80003a4 <cmd_exec+0x218>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2203      	movs	r2, #3
 8000310:	4619      	mov	r1, r3
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 fd64 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 8000318:	e03a      	b.n	8000390 <cmd_exec+0x204>
	}
	case _CMD_PWM_STOP_ON_CH1:{
		control->control_status &= 0b1101111111111111;
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <cmd_exec+0x214>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	6959      	ldr	r1, [r3, #20]
 8000320:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <cmd_exec+0x214>)
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000328:	400b      	ands	r3, r1
 800032a:	6153      	str	r3, [r2, #20]
		pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000334:	4413      	add	r3, r2
 8000336:	2201      	movs	r2, #1
 8000338:	4619      	mov	r1, r3
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f000 fd50 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 8000340:	e026      	b.n	8000390 <cmd_exec+0x204>
	}
	/*   ·······················   REPORTES e INFO   ······················· */
	// Keep alive
	case _CMD_KEEP_ALIVE:{
		pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800034a:	4413      	add	r3, r2
 800034c:	2201      	movs	r2, #1
 800034e:	4619      	mov	r1, r3
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f000 fd45 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 8000356:	e01b      	b.n	8000390 <cmd_exec+0x204>
	}
	// Firmware version
	case _CMD_FIRMWARE_VERSION:{
		uint8_t firmware_version_size = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	73fb      	strb	r3, [r7, #15]
		while(firmware_version[firmware_version_size++]);
 800035c:	bf00      	nop
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	1c5a      	adds	r2, r3, #1
 8000362:	73fa      	strb	r2, [r7, #15]
 8000364:	461a      	mov	r2, r3
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <cmd_exec+0x21c>)
 8000368:	5c9b      	ldrb	r3, [r3, r2]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f7      	bne.n	800035e <cmd_exec+0x1d2>
		pcomm_tx_put_cmd_frame(p, _CMD_FIRMWARE_VERSION, (uint8_t *)firmware_version, firmware_version_size-1);
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	3b01      	subs	r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <cmd_exec+0x21c>)
 8000376:	21a1      	movs	r1, #161	; 0xa1
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f000 fd6e 	bl	8000e5a <pcomm_tx_put_cmd_frame>
		break;
 800037e:	e007      	b.n	8000390 <cmd_exec+0x204>
	}

	// Comando desconocido
	default:{
		pcomm_tx_put_data_frame(p, (uint8_t *)cmd_error, 3);
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <cmd_exec+0x218>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2203      	movs	r2, #3
 8000386:	4619      	mov	r1, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f000 fd29 	bl	8000de0 <pcomm_tx_put_data_frame>
		break;
 800038e:	bf00      	nop
	}
	}
	pcomm_rx_data_flush(p);
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 fc63 	bl	8000c5c <pcomm_rx_data_flush>
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bd90      	pop	{r4, r7, pc}
 800039e:	bf00      	nop
 80003a0:	200001a8 	.word	0x200001a8
 80003a4:	20000000 	.word	0x20000000
 80003a8:	200001ac 	.word	0x200001ac

080003ac <local_init_control>:
 *      Author: psilva
 */

#include "local.h"

void local_init_control(_control *c, uint16_t *ch1_bf, uint16_t ch1_bf_size, uint16_t *ch2_bf, uint16_t ch2_bf_size){
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	4613      	mov	r3, r2
 80003ba:	80fb      	strh	r3, [r7, #6]
	c->bf_adc_ch1 = ch1_bf;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	68ba      	ldr	r2, [r7, #8]
 80003c0:	601a      	str	r2, [r3, #0]
	c->bf_adc_ch1_size = ch1_bf_size;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	88fa      	ldrh	r2, [r7, #6]
 80003c6:	811a      	strh	r2, [r3, #8]
	c->bf_adc_ch2 = ch2_bf;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	605a      	str	r2, [r3, #4]
	c->bf_adc_ch2_size = ch2_bf_size;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	8b3a      	ldrh	r2, [r7, #24]
 80003d2:	815a      	strh	r2, [r3, #10]
	c->bf_adc_ch1_iw = 0;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2200      	movs	r2, #0
 80003d8:	819a      	strh	r2, [r3, #12]
	c->bf_adc_ch1_ir = 0;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2200      	movs	r2, #0
 80003de:	81da      	strh	r2, [r3, #14]
	c->bf_adc_ch2_iw = 0;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	2200      	movs	r2, #0
 80003e4:	821a      	strh	r2, [r3, #16]
	c->bf_adc_ch2_ir = 0;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	2200      	movs	r2, #0
 80003ea:	825a      	strh	r2, [r3, #18]
	c->control_status = 0;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
	c->adc_prescaler = 0;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	2200      	movs	r2, #0
 80003f6:	831a      	strh	r2, [r3, #24]
	c->adc_autoreload = 0;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	2200      	movs	r2, #0
 80003fc:	835a      	strh	r2, [r3, #26]
	c->adc_ch1_trigger = 0;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	2200      	movs	r2, #0
 8000402:	839a      	strh	r2, [r3, #28]
	c->adc_ch2_trigger = 0;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2200      	movs	r2, #0
 8000408:	83da      	strh	r2, [r3, #30]
	c->pwm_prescaler = 0;
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	2200      	movs	r2, #0
 800040e:	841a      	strh	r2, [r3, #32]
	c->pwm_compare = 0;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	2200      	movs	r2, #0
 8000414:	845a      	strh	r2, [r3, #34]	; 0x22
	c->pwm_autoreload = 0;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2200      	movs	r2, #0
 800041a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800041c:	bf00      	nop
 800041e:	3714      	adds	r7, #20
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
	...

08000428 <HAL_ADC_ConvCpltCallback>:
 * --------------  REDEFINICION DE MANEJO DE INTERRUPCIONES   ---------------------------
 */
/*
 * ISR ADC - Conversion complete
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	if(control.bf_adc_ch1_iw < _ADC_BUFF_SIZE)
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 8000432:	899b      	ldrh	r3, [r3, #12]
 8000434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000438:	d20f      	bcs.n	800045a <HAL_ADC_ConvCpltCallback+0x32>
		control.bf_adc_ch1[control.bf_adc_ch1_iw++] = HAL_ADC_GetValue(&hadc1);
 800043a:	4815      	ldr	r0, [pc, #84]	; (8000490 <HAL_ADC_ConvCpltCallback+0x68>)
 800043c:	f001 fd96 	bl	8001f6c <HAL_ADC_GetValue>
 8000440:	4604      	mov	r4, r0
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 8000448:	899b      	ldrh	r3, [r3, #12]
 800044a:	1c59      	adds	r1, r3, #1
 800044c:	b288      	uxth	r0, r1
 800044e:	490f      	ldr	r1, [pc, #60]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 8000450:	8188      	strh	r0, [r1, #12]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	4413      	add	r3, r2
 8000456:	b2a2      	uxth	r2, r4
 8000458:	801a      	strh	r2, [r3, #0]
	if(control.bf_adc_ch2_iw < _ADC_BUFF_SIZE)
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 800045c:	8a1b      	ldrh	r3, [r3, #16]
 800045e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000462:	d20f      	bcs.n	8000484 <HAL_ADC_ConvCpltCallback+0x5c>
		control.bf_adc_ch2[control.bf_adc_ch2_iw++] = HAL_ADC_GetValue(&hadc2);
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000466:	f001 fd81 	bl	8001f6c <HAL_ADC_GetValue>
 800046a:	4604      	mov	r4, r0
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 8000472:	8a1b      	ldrh	r3, [r3, #16]
 8000474:	1c59      	adds	r1, r3, #1
 8000476:	b288      	uxth	r0, r1
 8000478:	4904      	ldr	r1, [pc, #16]	; (800048c <HAL_ADC_ConvCpltCallback+0x64>)
 800047a:	8208      	strh	r0, [r1, #16]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4413      	add	r3, r2
 8000480:	b2a2      	uxth	r2, r4
 8000482:	801a      	strh	r2, [r3, #0]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bd90      	pop	{r4, r7, pc}
 800048c:	20002860 	.word	0x20002860
 8000490:	200001d8 	.word	0x200001d8
 8000494:	20000208 	.word	0x20000208

08000498 <heartbeat_gpio_callback>:
 */

/*
 * Al hearbeat
 */
void heartbeat_gpio_callback(uint8_t state){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, state);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	461a      	mov	r2, r3
 80004a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004aa:	4803      	ldr	r0, [pc, #12]	; (80004b8 <heartbeat_gpio_callback+0x20>)
 80004ac:	f002 fb64 	bl	8002b78 <HAL_GPIO_WritePin>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40011000 	.word	0x40011000

080004bc <cdc_receive>:

/*
 * al modulo CDC para la carga de datos recibidos por USB CDC
 */
void cdc_receive(uint8_t *Buf, uint32_t *Len){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	pcomm_rx_receive_array(&cdc, Buf, *Len);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	461a      	mov	r2, r3
 80004cc:	6879      	ldr	r1, [r7, #4]
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <cdc_receive+0x20>)
 80004d0:	f000 fb7d 	bl	8000bce <pcomm_rx_receive_array>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20002820 	.word	0x20002820

080004e0 <tasks_1ms>:
}

/*
 * Al planificador usrtick
 */
void tasks_1ms(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	// Envio datos disponibles en pcomm CDC
	if(pcomm_tx_data_ready(&cdc)){
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <tasks_1ms+0x48>)
 80004e6:	f000 fd14 	bl	8000f12 <pcomm_tx_data_ready>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00f      	beq.n	8000510 <tasks_1ms+0x30>
		if(CDC_Transmit_FS_Status() == USBD_OK){
 80004f0:	f009 ff80 	bl	800a3f4 <CDC_Transmit_FS_Status>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d10a      	bne.n	8000510 <tasks_1ms+0x30>
			CDC_Transmit_FS(cdc.tx.buff, cdc.tx.iw);
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <tasks_1ms+0x48>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <tasks_1ms+0x48>)
 8000500:	88d2      	ldrh	r2, [r2, #6]
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f009 ff41 	bl	800a38c <CDC_Transmit_FS>
			pcomm_tx_data_flush(&cdc);
 800050a:	4807      	ldr	r0, [pc, #28]	; (8000528 <tasks_1ms+0x48>)
 800050c:	f000 fd0c 	bl	8000f28 <pcomm_tx_data_flush>
		}
	}

	// Ejecucion de comandos
	if(pcomm_rx_data_ready(&cdc)){
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <tasks_1ms+0x48>)
 8000512:	f000 fb8b 	bl	8000c2c <pcomm_rx_data_ready>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <tasks_1ms+0x42>
		cmd_exec(&cdc);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <tasks_1ms+0x48>)
 800051e:	f7ff fe35 	bl	800018c <cmd_exec>
	}
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20002820 	.word	0x20002820

0800052c <tasks_10ms>:

void tasks_10ms(){}
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <tasks_100ms>:

void tasks_100ms(){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	heartbeat(&hb);
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <tasks_100ms+0x10>)
 800053e:	f001 f917 	bl	8001770 <heartbeat>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20002814 	.word	0x20002814

0800054c <tasks_1s>:

void tasks_1s(){}
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <tasks_10s>:

void tasks_10s(){}
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f001 fb0f 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f8b3 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fa5d 	bl	8000a30 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000576:	f000 f90d 	bl	8000794 <MX_ADC1_Init>
  MX_ADC2_Init();
 800057a:	f000 f959 	bl	8000830 <MX_ADC2_Init>
  MX_TIM4_Init();
 800057e:	f000 f9e1 	bl	8000944 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000582:	f009 fe3f 	bl	800a204 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000586:	f000 f991 	bl	80008ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Establezco la cadena firmware_version si no esta definida como macro o via MakeFile
  #ifndef _FIRMWARE_VERSION_
  get_firmware_version(_FIRMWARE_VERSION_PREFIX_, _FIRMWARE_VERSION_SUFFIX_, firmware_version);
 800058a:	4a3d      	ldr	r2, [pc, #244]	; (8000680 <main+0x11c>)
 800058c:	493d      	ldr	r1, [pc, #244]	; (8000684 <main+0x120>)
 800058e:	483e      	ldr	r0, [pc, #248]	; (8000688 <main+0x124>)
 8000590:	f001 f91e 	bl	80017d0 <get_firmware_version>
  #endif


  // Inicializacion del planificador usertick
  usrtick_init(&usrtick, 1000);
 8000594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000598:	483c      	ldr	r0, [pc, #240]	; (800068c <main+0x128>)
 800059a:	f000 ffc3 	bl	8001524 <usrtick_init>
  usrtick_attach(&usrtick, tasks_1ms, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	493b      	ldr	r1, [pc, #236]	; (8000690 <main+0x12c>)
 80005a2:	483a      	ldr	r0, [pc, #232]	; (800068c <main+0x128>)
 80005a4:	f000 ffd7 	bl	8001556 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_10ms, 10);
 80005a8:	220a      	movs	r2, #10
 80005aa:	493a      	ldr	r1, [pc, #232]	; (8000694 <main+0x130>)
 80005ac:	4837      	ldr	r0, [pc, #220]	; (800068c <main+0x128>)
 80005ae:	f000 ffd2 	bl	8001556 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_100ms, 100);
 80005b2:	2264      	movs	r2, #100	; 0x64
 80005b4:	4938      	ldr	r1, [pc, #224]	; (8000698 <main+0x134>)
 80005b6:	4835      	ldr	r0, [pc, #212]	; (800068c <main+0x128>)
 80005b8:	f000 ffcd 	bl	8001556 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_1s, 1000);
 80005bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c0:	4936      	ldr	r1, [pc, #216]	; (800069c <main+0x138>)
 80005c2:	4832      	ldr	r0, [pc, #200]	; (800068c <main+0x128>)
 80005c4:	f000 ffc7 	bl	8001556 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_10s, 10000);
 80005c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80005cc:	4934      	ldr	r1, [pc, #208]	; (80006a0 <main+0x13c>)
 80005ce:	482f      	ldr	r0, [pc, #188]	; (800068c <main+0x128>)
 80005d0:	f000 ffc1 	bl	8001556 <usrtick_attach>

  // Inicializacion de heartbeat
  heartbeat_init(&hb);
 80005d4:	4833      	ldr	r0, [pc, #204]	; (80006a4 <main+0x140>)
 80005d6:	f001 f8b7 	bl	8001748 <heartbeat_init>
  heartbeat_attach(&hb, heartbeat_gpio_callback);
 80005da:	4933      	ldr	r1, [pc, #204]	; (80006a8 <main+0x144>)
 80005dc:	4831      	ldr	r0, [pc, #196]	; (80006a4 <main+0x140>)
 80005de:	f001 f8ea 	bl	80017b6 <heartbeat_attach>

  // Inicializo protocolo de comunicación
  pcomm_init(&cdc, _PCOMM_TX_MODE_BATCH, __rx_bf_cdc, _PCOMM_RX_BUFF_SIZE, __tx_bf_cdc, _PCOMM_TX_BUFF_SIZE, 100);
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <main+0x148>)
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f4:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <main+0x14c>)
 80005f6:	2101      	movs	r1, #1
 80005f8:	482e      	ldr	r0, [pc, #184]	; (80006b4 <main+0x150>)
 80005fa:	f000 fa8a 	bl	8000b12 <pcomm_init>

  // Inicializo recepcion de comandos
  cmd_init(&usrtick, &hb, &cdc, &control);
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <main+0x154>)
 8000600:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <main+0x150>)
 8000602:	4928      	ldr	r1, [pc, #160]	; (80006a4 <main+0x140>)
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <main+0x128>)
 8000606:	f7ff fda1 	bl	800014c <cmd_init>

  // Inicializo control
  local_init_control(&control, __bf_adc_ch1, _ADC_BUFF_SIZE, __bf_adc_ch2, _ADC_BUFF_SIZE);
 800060a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <main+0x158>)
 8000612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000616:	492a      	ldr	r1, [pc, #168]	; (80006c0 <main+0x15c>)
 8000618:	4827      	ldr	r0, [pc, #156]	; (80006b8 <main+0x154>)
 800061a:	f7ff fec7 	bl	80003ac <local_init_control>

  // Establezco la funcion callback para la recepcion sobre USB CDC
  CDC_Attach_Receive_FS(cdc_receive);
 800061e:	4829      	ldr	r0, [pc, #164]	; (80006c4 <main+0x160>)
 8000620:	f009 feda 	bl	800a3d8 <CDC_Attach_Receive_FS>

  //  Inicio los Timers
  HAL_TIM_Base_Start_IT(&htim3);
 8000624:	4828      	ldr	r0, [pc, #160]	; (80006c8 <main+0x164>)
 8000626:	f004 fd99 	bl	800515c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 800062a:	4828      	ldr	r0, [pc, #160]	; (80006cc <main+0x168>)
 800062c:	f004 fd4c 	bl	80050c8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000630:	2108      	movs	r1, #8
 8000632:	4826      	ldr	r0, [pc, #152]	; (80006cc <main+0x168>)
 8000634:	f004 fe3c 	bl	80052b0 <HAL_TIM_PWM_Start>

  // calibrate ADC for better accuracy and start it w/ interrupt
  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <main+0x16c>)
 800063a:	f001 ff03 	bl	8002444 <HAL_ADCEx_Calibration_Start>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <main+0xe4>
	  Error_Handler();
 8000644:	f000 fa60 	bl	8000b08 <Error_Handler>
  if(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK)
 8000648:	4822      	ldr	r0, [pc, #136]	; (80006d4 <main+0x170>)
 800064a:	f001 fefb 	bl	8002444 <HAL_ADCEx_Calibration_Start>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <main+0xf4>
  	  Error_Handler();
 8000654:	f000 fa58 	bl	8000b08 <Error_Handler>

  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000658:	481d      	ldr	r0, [pc, #116]	; (80006d0 <main+0x16c>)
 800065a:	f001 fbd1 	bl	8001e00 <HAL_ADC_Start_IT>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <main+0x104>
	  Error_Handler();
 8000664:	f000 fa50 	bl	8000b08 <Error_Handler>

  if(HAL_ADC_Start_IT(&hadc2) != HAL_OK)
 8000668:	481a      	ldr	r0, [pc, #104]	; (80006d4 <main+0x170>)
 800066a:	f001 fbc9 	bl	8001e00 <HAL_ADC_Start_IT>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <main+0x114>
	  Error_Handler();
 8000674:	f000 fa48 	bl	8000b08 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	usrtick_work(&usrtick);
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <main+0x128>)
 800067a:	f000 ffa3 	bl	80015c4 <usrtick_work>
 800067e:	e7fb      	b.n	8000678 <main+0x114>
 8000680:	200001ac 	.word	0x200001ac
 8000684:	0800abfc 	.word	0x0800abfc
 8000688:	0800ac04 	.word	0x0800ac04
 800068c:	200027c8 	.word	0x200027c8
 8000690:	080004e1 	.word	0x080004e1
 8000694:	0800052d 	.word	0x0800052d
 8000698:	08000539 	.word	0x08000539
 800069c:	0800054d 	.word	0x0800054d
 80006a0:	08000559 	.word	0x08000559
 80006a4:	20002814 	.word	0x20002814
 80006a8:	08000499 	.word	0x08000499
 80006ac:	200003c8 	.word	0x200003c8
 80006b0:	200002c8 	.word	0x200002c8
 80006b4:	20002820 	.word	0x20002820
 80006b8:	20002860 	.word	0x20002860
 80006bc:	200017c8 	.word	0x200017c8
 80006c0:	200007c8 	.word	0x200007c8
 80006c4:	080004bd 	.word	0x080004bd
 80006c8:	20000238 	.word	0x20000238
 80006cc:	20000280 	.word	0x20000280
 80006d0:	200001d8 	.word	0x200001d8
 80006d4:	20000208 	.word	0x20000208

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e2:	2228      	movs	r2, #40	; 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00a fa72 	bl	800abd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000724:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fefe 	bl	8004530 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800073a:	f000 f9e5 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f004 f96a 	bl	8004a34 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000766:	f000 f9cf 	bl	8000b08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800076a:	2312      	movs	r3, #18
 800076c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800076e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000772:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f004 fade 	bl	8004d3c <HAL_RCCEx_PeriphCLKConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000786:	f000 f9bf 	bl	8000b08 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_ADC1_Init+0x94>)
 80007aa:	4a20      	ldr	r2, [pc, #128]	; (800082c <MX_ADC1_Init+0x98>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ADC1_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_ADC1_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ADC1_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_ADC1_Init+0x94>)
 80007c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_ADC1_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_ADC1_Init+0x94>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_ADC1_Init+0x94>)
 80007d6:	f001 fa3b 	bl	8001c50 <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 80007e0:	f000 f992 	bl	8000b08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80007e4:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80007e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_ADC1_Init+0x94>)
 80007f2:	f001 fedd 	bl	80025b0 <HAL_ADCEx_MultiModeConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007fc:	f000 f984 	bl	8000b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000800:	2300      	movs	r3, #0
 8000802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000804:	2301      	movs	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_ADC1_Init+0x94>)
 8000812:	f001 fc83 	bl	800211c <HAL_ADC_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800081c:	f000 f974 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200001d8 	.word	0x200001d8
 800082c:	40012400 	.word	0x40012400

08000830 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_ADC2_Init+0x74>)
 8000842:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <MX_ADC2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_ADC2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_ADC2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_ADC2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_ADC2_Init+0x74>)
 800085a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800085e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_ADC2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_ADC2_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_ADC2_Init+0x74>)
 800086e:	f001 f9ef 	bl	8001c50 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f946 	bl	8000b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800087c:	2301      	movs	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2301      	movs	r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_ADC2_Init+0x74>)
 800088e:	f001 fc45 	bl	800211c <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000898:	f000 f936 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000208 	.word	0x20000208
 80008a8:	40012800 	.word	0x40012800

080008ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_TIM3_Init+0x90>)
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <MX_TIM3_Init+0x94>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_TIM3_Init+0x90>)
 80008d0:	2247      	movs	r2, #71	; 0x47
 80008d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_TIM3_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_TIM3_Init+0x90>)
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_TIM3_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_TIM3_Init+0x90>)
 80008e8:	2280      	movs	r2, #128	; 0x80
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ec:	4813      	ldr	r0, [pc, #76]	; (800093c <MX_TIM3_Init+0x90>)
 80008ee:	f004 fb9b 	bl	8005028 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80008f8:	f000 f906 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_TIM3_Init+0x90>)
 800090a:	f004 ff39 	bl	8005780 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000914:	f000 f8f8 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000918:	2320      	movs	r3, #32
 800091a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM3_Init+0x90>)
 8000926:	f005 fac1 	bl	8005eac <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000930:	f000 f8ea 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000238 	.word	0x20000238
 8000940:	40000400 	.word	0x40000400

08000944 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_TIM4_Init+0xe4>)
 8000976:	4a2d      	ldr	r2, [pc, #180]	; (8000a2c <MX_TIM4_Init+0xe8>)
 8000978:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_TIM4_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_TIM4_Init+0xe4>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_TIM4_Init+0xe4>)
 8000988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_TIM4_Init+0xe4>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <MX_TIM4_Init+0xe4>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800099a:	4823      	ldr	r0, [pc, #140]	; (8000a28 <MX_TIM4_Init+0xe4>)
 800099c:	f004 fb44 	bl	8005028 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009a6:	f000 f8af 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481c      	ldr	r0, [pc, #112]	; (8000a28 <MX_TIM4_Init+0xe4>)
 80009b8:	f004 fee2 	bl	8005780 <HAL_TIM_ConfigClockSource>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80009c2:	f000 f8a1 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009c6:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_TIM4_Init+0xe4>)
 80009c8:	f004 fc1a 	bl	8005200 <HAL_TIM_PWM_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009d2:	f000 f899 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	4619      	mov	r1, r3
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <MX_TIM4_Init+0xe4>)
 80009e6:	f005 fa61 	bl	8005eac <HAL_TIMEx_MasterConfigSynchronization>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009f0:	f000 f88a 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f4:	2360      	movs	r3, #96	; 0x60
 80009f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2208      	movs	r2, #8
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <MX_TIM4_Init+0xe4>)
 8000a0c:	f004 fdfa 	bl	8005604 <HAL_TIM_PWM_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a16:	f000 f877 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <MX_TIM4_Init+0xe4>)
 8000a1c:	f000 fcfe 	bl	800141c <HAL_TIM_MspPostInit>

}
 8000a20:	bf00      	nop
 8000a22:	3738      	adds	r7, #56	; 0x38
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000280 	.word	0x20000280
 8000a2c:	40000800 	.word	0x40000800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a2c      	ldr	r2, [pc, #176]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0310 	and.w	r3, r3, #16
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5c:	4b27      	ldr	r3, [pc, #156]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a26      	ldr	r2, [pc, #152]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_GPIO_Init+0xcc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4815      	ldr	r0, [pc, #84]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000aac:	f002 f864 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O1__Pin|O1_A3_Pin|O2__Pin|O2_A5_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	213c      	movs	r1, #60	; 0x3c
 8000ab4:	4813      	ldr	r0, [pc, #76]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000ab6:	f002 f85f 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_GPIO_Init+0xd0>)
 8000ad4:	f001 fecc 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : O1__Pin O1_A3_Pin O2__Pin O2_A5_Pin */
  GPIO_InitStruct.Pin = O1__Pin|O1_A3_Pin|O2__Pin|O2_A5_Pin;
 8000ad8:	233c      	movs	r3, #60	; 0x3c
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_GPIO_Init+0xd4>)
 8000af0:	f001 febe 	bl	8002870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40010800 	.word	0x40010800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>

08000b12 <pcomm_init>:


/*
 * Inicializa el protocolo
 */
void pcomm_init(_pcomm *p, uint8_t mode, uint8_t *rx_buff, uint16_t rx_size, uint8_t *tx_buff, uint16_t tx_size, uint32_t tb){
 8000b12:	b480      	push	{r7}
 8000b14:	b085      	sub	sp, #20
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	460b      	mov	r3, r1
 8000b20:	72fb      	strb	r3, [r7, #11]
 8000b22:	4613      	mov	r3, r2
 8000b24:	813b      	strh	r3, [r7, #8]
    p->rx.buff = rx_buff;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	611a      	str	r2, [r3, #16]
    p->rx.iw = 0;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	82da      	strh	r2, [r3, #22]
    p->rx.ir = 0;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2200      	movs	r2, #0
 8000b36:	829a      	strh	r2, [r3, #20]
    p->rx.imask = rx_size - 1;
 8000b38:	893b      	ldrh	r3, [r7, #8]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	831a      	strh	r2, [r3, #24]
    p->rx.status = 0;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    p->rx.tout_base = tb;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a3a      	ldr	r2, [r7, #32]
 8000b4e:	61da      	str	r2, [r3, #28]
    p->rx.tout_value = 0;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
    p->rx.dataready = 0;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p->rx.datastart = 0;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	859a      	strh	r2, [r3, #44]	; 0x2c
    p->rx.busy = 0;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p->rx.chksum = 0;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    p->rx.checkframe_active = 0;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    p->rx.malformed_frame_errors= 0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
    p->rx.chksum_errors = 0;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30
    p->rx.timeout_errors = 0;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38
    p->tx.buff = tx_buff;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	601a      	str	r2, [r3, #0]
    p->tx.iw = 0;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	80da      	strh	r2, [r3, #6]
    p->tx.ir = 0;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	809a      	strh	r2, [r3, #4]
    p->tx.imask = tx_size - 1;
 8000ba0:	8bbb      	ldrh	r3, [r7, #28]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	811a      	strh	r2, [r3, #8]
    p->tx.dataready = 0;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	819a      	strh	r2, [r3, #12]
    p->tx.busy = 0;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	739a      	strb	r2, [r3, #14]
    p->tx.chksum= 0;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	729a      	strb	r2, [r3, #10]
    p->mode = mode;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	7afa      	ldrb	r2, [r7, #11]
 8000bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <pcomm_rx_receive_array>:
/*   -----------  ENTRADA  ---------------*/

/*
 * Ingreso de datos al buffer de entrada
 */
void pcomm_rx_receive_array(_pcomm *p, uint8_t *b, const uint32_t len){
 8000bce:	b490      	push	{r4, r7}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
    p->rx.tout_value = 0;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
    for(uint32_t i = 0; i < len; i++){
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e018      	b.n	8000c18 <pcomm_rx_receive_array+0x4a>
        p->rx.buff[p->rx.iw++] = b[i];
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	441a      	add	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6919      	ldr	r1, [r3, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	8adb      	ldrh	r3, [r3, #22]
 8000bf4:	1c58      	adds	r0, r3, #1
 8000bf6:	b284      	uxth	r4, r0
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	82c4      	strh	r4, [r0, #22]
 8000bfc:	440b      	add	r3, r1
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	701a      	strb	r2, [r3, #0]
        p->rx.iw &= p->rx.imask;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	8ada      	ldrh	r2, [r3, #22]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	8b1b      	ldrh	r3, [r3, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	82da      	strh	r2, [r3, #22]
    for(uint32_t i = 0; i < len; i++){
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d3e2      	bcc.n	8000be6 <pcomm_rx_receive_array+0x18>
    }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc90      	pop	{r4, r7}
 8000c2a:	4770      	bx	lr

08000c2c <pcomm_rx_data_ready>:
/*
 * Retorna 1 si se recibió un frame de datos correcto, 0 en caso contrario
 * No procesa nuevos bytes hasta que no se ha leído el ultimo frame de datos
 * Tambien incrementa el timeout
 */
uint8_t pcomm_rx_data_ready(_pcomm *p){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    if(p->rx.dataready)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <pcomm_rx_data_ready+0x16>
        return 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e008      	b.n	8000c54 <pcomm_rx_data_ready+0x28>
    else{
        p->rx.tout_value++;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	621a      	str	r2, [r3, #32]
        return _checkframe(p);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f9af 	bl	8000fb0 <_checkframe>
 8000c52:	4603      	mov	r3, r0
    }
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <pcomm_rx_data_flush>:


/*
 * Se termino de leer datos de entrada
 */
void pcomm_rx_data_flush(_pcomm *p){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    p->rx.dataready = 0;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p->rx.busy = 0;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
	...

08000c80 <pcomm_tx_put_header>:

/*
 * Ingreso de un header al buffer de salida
 * Tener en cuenta que p->tx.dataready solo se actualiza en pcomm_tx_put_chksum o pcomm_tx_put_data_frame
 */
void pcomm_tx_put_header(_pcomm *p, uint8_t size){
 8000c80:	b490      	push	{r4, r7}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
    p->tx.chksum = 0;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	729a      	strb	r2, [r3, #10]
    for(int i = 0; i < _header_size-2; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	e022      	b.n	8000cde <pcomm_tx_put_header+0x5e>
        p->tx.buff[p->tx.iw++] = _header[i];
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	88db      	ldrh	r3, [r3, #6]
 8000ca0:	1c59      	adds	r1, r3, #1
 8000ca2:	b288      	uxth	r0, r1
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	80c8      	strh	r0, [r1, #6]
 8000ca8:	4413      	add	r3, r2
 8000caa:	492f      	ldr	r1, [pc, #188]	; (8000d68 <pcomm_tx_put_header+0xe8>)
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	440a      	add	r2, r1
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	701a      	strb	r2, [r3, #0]
        p->tx.iw &= p->tx.imask;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	88da      	ldrh	r2, [r3, #6]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	891b      	ldrh	r3, [r3, #8]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	80da      	strh	r2, [r3, #6]
        p->tx.chksum ^= _header[i];
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7a9a      	ldrb	r2, [r3, #10]
 8000cc8:	4927      	ldr	r1, [pc, #156]	; (8000d68 <pcomm_tx_put_header+0xe8>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	440b      	add	r3, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4053      	eors	r3, r2
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	729a      	strb	r2, [r3, #10]
    for(int i = 0; i < _header_size-2; i++){
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	2306      	movs	r3, #6
 8000ce0:	3b02      	subs	r3, #2
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbd7      	blt.n	8000c98 <pcomm_tx_put_header+0x18>
    }
    p->tx.buff[p->tx.iw++] = size;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	88db      	ldrh	r3, [r3, #6]
 8000cf0:	1c59      	adds	r1, r3, #1
 8000cf2:	b288      	uxth	r0, r1
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	80c8      	strh	r0, [r1, #6]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	78fa      	ldrb	r2, [r7, #3]
 8000cfc:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	88da      	ldrh	r2, [r3, #6]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	891b      	ldrh	r3, [r3, #8]
 8000d06:	4013      	ands	r3, r2
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	80da      	strh	r2, [r3, #6]
    p->tx.buff[p->tx.iw++] = _header[_header_size-1];
 8000d0e:	2306      	movs	r3, #6
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	88db      	ldrh	r3, [r3, #6]
 8000d1a:	1c58      	adds	r0, r3, #1
 8000d1c:	b284      	uxth	r4, r0
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	80c4      	strh	r4, [r0, #6]
 8000d22:	440b      	add	r3, r1
 8000d24:	4910      	ldr	r1, [pc, #64]	; (8000d68 <pcomm_tx_put_header+0xe8>)
 8000d26:	5c8a      	ldrb	r2, [r1, r2]
 8000d28:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	88da      	ldrh	r2, [r3, #6]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	891b      	ldrh	r3, [r3, #8]
 8000d32:	4013      	ands	r3, r2
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	80da      	strh	r2, [r3, #6]
    p->tx.chksum ^= size;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7a9a      	ldrb	r2, [r3, #10]
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	4053      	eors	r3, r2
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	729a      	strb	r2, [r3, #10]
    p->tx.chksum ^= _header[_header_size-1];
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7a9a      	ldrb	r2, [r3, #10]
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4905      	ldr	r1, [pc, #20]	; (8000d68 <pcomm_tx_put_header+0xe8>)
 8000d52:	5ccb      	ldrb	r3, [r1, r3]
 8000d54:	4053      	eors	r3, r2
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	729a      	strb	r2, [r3, #10]
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc90      	pop	{r4, r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	0800ac94 	.word	0x0800ac94

08000d6c <pcomm_tx_put_chksum>:


/*
 * Agrego checksum al buffer de salida, el frame está completo
 */
void pcomm_tx_put_chksum(_pcomm *p){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    p->tx.buff[p->tx.iw++] = p->tx.chksum;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	88db      	ldrh	r3, [r3, #6]
 8000d7c:	1c59      	adds	r1, r3, #1
 8000d7e:	b288      	uxth	r0, r1
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	80c8      	strh	r0, [r1, #6]
 8000d84:	4413      	add	r3, r2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	7a92      	ldrb	r2, [r2, #10]
 8000d8a:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	88da      	ldrh	r2, [r3, #6]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	891b      	ldrh	r3, [r3, #8]
 8000d94:	4013      	ands	r3, r2
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	80da      	strh	r2, [r3, #6]
    if(p->tx.iw > p->tx.ir)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	88da      	ldrh	r2, [r3, #6]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	889b      	ldrh	r3, [r3, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d908      	bls.n	8000dba <pcomm_tx_put_chksum+0x4e>
        p->tx.dataready = p->tx.iw - p->tx.ir;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	88da      	ldrh	r2, [r3, #6]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	889b      	ldrh	r3, [r3, #4]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	819a      	strh	r2, [r3, #12]
    else
        p->tx.dataready = p->tx.imask - p->tx.ir + p->tx.iw + 1;
}
 8000db8:	e00d      	b.n	8000dd6 <pcomm_tx_put_chksum+0x6a>
        p->tx.dataready = p->tx.imask - p->tx.ir + p->tx.iw + 1;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	891a      	ldrh	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	819a      	strh	r2, [r3, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <pcomm_tx_put_data_frame>:


/*
 * Ingreso de un frame completo al buffer de salida, con *data datos de tamaño size
 */
void pcomm_tx_put_data_frame(_pcomm *p, const uint8_t *data, const uint8_t size){
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	4613      	mov	r3, r2
 8000dec:	71fb      	strb	r3, [r7, #7]
    pcomm_tx_put_header(p, size);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4619      	mov	r1, r3
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff ff44 	bl	8000c80 <pcomm_tx_put_header>
    for(uint8_t i = 0; i < size; i++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	75fb      	strb	r3, [r7, #23]
 8000dfc:	e022      	b.n	8000e44 <pcomm_tx_put_data_frame+0x64>
        p->tx.buff[p->tx.iw++] = data[i];
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	441a      	add	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6819      	ldr	r1, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	88db      	ldrh	r3, [r3, #6]
 8000e0c:	1c58      	adds	r0, r3, #1
 8000e0e:	b284      	uxth	r4, r0
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	80c4      	strh	r4, [r0, #6]
 8000e14:	440b      	add	r3, r1
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	701a      	strb	r2, [r3, #0]
        p->tx.iw &= p->tx.imask;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	88da      	ldrh	r2, [r3, #6]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	891b      	ldrh	r3, [r3, #8]
 8000e22:	4013      	ands	r3, r2
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	80da      	strh	r2, [r3, #6]
        p->tx.chksum ^= data[i];
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	7a9a      	ldrb	r2, [r3, #10]
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	440b      	add	r3, r1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4053      	eors	r3, r2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	729a      	strb	r2, [r3, #10]
    for(uint8_t i = 0; i < size; i++){
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
 8000e40:	3301      	adds	r3, #1
 8000e42:	75fb      	strb	r3, [r7, #23]
 8000e44:	7dfa      	ldrb	r2, [r7, #23]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d3d8      	bcc.n	8000dfe <pcomm_tx_put_data_frame+0x1e>
    }
    pcomm_tx_put_chksum(p);
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f7ff ff8d 	bl	8000d6c <pcomm_tx_put_chksum>
}
 8000e52:	bf00      	nop
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}

08000e5a <pcomm_tx_put_cmd_frame>:

/*
 * Ingreso de un frame de comando al buffer de salida, un comando de 1 byte al principio y *data datos de tamaño datasize
 */
void pcomm_tx_put_cmd_frame(_pcomm *p, const uint8_t cmd, const uint8_t *data, const uint8_t datasize){
 8000e5a:	b590      	push	{r4, r7, lr}
 8000e5c:	b087      	sub	sp, #28
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	461a      	mov	r2, r3
 8000e66:	460b      	mov	r3, r1
 8000e68:	72fb      	strb	r3, [r7, #11]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	72bb      	strb	r3, [r7, #10]
    pcomm_tx_put_header(p, datasize+1);
 8000e6e:	7abb      	ldrb	r3, [r7, #10]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4619      	mov	r1, r3
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff ff02 	bl	8000c80 <pcomm_tx_put_header>
    p->tx.buff[p->tx.iw++] = cmd;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	88db      	ldrh	r3, [r3, #6]
 8000e84:	1c59      	adds	r1, r3, #1
 8000e86:	b288      	uxth	r0, r1
 8000e88:	68f9      	ldr	r1, [r7, #12]
 8000e8a:	80c8      	strh	r0, [r1, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	7afa      	ldrb	r2, [r7, #11]
 8000e90:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	88da      	ldrh	r2, [r3, #6]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	891b      	ldrh	r3, [r3, #8]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	80da      	strh	r2, [r3, #6]
    p->tx.chksum ^= cmd;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	7a9a      	ldrb	r2, [r3, #10]
 8000ea6:	7afb      	ldrb	r3, [r7, #11]
 8000ea8:	4053      	eors	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	729a      	strb	r2, [r3, #10]
    for(uint8_t i = 0; i < datasize; i++){
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	75fb      	strb	r3, [r7, #23]
 8000eb4:	e022      	b.n	8000efc <pcomm_tx_put_cmd_frame+0xa2>
        p->tx.buff[p->tx.iw++] = data[i];
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	441a      	add	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	88db      	ldrh	r3, [r3, #6]
 8000ec4:	1c58      	adds	r0, r3, #1
 8000ec6:	b284      	uxth	r4, r0
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	80c4      	strh	r4, [r0, #6]
 8000ecc:	440b      	add	r3, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
        p->tx.iw &= p->tx.imask;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	88da      	ldrh	r2, [r3, #6]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	891b      	ldrh	r3, [r3, #8]
 8000eda:	4013      	ands	r3, r2
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	80da      	strh	r2, [r3, #6]
        p->tx.chksum ^= data[i];
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	7a9a      	ldrb	r2, [r3, #10]
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	440b      	add	r3, r1
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4053      	eors	r3, r2
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	729a      	strb	r2, [r3, #10]
    for(uint8_t i = 0; i < datasize; i++){
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	75fb      	strb	r3, [r7, #23]
 8000efc:	7dfa      	ldrb	r2, [r7, #23]
 8000efe:	7abb      	ldrb	r3, [r7, #10]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d3d8      	bcc.n	8000eb6 <pcomm_tx_put_cmd_frame+0x5c>
    }
    pcomm_tx_put_chksum(p);
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff ff31 	bl	8000d6c <pcomm_tx_put_chksum>
}
 8000f0a:	bf00      	nop
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}

08000f12 <pcomm_tx_data_ready>:


/*
 * Si hay un frame listo a ser enviado en el buffer de salida retorna su tamaño, 0 en caso contrario
 */
uint16_t pcomm_tx_data_ready(_pcomm *p){
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
    return p->tx.dataready;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	899b      	ldrh	r3, [r3, #12]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <pcomm_tx_data_flush>:

/*
 * Se termino de enviar datos en buffer de salida
 * Esta funcion solo tiene sentido para _PCOMM_TX_MODE_BATCH
 */
void pcomm_tx_data_flush(_pcomm *p){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    p->tx.dataready = 0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	819a      	strh	r2, [r3, #12]
    p->tx.busy = 0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	739a      	strb	r2, [r3, #14]
    if(p->mode == _PCOMM_TX_MODE_BATCH){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d105      	bne.n	8000f52 <pcomm_tx_data_flush+0x2a>
        p->tx.iw = 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	80da      	strh	r2, [r3, #6]
        p->tx.ir = 0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	809a      	strh	r2, [r3, #4]
    }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <pcomm_rx_read_uint16_t>:
int8_t pcomm_rx_read_int8_t(_pcomm *p, uint16_t offset){
    _w.u8[0] = p->rx.buff[(p->rx.datastart + offset) & p->rx.imask];
    return _w.i8[0];
}

uint16_t pcomm_rx_read_uint16_t(_pcomm *p, uint16_t offset){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
    for(uint8_t i = 0; i < 2; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e013      	b.n	8000f96 <pcomm_rx_read_uint16_t+0x3a>
        _w.u8[i] = p->rx.buff[(p->rx.datastart + offset + i) & p->rx.imask];
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000f76:	4611      	mov	r1, r2
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	4411      	add	r1, r2
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	440a      	add	r2, r1
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	8b09      	ldrh	r1, [r1, #24]
 8000f84:	400a      	ands	r2, r1
 8000f86:	441a      	add	r2, r3
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	7811      	ldrb	r1, [r2, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <pcomm_rx_read_uint16_t+0x50>)
 8000f8e:	54d1      	strb	r1, [r2, r3]
    for(uint8_t i = 0; i < 2; i++)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d9e8      	bls.n	8000f6e <pcomm_rx_read_uint16_t+0x12>
    return _w.u16[0];
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <pcomm_rx_read_uint16_t+0x50>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20002888 	.word	0x20002888

08000fb0 <_checkframe>:
 * p->rx.status:
 * 		[0..5] : corresponde a cada campo del header, 4 es el tamaño del frame
 * 		6 : en bucle de lectura de datos
 * 		7 : esperando checksum, si checksum coincide hay un frame completo y listo
 */
static uint8_t _checkframe(_pcomm *p){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    if(p->rx.checkframe_active == 1) return 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <_checkframe+0x16>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e140      	b.n	8001248 <_checkframe+0x298>

    if(p->rx.ir == p->rx.iw){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	8a9a      	ldrh	r2, [r3, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	8adb      	ldrh	r3, [r3, #22]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d117      	bne.n	8001002 <_checkframe+0x52>
        if(p->rx.tout_value > p->rx.tout_base){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1a      	ldr	r2, [r3, #32]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d90f      	bls.n	8000ffe <_checkframe+0x4e>
            p->rx.tout_value = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
            p->rx.status = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            p->rx.chksum = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            p->rx.timeout_errors++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
        }
        return 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e122      	b.n	8001248 <_checkframe+0x298>
    }
    p->rx.tout_value = 0;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
    p->rx.checkframe_active = 1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    while(p->rx.ir != p->rx.iw && p->rx.dataready == 0){
 8001010:	bf00      	nop
 8001012:	e106      	b.n	8001222 <_checkframe+0x272>
        switch(p->rx.status){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800101a:	2b07      	cmp	r3, #7
 800101c:	f200 8101 	bhi.w	8001222 <_checkframe+0x272>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <_checkframe+0x78>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001049 	.word	0x08001049
 800102c:	08001049 	.word	0x08001049
 8001030:	08001049 	.word	0x08001049
 8001034:	08001049 	.word	0x08001049
 8001038:	080010f3 	.word	0x080010f3
 800103c:	08001049 	.word	0x08001049
 8001040:	08001167 	.word	0x08001167
 8001044:	080011cb 	.word	0x080011cb
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:{
                if(_header[p->rx.status] == p->rx.buff[p->rx.ir]){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800104e:	461a      	mov	r2, r3
 8001050:	4b80      	ldr	r3, [pc, #512]	; (8001254 <_checkframe+0x2a4>)
 8001052:	5c9a      	ldrb	r2, [r3, r2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	8a89      	ldrh	r1, [r1, #20]
 800105c:	440b      	add	r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d124      	bne.n	80010ae <_checkframe+0xfe>
                    p->rx.chksum ^= p->rx.buff[p->rx.ir];
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	8a89      	ldrh	r1, [r1, #20]
 8001072:	440b      	add	r3, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4053      	eors	r3, r2
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    p->rx.status++;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    p->rx.ir++;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	8a9b      	ldrh	r3, [r3, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	829a      	strh	r2, [r3, #20]
                    p->rx.ir &= p->rx.imask;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	8a9a      	ldrh	r2, [r3, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	8b1b      	ldrh	r3, [r3, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	829a      	strh	r2, [r3, #20]
 80010ac:	e0b9      	b.n	8001222 <_checkframe+0x272>
                }else{
                    if(p->rx.status == 0){ // Reproceso el byte actual a menos que sea estado 0, donde si no es una U se descarta
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10e      	bne.n	80010d6 <_checkframe+0x126>
                        p->rx.ir++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	8a9b      	ldrh	r3, [r3, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	829a      	strh	r2, [r3, #20]
                        p->rx.ir &= p->rx.imask;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8a9a      	ldrh	r2, [r3, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	8b1b      	ldrh	r3, [r3, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	829a      	strh	r2, [r3, #20]
 80010d4:	e004      	b.n	80010e0 <_checkframe+0x130>
                    }else{
                        p->rx.malformed_frame_errors++;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
                    }
                    p->rx.status = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    p->rx.chksum = 0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                }
                break;
 80010f0:	e097      	b.n	8001222 <_checkframe+0x272>
            }
            case 4:{
                p->rx.datasize = p->rx.buff[p->rx.ir];
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	8a92      	ldrh	r2, [r2, #20]
 80010fa:	4413      	add	r3, r2
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                p->rx.chksum ^= p->rx.buff[p->rx.ir];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	8a89      	ldrh	r1, [r1, #20]
 8001112:	440b      	add	r3, r1
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4053      	eors	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                p->rx.datasize_dec = p->rx.datasize;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                p->rx.datastart = p->rx.ir+2;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	8a9b      	ldrh	r3, [r3, #20]
 8001130:	3302      	adds	r3, #2
 8001132:	b29a      	uxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	859a      	strh	r2, [r3, #44]	; 0x2c
                p->rx.ir++;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	8a9b      	ldrh	r3, [r3, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	829a      	strh	r2, [r3, #20]
                p->rx.ir &= p->rx.imask;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	8a9a      	ldrh	r2, [r3, #20]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8b1b      	ldrh	r3, [r3, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	829a      	strh	r2, [r3, #20]
                p->rx.status++;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800115a:	3301      	adds	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                break;
 8001164:	e05d      	b.n	8001222 <_checkframe+0x272>
            }
            case 6:{
                p->rx.datasize_dec--;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800116c:	3b01      	subs	r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                p->rx.chksum ^= p->rx.buff[p->rx.ir];
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	8a89      	ldrh	r1, [r1, #20]
 8001184:	440b      	add	r3, r1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4053      	eors	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                p->rx.ir++;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	8a9b      	ldrh	r3, [r3, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	829a      	strh	r2, [r3, #20]
                p->rx.ir &= p->rx.imask;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	8a9a      	ldrh	r2, [r3, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	8b1b      	ldrh	r3, [r3, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	829a      	strh	r2, [r3, #20]
                if(p->rx.datasize_dec == 0){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d134      	bne.n	8001222 <_checkframe+0x272>
                    p->rx.status++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                break;
 80011c8:	e02b      	b.n	8001222 <_checkframe+0x272>
            }
            case 7:{
                if(p->rx.chksum == p->rx.buff[p->rx.ir]){ // Se recibió un frame correcto
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	8a89      	ldrh	r1, [r1, #20]
 80011d8:	440b      	add	r3, r1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d112      	bne.n	8001206 <_checkframe+0x256>
                    p->rx.ir++;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8a9b      	ldrh	r3, [r3, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	829a      	strh	r2, [r3, #20]
                    p->rx.ir &= p->rx.imask;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	8a9a      	ldrh	r2, [r3, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	8b1b      	ldrh	r3, [r3, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	829a      	strh	r2, [r3, #20]
                    p->rx.dataready = 1;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001204:	e004      	b.n	8001210 <_checkframe+0x260>
                }else{
                    p->rx.chksum_errors++;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
                }
                // Si no está correcto se reprocesa el byte actual
                p->rx.status = 0;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                p->rx.chksum = 0;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                break;
 8001220:	bf00      	nop
    while(p->rx.ir != p->rx.iw && p->rx.dataready == 0){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	8a9a      	ldrh	r2, [r3, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	8adb      	ldrh	r3, [r3, #22]
 800122a:	429a      	cmp	r2, r3
 800122c:	d005      	beq.n	800123a <_checkframe+0x28a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001234:	2b00      	cmp	r3, #0
 8001236:	f43f aeed 	beq.w	8001014 <_checkframe+0x64>
            }
        }
    }
    p->rx.checkframe_active = 0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    return p->rx.dataready;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	0800ac94 	.word	0x0800ac94

08001258 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_MspInit+0x5c>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <HAL_MspInit+0x5c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_MspInit+0x5c>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_MspInit+0x5c>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_MspInit+0x5c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_MspInit+0x5c>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_MspInit+0x60>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_MspInit+0x60>)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000

080012bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_ADC_MspInit+0xdc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d12a      	bne.n	8001332 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_ADC_MspInit+0xe0>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a2e      	ldr	r2, [pc, #184]	; (800139c <HAL_ADC_MspInit+0xe0>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <HAL_ADC_MspInit+0xe0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_ADC_MspInit+0xe0>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_ADC_MspInit+0xe0>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_ADC_MspInit+0xe0>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = A1_Pin;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001310:	2303      	movs	r3, #3
 8001312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A1_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	4619      	mov	r1, r3
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <HAL_ADC_MspInit+0xe4>)
 800131c:	f001 faa8 	bl	8002870 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2012      	movs	r0, #18
 8001326:	f001 fa6c 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800132a:	2012      	movs	r0, #18
 800132c:	f001 fa85 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001330:	e02e      	b.n	8001390 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_ADC_MspInit+0xe8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d129      	bne.n	8001390 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_ADC_MspInit+0xe0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <HAL_ADC_MspInit+0xe0>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_ADC_MspInit+0xe0>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_ADC_MspInit+0xe0>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_ADC_MspInit+0xe0>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_ADC_MspInit+0xe0>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A2_Pin;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	2303      	movs	r3, #3
 8001372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4619      	mov	r1, r3
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <HAL_ADC_MspInit+0xe4>)
 800137c:	f001 fa78 	bl	8002870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2012      	movs	r0, #18
 8001386:	f001 fa3c 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800138a:	2012      	movs	r0, #18
 800138c:	f001 fa55 	bl	800283a <HAL_NVIC_EnableIRQ>
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40012400 	.word	0x40012400
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40012800 	.word	0x40012800

080013a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_TIM_Base_MspInit+0x68>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10c      	bne.n	80013d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013d2:	e018      	b.n	8001406 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_TIM_Base_MspInit+0x70>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_TIM_Base_MspInit+0x6c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	201e      	movs	r0, #30
 80013fc:	f001 fa01 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001400:	201e      	movs	r0, #30
 8001402:	f001 fa1a 	bl	800283a <HAL_NVIC_EnableIRQ>
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40000400 	.word	0x40000400
 8001414:	40021000 	.word	0x40021000
 8001418:	40000800 	.word	0x40000800

0800141c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_TIM_MspPostInit+0x5c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d118      	bne.n	800146e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_TIM_MspPostInit+0x60>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_TIM_MspPostInit+0x60>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_MspPostInit+0x60>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_1_Pin;
 8001454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2302      	movs	r3, #2
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_TIM_MspPostInit+0x64>)
 800146a:	f001 fa01 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40000800 	.word	0x40000800
 800147c:	40021000 	.word	0x40021000
 8001480:	40010c00 	.word	0x40010c00

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ca:	f000 fba5 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <ADC1_2_IRQHandler+0x14>)
 80014da:	f000 fd53 	bl	8001f84 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <ADC1_2_IRQHandler+0x18>)
 80014e0:	f000 fd50 	bl	8001f84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200001d8 	.word	0x200001d8
 80014ec:	20000208 	.word	0x20000208

080014f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80014f6:	f001 fc88 	bl	8002e0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000355c 	.word	0x2000355c

08001504 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM4_IRQHandler+0x10>)
 800150a:	f003 ff73 	bl	80053f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000280 	.word	0x20000280

08001518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <usrtick_init>:
static inline uint32_t _usrtick_get_us();
static inline uint32_t _usrtick_get_us_since(uint32_t since);


/* Inicializa temporizadores */
void usrtick_init(_usrtick *utk, uint32_t p){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	utk->ltime = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	utk->ctime = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
	utk->ptime = p;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	609a      	str	r2, [r3, #8]
#ifdef _UTIL_USE_USRTICK_STATISTICS
	utk->stime = 0;
	utk->uptime = 0;
#endif
	utk->cbcnt = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	731a      	strb	r2, [r3, #12]
	utk->cbpcs = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	735a      	strb	r2, [r3, #13]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <usrtick_attach>:


void usrtick_attach(_usrtick *utk, usrtick_attach_def f, uint32_t p){
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
	if(utk->cbcnt < _UTIL_USRTICK_CALLBACK_NUM){
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	7b1b      	ldrb	r3, [r3, #12]
 8001566:	2b04      	cmp	r3, #4
 8001568:	d827      	bhi.n	80015ba <usrtick_attach+0x64>
		utk->proc[utk->cbcnt].period = p;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	7b1b      	ldrb	r3, [r3, #12]
 800156e:	4619      	mov	r1, r3
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	460b      	mov	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	440b      	add	r3, r1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3314      	adds	r3, #20
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
		utk->proc[utk->cbcnt].curr = 0;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	7b1b      	ldrb	r3, [r3, #12]
 8001586:	4619      	mov	r1, r3
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	460b      	mov	r3, r1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	440b      	add	r3, r1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3318      	adds	r3, #24
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
		utk->proc[utk->cbcnt++].usrtick_callback = f;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	7b1b      	ldrb	r3, [r3, #12]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	b2d1      	uxtb	r1, r2
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	7311      	strb	r1, [r2, #12]
 80015a6:	4619      	mov	r1, r3
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	460b      	mov	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	440b      	add	r3, r1
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	3310      	adds	r3, #16
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	601a      	str	r2, [r3, #0]
	}
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <usrtick_work>:


void usrtick_work(_usrtick *utk){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	if(utk->cbpcs != 0 || _usrtick_get_us_since(utk->ltime) >= utk->ptime){
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7b5b      	ldrb	r3, [r3, #13]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d109      	bne.n	80015e8 <usrtick_work+0x24>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f889 	bl	80016f0 <_usrtick_get_us_since>
 80015de:	4602      	mov	r2, r0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d363      	bcc.n	80016b0 <usrtick_work+0xec>

		if(utk->cbpcs == 0){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7b5b      	ldrb	r3, [r3, #13]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d156      	bne.n	800169e <usrtick_work+0xda>
#ifdef _UTIL_USE_USRTICK_STATISTICS
			utk->stime += _usrtick_get_us_since(utk->ltime);
#endif
			utk->ltime = _usrtick_get_us();
 80015f0:	f000 f862 	bl	80016b8 <_usrtick_get_us>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
		}

		while(utk->cbpcs < utk->cbcnt){
 80015fa:	e050      	b.n	800169e <usrtick_work+0xda>
			utk->proc[utk->cbpcs].curr++;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7b5b      	ldrb	r3, [r3, #13]
 8001600:	461a      	mov	r2, r3
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3318      	adds	r3, #24
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4403      	add	r3, r0
 8001620:	3318      	adds	r3, #24
 8001622:	6019      	str	r1, [r3, #0]
			if(utk->proc[utk->cbpcs].curr >= utk->proc[utk->cbpcs].period){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7b5b      	ldrb	r3, [r3, #13]
 8001628:	4619      	mov	r1, r3
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	440b      	add	r3, r1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	3318      	adds	r3, #24
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7b5b      	ldrb	r3, [r3, #13]
 800163e:	4618      	mov	r0, r3
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4603      	mov	r3, r0
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4403      	add	r3, r0
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	3314      	adds	r3, #20
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d31e      	bcc.n	8001692 <usrtick_work+0xce>
				utk->proc[utk->cbpcs].curr = 0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7b5b      	ldrb	r3, [r3, #13]
 8001658:	4619      	mov	r1, r3
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	440b      	add	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	3318      	adds	r3, #24
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
				tmptime = _usrtick_get_us_since(tmptime);
				utk->proc[utk->cbpcs].utimectr += tmptime;
				if(tmptime >= utk->proc[utk->cbpcs].mtime)
					utk->proc[utk->cbpcs].mtimectr = tmptime;
#else
				utk->proc[utk->cbpcs].usrtick_callback();
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7b5b      	ldrb	r3, [r3, #13]
 8001670:	4619      	mov	r1, r3
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	440b      	add	r3, r1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3310      	adds	r3, #16
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4798      	blx	r3
#endif

				utk->cbpcs++;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7b5b      	ldrb	r3, [r3, #13]
 8001688:	3301      	adds	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	735a      	strb	r2, [r3, #13]
				return;
 8001690:	e00e      	b.n	80016b0 <usrtick_work+0xec>
			}
			utk->cbpcs++;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7b5b      	ldrb	r3, [r3, #13]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	735a      	strb	r2, [r3, #13]
		while(utk->cbpcs < utk->cbcnt){
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7b5a      	ldrb	r2, [r3, #13]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7b1b      	ldrb	r3, [r3, #12]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3a8      	bcc.n	80015fc <usrtick_work+0x38>
		}
		utk->cbpcs = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	735a      	strb	r2, [r3, #13]
			utk->uptime++;
			utk->stime -= 1000000;
		}
#endif
	}
}
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <_usrtick_get_us>:
//	PRIVADO

/*
 * Retorna la cantidad de us actual
 */
static inline uint32_t _usrtick_get_us(){
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	return (uwTick*1000)+((SysTick->LOAD - SysTick->VAL)/_UTIL_USRTICK_TICKS_ON_US);
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <_usrtick_get_us+0x2c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c4:	fb03 f202 	mul.w	r2, r3, r2
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_usrtick_get_us+0x30>)
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <_usrtick_get_us+0x30>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	1acb      	subs	r3, r1, r3
 80016d2:	4906      	ldr	r1, [pc, #24]	; (80016ec <_usrtick_get_us+0x34>)
 80016d4:	fba1 1303 	umull	r1, r3, r1, r3
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	4413      	add	r3, r2
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	2000288c 	.word	0x2000288c
 80016e8:	e000e010 	.word	0xe000e010
 80016ec:	38e38e39 	.word	0x38e38e39

080016f0 <_usrtick_get_us_since>:

/*
 * Retorna la cantidad de us desde since
 */
static inline uint32_t _usrtick_get_us_since(uint32_t since){
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	uint32_t curr = (uwTick*1000)+((SysTick->LOAD - SysTick->VAL)/_UTIL_USRTICK_TICKS_ON_US);
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <_usrtick_get_us_since+0x4c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001700:	fb03 f202 	mul.w	r2, r3, r2
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <_usrtick_get_us_since+0x50>)
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <_usrtick_get_us_since+0x50>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	1acb      	subs	r3, r1, r3
 800170e:	490d      	ldr	r1, [pc, #52]	; (8001744 <_usrtick_get_us_since+0x54>)
 8001710:	fba1 1303 	umull	r1, r3, r1, r3
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
	if(since > curr)
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	429a      	cmp	r2, r3
 8001720:	d904      	bls.n	800172c <_usrtick_get_us_since+0x3c>
		return 0xFFFFFFFF - since + curr;
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	3b01      	subs	r3, #1
 800172a:	e002      	b.n	8001732 <_usrtick_get_us_since+0x42>
	return curr - since;
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	1ad3      	subs	r3, r2, r3
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	2000288c 	.word	0x2000288c
 8001740:	e000e010 	.word	0xe000e010
 8001744:	38e38e39 	.word	0x38e38e39

08001748 <heartbeat_init>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _UTIL_USE_HEARTBEAT_UTILITIES
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* Inicializa hearbeat */
void heartbeat_init(_hb *hb){
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	hb->state = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	801a      	strh	r2, [r3, #0]
	hb->dfmsk = 0b1010000000000000;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800175c:	809a      	strh	r2, [r3, #4]
	hb->stmsk = 0b1010000000000000;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001764:	805a      	strh	r2, [r3, #2]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <heartbeat>:

void heartbeat(_hb *hb){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	hb->gpio_callback((hb->stmsk & (1 << hb->state)) == 0);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	8852      	ldrh	r2, [r2, #2]
 8001780:	4611      	mov	r1, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	fa41 f202 	asr.w	r2, r1, r2
 800178a:	f002 0201 	and.w	r2, r2, #1
 800178e:	2a00      	cmp	r2, #0
 8001790:	bf0c      	ite	eq
 8001792:	2201      	moveq	r2, #1
 8001794:	2200      	movne	r2, #0
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	4610      	mov	r0, r2
 800179a:	4798      	blx	r3
	hb->state = (hb->state+1) & 15;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	801a      	strh	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <heartbeat_attach>:

void heartbeat_attach(_hb *hb, heartbeat_gpio_def f){
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	hb->gpio_callback = f;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	609a      	str	r2, [r3, #8]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <get_firmware_version>:

/*
 * time and date adds 19 chars, plus prefix, suffix and the trailing \0
 * @retval total string length
 */
uint8_t get_firmware_version(const char *prefix, const char *suffix, char *str){
 80017d0:	b480      	push	{r7}
 80017d2:	b08b      	sub	sp, #44	; 0x2c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	uint8_t i = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char curtime[] = __TIME__;
 80017e2:	4ab7      	ldr	r2, [pc, #732]	; (8001ac0 <get_firmware_version+0x2f0>)
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ea:	c303      	stmia	r3!, {r0, r1}
 80017ec:	701a      	strb	r2, [r3, #0]
	char curdate[] = __DATE__;
 80017ee:	4ab5      	ldr	r2, [pc, #724]	; (8001ac4 <get_firmware_version+0x2f4>)
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	while(*prefix)
 80017fa:	e00c      	b.n	8001816 <get_firmware_version+0x46>
		str[i++] = *(prefix++);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60fa      	str	r2, [r7, #12]
 8001802:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001806:	1c51      	adds	r1, r2, #1
 8001808:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 800180c:	4611      	mov	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	440a      	add	r2, r1
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	7013      	strb	r3, [r2, #0]
	while(*prefix)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ee      	bne.n	80017fc <get_firmware_version+0x2c>
	str[i++] = curdate[ 7];
 800181e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	7dfa      	ldrb	r2, [r7, #23]
 8001830:	701a      	strb	r2, [r3, #0]
	str[i++] = curdate[ 8];
 8001832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	7e3a      	ldrb	r2, [r7, #24]
 8001844:	701a      	strb	r2, [r3, #0]
	str[i++] = curdate[ 9];
 8001846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	7e7a      	ldrb	r2, [r7, #25]
 8001858:	701a      	strb	r2, [r3, #0]
	str[i++] = curdate[10];
 800185a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001864:	461a      	mov	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	7eba      	ldrb	r2, [r7, #26]
 800186c:	701a      	strb	r2, [r3, #0]
	str[i++] = '.';
 800186e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	222e      	movs	r2, #46	; 0x2e
 8001880:	701a      	strb	r2, [r3, #0]
	str[i++] = '0';
 8001882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2230      	movs	r2, #48	; 0x30
 8001894:	701a      	strb	r2, [r3, #0]
	if(curdate[0] == 'J' && curdate[1] == 'a' && curdate[2] == 'n')
 8001896:	7c3b      	ldrb	r3, [r7, #16]
 8001898:	2b4a      	cmp	r3, #74	; 0x4a
 800189a:	d110      	bne.n	80018be <get_firmware_version+0xee>
 800189c:	7c7b      	ldrb	r3, [r7, #17]
 800189e:	2b61      	cmp	r3, #97	; 0x61
 80018a0:	d10d      	bne.n	80018be <get_firmware_version+0xee>
 80018a2:	7cbb      	ldrb	r3, [r7, #18]
 80018a4:	2b6e      	cmp	r3, #110	; 0x6e
 80018a6:	d10a      	bne.n	80018be <get_firmware_version+0xee>
		str[i++] = '1';
 80018a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80018b2:	461a      	mov	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	2231      	movs	r2, #49	; 0x31
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	e0c5      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'F')
 80018be:	7c3b      	ldrb	r3, [r7, #16]
 80018c0:	2b46      	cmp	r3, #70	; 0x46
 80018c2:	d10a      	bne.n	80018da <get_firmware_version+0x10a>
		str[i++] = '2';
 80018c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	2232      	movs	r2, #50	; 0x32
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e0b7      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'M' && curdate[1] == 'a' && curdate[2] == 'r')
 80018da:	7c3b      	ldrb	r3, [r7, #16]
 80018dc:	2b4d      	cmp	r3, #77	; 0x4d
 80018de:	d110      	bne.n	8001902 <get_firmware_version+0x132>
 80018e0:	7c7b      	ldrb	r3, [r7, #17]
 80018e2:	2b61      	cmp	r3, #97	; 0x61
 80018e4:	d10d      	bne.n	8001902 <get_firmware_version+0x132>
 80018e6:	7cbb      	ldrb	r3, [r7, #18]
 80018e8:	2b72      	cmp	r3, #114	; 0x72
 80018ea:	d10a      	bne.n	8001902 <get_firmware_version+0x132>
		str[i++] = '3';
 80018ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	2233      	movs	r2, #51	; 0x33
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e0a3      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'A' && curdate[1] == 'p')
 8001902:	7c3b      	ldrb	r3, [r7, #16]
 8001904:	2b41      	cmp	r3, #65	; 0x41
 8001906:	d10d      	bne.n	8001924 <get_firmware_version+0x154>
 8001908:	7c7b      	ldrb	r3, [r7, #17]
 800190a:	2b70      	cmp	r3, #112	; 0x70
 800190c:	d10a      	bne.n	8001924 <get_firmware_version+0x154>
		str[i++] = '4';
 800190e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	2234      	movs	r2, #52	; 0x34
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e092      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'M' && curdate[1] == 'a' && curdate[2] == 'y')
 8001924:	7c3b      	ldrb	r3, [r7, #16]
 8001926:	2b4d      	cmp	r3, #77	; 0x4d
 8001928:	d110      	bne.n	800194c <get_firmware_version+0x17c>
 800192a:	7c7b      	ldrb	r3, [r7, #17]
 800192c:	2b61      	cmp	r3, #97	; 0x61
 800192e:	d10d      	bne.n	800194c <get_firmware_version+0x17c>
 8001930:	7cbb      	ldrb	r3, [r7, #18]
 8001932:	2b79      	cmp	r3, #121	; 0x79
 8001934:	d10a      	bne.n	800194c <get_firmware_version+0x17c>
		str[i++] = '5';
 8001936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	2235      	movs	r2, #53	; 0x35
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e07e      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'J' && curdate[1] == 'u' && curdate[2] == 'n')
 800194c:	7c3b      	ldrb	r3, [r7, #16]
 800194e:	2b4a      	cmp	r3, #74	; 0x4a
 8001950:	d110      	bne.n	8001974 <get_firmware_version+0x1a4>
 8001952:	7c7b      	ldrb	r3, [r7, #17]
 8001954:	2b75      	cmp	r3, #117	; 0x75
 8001956:	d10d      	bne.n	8001974 <get_firmware_version+0x1a4>
 8001958:	7cbb      	ldrb	r3, [r7, #18]
 800195a:	2b6e      	cmp	r3, #110	; 0x6e
 800195c:	d10a      	bne.n	8001974 <get_firmware_version+0x1a4>
		str[i++] = '6';
 800195e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	2236      	movs	r2, #54	; 0x36
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e06a      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'J' && curdate[1] == 'u' && curdate[2] == 'l')
 8001974:	7c3b      	ldrb	r3, [r7, #16]
 8001976:	2b4a      	cmp	r3, #74	; 0x4a
 8001978:	d110      	bne.n	800199c <get_firmware_version+0x1cc>
 800197a:	7c7b      	ldrb	r3, [r7, #17]
 800197c:	2b75      	cmp	r3, #117	; 0x75
 800197e:	d10d      	bne.n	800199c <get_firmware_version+0x1cc>
 8001980:	7cbb      	ldrb	r3, [r7, #18]
 8001982:	2b6c      	cmp	r3, #108	; 0x6c
 8001984:	d10a      	bne.n	800199c <get_firmware_version+0x1cc>
		str[i++] = '7';
 8001986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	2237      	movs	r2, #55	; 0x37
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e056      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'A' && curdate[1] == 'u')
 800199c:	7c3b      	ldrb	r3, [r7, #16]
 800199e:	2b41      	cmp	r3, #65	; 0x41
 80019a0:	d10d      	bne.n	80019be <get_firmware_version+0x1ee>
 80019a2:	7c7b      	ldrb	r3, [r7, #17]
 80019a4:	2b75      	cmp	r3, #117	; 0x75
 80019a6:	d10a      	bne.n	80019be <get_firmware_version+0x1ee>
		str[i++] = '8';
 80019a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	2238      	movs	r2, #56	; 0x38
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e045      	b.n	8001a4a <get_firmware_version+0x27a>
	else if(curdate[0] == 'S')
 80019be:	7c3b      	ldrb	r3, [r7, #16]
 80019c0:	2b53      	cmp	r3, #83	; 0x53
 80019c2:	d10a      	bne.n	80019da <get_firmware_version+0x20a>
		str[i++] = '9';
 80019c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	2239      	movs	r2, #57	; 0x39
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e037      	b.n	8001a4a <get_firmware_version+0x27a>
	else{
		i--;
 80019da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019de:	3b01      	subs	r3, #1
 80019e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		str[i++] = '1';
 80019e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	2231      	movs	r2, #49	; 0x31
 80019f6:	701a      	strb	r2, [r3, #0]
		if(curdate[0] == 'O')
 80019f8:	7c3b      	ldrb	r3, [r7, #16]
 80019fa:	2b4f      	cmp	r3, #79	; 0x4f
 80019fc:	d10a      	bne.n	8001a14 <get_firmware_version+0x244>
			str[i++] = '0';
 80019fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a08:	461a      	mov	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2230      	movs	r2, #48	; 0x30
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e01a      	b.n	8001a4a <get_firmware_version+0x27a>
		else if(curdate[0] == 'N')
 8001a14:	7c3b      	ldrb	r3, [r7, #16]
 8001a16:	2b4e      	cmp	r3, #78	; 0x4e
 8001a18:	d10a      	bne.n	8001a30 <get_firmware_version+0x260>
			str[i++] = '1';
 8001a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	2231      	movs	r2, #49	; 0x31
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e00c      	b.n	8001a4a <get_firmware_version+0x27a>
		else if(curdate[0] == 'D')
 8001a30:	7c3b      	ldrb	r3, [r7, #16]
 8001a32:	2b44      	cmp	r3, #68	; 0x44
 8001a34:	d109      	bne.n	8001a4a <get_firmware_version+0x27a>
			str[i++] = '2';
 8001a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	2232      	movs	r2, #50	; 0x32
 8001a48:	701a      	strb	r2, [r3, #0]
	}
	str[i++] = '.';
 8001a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	222e      	movs	r2, #46	; 0x2e
 8001a5c:	701a      	strb	r2, [r3, #0]
	if(curdate[4] != ' ')
 8001a5e:	7d3b      	ldrb	r3, [r7, #20]
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d00a      	beq.n	8001a7a <get_firmware_version+0x2aa>
		str[i++] = curdate[4];
 8001a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	7d3a      	ldrb	r2, [r7, #20]
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e009      	b.n	8001a8e <get_firmware_version+0x2be>
	else
		str[i++] = '0';
 8001a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	2230      	movs	r2, #48	; 0x30
 8001a8c:	701a      	strb	r2, [r3, #0]
	str[i++] = curdate[5];
 8001a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001a98:	461a      	mov	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	7d7a      	ldrb	r2, [r7, #21]
 8001aa0:	701a      	strb	r2, [r3, #0]
	str[i++] = '_';
 8001aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	225f      	movs	r2, #95	; 0x5f
 8001ab4:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < 8; j++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001abc:	e018      	b.n	8001af0 <get_firmware_version+0x320>
 8001abe:	bf00      	nop
 8001ac0:	0800ac14 	.word	0x0800ac14
 8001ac4:	0800ac20 	.word	0x0800ac20
		str[i++] = curtime[j];
 8001ac8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad0:	1c59      	adds	r1, r3, #1
 8001ad2:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	440b      	add	r3, r1
 8001adc:	3228      	adds	r2, #40	; 0x28
 8001ade:	443a      	add	r2, r7
 8001ae0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001ae4:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < 8; j++)
 8001ae6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aea:	3301      	adds	r3, #1
 8001aec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001af0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	d9e7      	bls.n	8001ac8 <get_firmware_version+0x2f8>

	while(*suffix)
 8001af8:	e00c      	b.n	8001b14 <get_firmware_version+0x344>
		str[i++] = *(suffix++);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	60ba      	str	r2, [r7, #8]
 8001b00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b04:	1c51      	adds	r1, r2, #1
 8001b06:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	440a      	add	r2, r1
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	7013      	strb	r3, [r2, #0]
	while(*suffix)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ee      	bne.n	8001afa <get_firmware_version+0x32a>


	str[i++] = 0;
 8001b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
	return i;
 8001b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	372c      	adds	r7, #44	; 0x2c
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop

08001b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b66:	f7ff fcd7 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f009 f80d 	bl	800ab88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6e:	f7fe fcf9 	bl	8000564 <main>
  bx lr
 8001b72:	4770      	bx	lr
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001b7c:	0800acbc 	.word	0x0800acbc
  ldr r2, =_sbss
 8001b80:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001b84:	20003a68 	.word	0x20003a68

08001b88 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <CAN1_RX1_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x28>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x28>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 fe25 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	200f      	movs	r0, #15
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff fb56 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fe3d 	bl	8002856 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf4:	f000 fe05 	bl	8002802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000004 	.word	0x20000004
 8001c10:	2000000c 	.word	0x2000000c
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_IncTick+0x1c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x20>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_IncTick+0x20>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	2000288c 	.word	0x2000288c

08001c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_GetTick+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	2000288c 	.word	0x2000288c

08001c50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0be      	b.n	8001df0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fb14 	bl	80012bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb93 	bl	80023c0 <ADC_ConversionStop_Disable>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 8099 	bne.w	8001dde <HAL_ADC_Init+0x18e>
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 8095 	bne.w	8001dde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cbc:	f023 0302 	bic.w	r3, r3, #2
 8001cc0:	f043 0202 	orr.w	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cd0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7b1b      	ldrb	r3, [r3, #12]
 8001cd6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cd8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_Init+0xa2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_ADC_Init+0xa8>
 8001cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf6:	e000      	b.n	8001cfa <HAL_ADC_Init+0xaa>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7d1b      	ldrb	r3, [r3, #20]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d119      	bne.n	8001d3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7b1b      	ldrb	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	035a      	lsls	r2, r3, #13
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e00b      	b.n	8001d3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_ADC_Init+0x1a8>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	d003      	beq.n	8001d76 <HAL_ADC_Init+0x126>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d104      	bne.n	8001d80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	051b      	lsls	r3, r3, #20
 8001d7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_ADC_Init+0x1ac>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10b      	bne.n	8001dbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dba:	e018      	b.n	8001dee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f023 0312 	bic.w	r3, r3, #18
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ddc:	e007      	b.n	8001dee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	ffe1f7fd 	.word	0xffe1f7fd
 8001dfc:	ff1f0efe 	.word	0xff1f0efe

08001e00 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Start_IT+0x1a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0a0      	b.n	8001f5c <HAL_ADC_Start_IT+0x15c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fa72 	bl	800230c <ADC_Enable>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 808f 	bne.w	8001f52 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a45      	ldr	r2, [pc, #276]	; (8001f64 <HAL_ADC_Start_IT+0x164>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d105      	bne.n	8001e5e <HAL_ADC_Start_IT+0x5e>
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <HAL_ADC_Start_IT+0x168>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d115      	bne.n	8001e8a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d026      	beq.n	8001ec6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e88:	e01d      	b.n	8001ec6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a33      	ldr	r2, [pc, #204]	; (8001f68 <HAL_ADC_Start_IT+0x168>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d004      	beq.n	8001eaa <HAL_ADC_Start_IT+0xaa>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2f      	ldr	r2, [pc, #188]	; (8001f64 <HAL_ADC_Start_IT+0x164>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_ADC_Start_IT+0xc6>
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_ADC_Start_IT+0x168>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ebe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	f023 0206 	bic.w	r2, r3, #6
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ede:	e002      	b.n	8001ee6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0202 	mvn.w	r2, #2
 8001ef6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f12:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f16:	d113      	bne.n	8001f40 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_ADC_Start_IT+0x164>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d105      	bne.n	8001f2e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_ADC_Start_IT+0x168>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	e00c      	b.n	8001f5a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	e003      	b.n	8001f5a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40012800 	.word	0x40012800
 8001f68:	40012400 	.word	0x40012400

08001f6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d140      	bne.n	800201c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d139      	bne.n	800201c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fce:	d11d      	bne.n	800200c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d119      	bne.n	800200c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0220 	bic.w	r2, r2, #32
 8001fe6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe fa0b 	bl	8000428 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f06f 0212 	mvn.w	r2, #18
 800201a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	2b80      	cmp	r3, #128	; 0x80
 8002028:	d14f      	bne.n	80020ca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b04      	cmp	r3, #4
 8002036:	d148      	bne.n	80020ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800205a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800205e:	d012      	beq.n	8002086 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800206a:	2b00      	cmp	r3, #0
 800206c:	d125      	bne.n	80020ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002078:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800207c:	d11d      	bne.n	80020ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002094:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fa6e 	bl	800259c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 020c 	mvn.w	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d114      	bne.n	8002102 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10d      	bne.n	8002102 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f809 	bl	800210a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0201 	mvn.w	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x20>
 8002138:	2302      	movs	r3, #2
 800213a:	e0dc      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1da>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d81c      	bhi.n	8002186 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b05      	subs	r3, #5
 800215e:	221f      	movs	r2, #31
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	4019      	ands	r1, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b05      	subs	r3, #5
 8002178:	fa00 f203 	lsl.w	r2, r0, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	635a      	str	r2, [r3, #52]	; 0x34
 8002184:	e03c      	b.n	8002200 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d81c      	bhi.n	80021c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	3b23      	subs	r3, #35	; 0x23
 80021a0:	221f      	movs	r2, #31
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4019      	ands	r1, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3b23      	subs	r3, #35	; 0x23
 80021ba:	fa00 f203 	lsl.w	r2, r0, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
 80021c6:	e01b      	b.n	8002200 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b41      	subs	r3, #65	; 0x41
 80021da:	221f      	movs	r2, #31
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	4019      	ands	r1, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b41      	subs	r3, #65	; 0x41
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b09      	cmp	r3, #9
 8002206:	d91c      	bls.n	8002242 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68d9      	ldr	r1, [r3, #12]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b1e      	subs	r3, #30
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	4019      	ands	r1, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6898      	ldr	r0, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	3b1e      	subs	r3, #30
 8002234:	fa00 f203 	lsl.w	r2, r0, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	e019      	b.n	8002276 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6919      	ldr	r1, [r3, #16]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	2207      	movs	r2, #7
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	4019      	ands	r1, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6898      	ldr	r0, [r3, #8]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	fa00 f203 	lsl.w	r2, r0, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d003      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002282:	2b11      	cmp	r3, #17
 8002284:	d132      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <HAL_ADC_ConfigChannel+0x1e4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d125      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d126      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d11a      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_ADC_ConfigChannel+0x1e8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <HAL_ADC_ConfigChannel+0x1ec>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9a      	lsrs	r2, r3, #18
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f9      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x1b2>
 80022da:	e007      	b.n	80022ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	40012400 	.word	0x40012400
 8002304:	20000004 	.word	0x20000004
 8002308:	431bde83 	.word	0x431bde83

0800230c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d040      	beq.n	80023ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <ADC_Enable+0xac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <ADC_Enable+0xb0>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	0c9b      	lsrs	r3, r3, #18
 8002346:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002348:	e002      	b.n	8002350 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3b01      	subs	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f9      	bne.n	800234a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002356:	f7ff fc71 	bl	8001c3c <HAL_GetTick>
 800235a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800235c:	e01f      	b.n	800239e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800235e:	f7ff fc6d 	bl	8001c3c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d918      	bls.n	800239e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d011      	beq.n	800239e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	f043 0210 	orr.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e007      	b.n	80023ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d1d8      	bne.n	800235e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000004 	.word	0x20000004
 80023bc:	431bde83 	.word	0x431bde83

080023c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d12e      	bne.n	8002438 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ea:	f7ff fc27 	bl	8001c3c <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023f0:	e01b      	b.n	800242a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023f2:	f7ff fc23 	bl	8001c3c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d914      	bls.n	800242a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10d      	bne.n	800242a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f043 0210 	orr.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e007      	b.n	800243a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d0dc      	beq.n	80023f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_ADCEx_Calibration_Start+0x1e>
 800245e:	2302      	movs	r3, #2
 8002460:	e095      	b.n	800258e <HAL_ADCEx_Calibration_Start+0x14a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffa8 	bl	80023c0 <ADC_ConversionStop_Disable>
 8002470:	4603      	mov	r3, r0
 8002472:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 8084 	bne.w	8002584 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002484:	f023 0302 	bic.w	r3, r3, #2
 8002488:	f043 0202 	orr.w	r2, r3, #2
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002490:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_ADCEx_Calibration_Start+0x154>)
 8002492:	681c      	ldr	r4, [r3, #0]
 8002494:	2002      	movs	r0, #2
 8002496:	f002 fd07 	bl	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 800249a:	4603      	mov	r3, r0
 800249c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80024a0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80024a2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80024a4:	e002      	b.n	80024ac <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f9      	bne.n	80024a6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff2a 	bl	800230c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0208 	orr.w	r2, r2, #8
 80024c6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80024c8:	f7ff fbb8 	bl	8001c3c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80024ce:	e01b      	b.n	8002508 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024d0:	f7ff fbb4 	bl	8001c3c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b0a      	cmp	r3, #10
 80024dc:	d914      	bls.n	8002508 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f023 0312 	bic.w	r3, r3, #18
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e042      	b.n	800258e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1dc      	bne.n	80024d0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0204 	orr.w	r2, r2, #4
 8002524:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002526:	f7ff fb89 	bl	8001c3c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800252c:	e01b      	b.n	8002566 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800252e:	f7ff fb85 	bl	8001c3c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b0a      	cmp	r3, #10
 800253a:	d914      	bls.n	8002566 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00d      	beq.n	8002566 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f023 0312 	bic.w	r3, r3, #18
 8002552:	f043 0210 	orr.w	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e013      	b.n	800258e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1dc      	bne.n	800252e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f023 0303 	bic.w	r3, r3, #3
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800258c:	7dfb      	ldrb	r3, [r7, #23]
}
 800258e:	4618      	mov	r0, r3
 8002590:	371c      	adds	r7, #28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}
 8002596:	bf00      	nop
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b090      	sub	sp, #64	; 0x40
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	2230      	movs	r2, #48	; 0x30
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f008 fb01 	bl	800abd0 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80025d8:	2302      	movs	r3, #2
 80025da:	e032      	b.n	8002642 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 80025e6:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d016      	beq.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d010      	beq.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d10b      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	e008      	b.n	8002636 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800263e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8002642:	4618      	mov	r0, r3
 8002644:	3740      	adds	r7, #64	; 0x40
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40012800 	.word	0x40012800
 8002650:	40012400 	.word	0x40012400

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4906      	ldr	r1, [pc, #24]	; (80026ec <__NVIC_EnableIRQ+0x34>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b8:	d301      	bcc.n	80027be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00f      	b.n	80027de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <SysTick_Config+0x40>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c6:	210f      	movs	r1, #15
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027cc:	f7ff ff90 	bl	80026f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <SysTick_Config+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <SysTick_Config+0x40>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000e010 	.word	0xe000e010

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff2d 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002814:	f7ff ff42 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff90 	bl	8002744 <NVIC_EncodePriority>
 8002824:	4602      	mov	r2, r0
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff5f 	bl	80026f0 <__NVIC_SetPriority>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff35 	bl	80026b8 <__NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffa2 	bl	80027a8 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b08b      	sub	sp, #44	; 0x2c
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002882:	e169      	b.n	8002b58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002884:	2201      	movs	r2, #1
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 8158 	bne.w	8002b52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a9a      	ldr	r2, [pc, #616]	; (8002b10 <HAL_GPIO_Init+0x2a0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d05e      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028ac:	4a98      	ldr	r2, [pc, #608]	; (8002b10 <HAL_GPIO_Init+0x2a0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d875      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028b2:	4a98      	ldr	r2, [pc, #608]	; (8002b14 <HAL_GPIO_Init+0x2a4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d058      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028b8:	4a96      	ldr	r2, [pc, #600]	; (8002b14 <HAL_GPIO_Init+0x2a4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d86f      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028be:	4a96      	ldr	r2, [pc, #600]	; (8002b18 <HAL_GPIO_Init+0x2a8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d052      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028c4:	4a94      	ldr	r2, [pc, #592]	; (8002b18 <HAL_GPIO_Init+0x2a8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d869      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028ca:	4a94      	ldr	r2, [pc, #592]	; (8002b1c <HAL_GPIO_Init+0x2ac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d04c      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028d0:	4a92      	ldr	r2, [pc, #584]	; (8002b1c <HAL_GPIO_Init+0x2ac>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d863      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028d6:	4a92      	ldr	r2, [pc, #584]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d046      	beq.n	800296a <HAL_GPIO_Init+0xfa>
 80028dc:	4a90      	ldr	r2, [pc, #576]	; (8002b20 <HAL_GPIO_Init+0x2b0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d85d      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028e2:	2b12      	cmp	r3, #18
 80028e4:	d82a      	bhi.n	800293c <HAL_GPIO_Init+0xcc>
 80028e6:	2b12      	cmp	r3, #18
 80028e8:	d859      	bhi.n	800299e <HAL_GPIO_Init+0x12e>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_GPIO_Init+0x80>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	0800296b 	.word	0x0800296b
 80028f4:	08002945 	.word	0x08002945
 80028f8:	08002957 	.word	0x08002957
 80028fc:	08002999 	.word	0x08002999
 8002900:	0800299f 	.word	0x0800299f
 8002904:	0800299f 	.word	0x0800299f
 8002908:	0800299f 	.word	0x0800299f
 800290c:	0800299f 	.word	0x0800299f
 8002910:	0800299f 	.word	0x0800299f
 8002914:	0800299f 	.word	0x0800299f
 8002918:	0800299f 	.word	0x0800299f
 800291c:	0800299f 	.word	0x0800299f
 8002920:	0800299f 	.word	0x0800299f
 8002924:	0800299f 	.word	0x0800299f
 8002928:	0800299f 	.word	0x0800299f
 800292c:	0800299f 	.word	0x0800299f
 8002930:	0800299f 	.word	0x0800299f
 8002934:	0800294d 	.word	0x0800294d
 8002938:	08002961 	.word	0x08002961
 800293c:	4a79      	ldr	r2, [pc, #484]	; (8002b24 <HAL_GPIO_Init+0x2b4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002942:	e02c      	b.n	800299e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	623b      	str	r3, [r7, #32]
          break;
 800294a:	e029      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	3304      	adds	r3, #4
 8002952:	623b      	str	r3, [r7, #32]
          break;
 8002954:	e024      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	3308      	adds	r3, #8
 800295c:	623b      	str	r3, [r7, #32]
          break;
 800295e:	e01f      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	330c      	adds	r3, #12
 8002966:	623b      	str	r3, [r7, #32]
          break;
 8002968:	e01a      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002972:	2304      	movs	r3, #4
 8002974:	623b      	str	r3, [r7, #32]
          break;
 8002976:	e013      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002980:	2308      	movs	r3, #8
 8002982:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	611a      	str	r2, [r3, #16]
          break;
 800298a:	e009      	b.n	80029a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800298c:	2308      	movs	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	615a      	str	r2, [r3, #20]
          break;
 8002996:	e003      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
          break;
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x130>
          break;
 800299e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2bff      	cmp	r3, #255	; 0xff
 80029a4:	d801      	bhi.n	80029aa <HAL_GPIO_Init+0x13a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	e001      	b.n	80029ae <HAL_GPIO_Init+0x13e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2bff      	cmp	r3, #255	; 0xff
 80029b4:	d802      	bhi.n	80029bc <HAL_GPIO_Init+0x14c>
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	e002      	b.n	80029c2 <HAL_GPIO_Init+0x152>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3b08      	subs	r3, #8
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	210f      	movs	r1, #15
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	6a39      	ldr	r1, [r7, #32]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	431a      	orrs	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80b1 	beq.w	8002b52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029f0:	4b4d      	ldr	r3, [pc, #308]	; (8002b28 <HAL_GPIO_Init+0x2b8>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	; (8002b28 <HAL_GPIO_Init+0x2b8>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <HAL_GPIO_Init+0x2b8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_GPIO_Init+0x2bc>)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_GPIO_Init+0x1ec>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3f      	ldr	r2, [pc, #252]	; (8002b34 <HAL_GPIO_Init+0x2c4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00d      	beq.n	8002a58 <HAL_GPIO_Init+0x1e8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3e      	ldr	r2, [pc, #248]	; (8002b38 <HAL_GPIO_Init+0x2c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d007      	beq.n	8002a54 <HAL_GPIO_Init+0x1e4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a3d      	ldr	r2, [pc, #244]	; (8002b3c <HAL_GPIO_Init+0x2cc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_GPIO_Init+0x1e0>
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e006      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a50:	2304      	movs	r3, #4
 8002a52:	e004      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_GPIO_Init+0x1ee>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a6e:	492f      	ldr	r1, [pc, #188]	; (8002b2c <HAL_GPIO_Init+0x2bc>)
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	492c      	ldr	r1, [pc, #176]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4928      	ldr	r1, [pc, #160]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4922      	ldr	r1, [pc, #136]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	491e      	ldr	r1, [pc, #120]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d006      	beq.n	8002ae6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4918      	ldr	r1, [pc, #96]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	4914      	ldr	r1, [pc, #80]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d021      	beq.n	8002b44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_GPIO_Init+0x2d0>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60cb      	str	r3, [r1, #12]
 8002b0c:	e021      	b.n	8002b52 <HAL_GPIO_Init+0x2e2>
 8002b0e:	bf00      	nop
 8002b10:	10320000 	.word	0x10320000
 8002b14:	10310000 	.word	0x10310000
 8002b18:	10220000 	.word	0x10220000
 8002b1c:	10210000 	.word	0x10210000
 8002b20:	10120000 	.word	0x10120000
 8002b24:	10110000 	.word	0x10110000
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40010800 	.word	0x40010800
 8002b34:	40010c00 	.word	0x40010c00
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4909      	ldr	r1, [pc, #36]	; (8002b74 <HAL_GPIO_Init+0x304>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f ae8e 	bne.w	8002884 <HAL_GPIO_Init+0x14>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	372c      	adds	r7, #44	; 0x2c
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40010400 	.word	0x40010400

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	611a      	str	r2, [r3, #16]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002baa:	b08b      	sub	sp, #44	; 0x2c
 8002bac:	af06      	add	r7, sp, #24
 8002bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0fd      	b.n	8002db6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f007 fd30 	bl	800a634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 f9f9 	bl	8005fd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	687e      	ldr	r6, [r7, #4]
 8002bee:	466d      	mov	r5, sp
 8002bf0:	f106 0410 	add.w	r4, r6, #16
 8002bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	602b      	str	r3, [r5, #0]
 8002bfc:	1d33      	adds	r3, r6, #4
 8002bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	f003 f9c3 	bl	8005f8c <USB_CoreInit>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0ce      	b.n	8002db6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 f9f4 	bl	800600c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e04c      	b.n	8002cc4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	b298      	uxth	r0, r3
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	3336      	adds	r3, #54	; 0x36
 8002c68:	4602      	mov	r2, r0
 8002c6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3303      	adds	r3, #3
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	3338      	adds	r3, #56	; 0x38
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333c      	adds	r3, #60	; 0x3c
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3340      	adds	r3, #64	; 0x40
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d3ad      	bcc.n	8002c2a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e044      	b.n	8002d5e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3b5      	bcc.n	8002cd4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	687e      	ldr	r6, [r7, #4]
 8002d70:	466d      	mov	r5, sp
 8002d72:	f106 0410 	add.w	r4, r6, #16
 8002d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	602b      	str	r3, [r5, #0]
 8002d7e:	1d33      	adds	r3, r6, #4
 8002d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	f003 f94e 	bl	8006024 <USB_DevInit>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e00d      	b.n	8002db6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f005 fe00 	bl	80089b4 <USB_DevDisconnect>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_PCD_Start+0x16>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e016      	b.n	8002e02 <HAL_PCD_Start+0x44>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 f8e3 	bl	8005fac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002de6:	2101      	movs	r1, #1
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f007 fe96 	bl	800ab1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f005 fdd4 	bl	80089a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b088      	sub	sp, #32
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 fdd6 	bl	80089c8 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e26:	d102      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fb5f 	bl	80034ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f005 fdc8 	bl	80089c8 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	d112      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e56:	b292      	uxth	r2, r2
 8002e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f007 fc64 	bl	800a72a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e62:	2100      	movs	r1, #0
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f923 	bl	80030b0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f005 fdaa 	bl	80089c8 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7e:	d10b      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e92:	b292      	uxth	r2, r2
 8002e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f005 fd93 	bl	80089c8 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d10b      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec0:	b292      	uxth	r2, r2
 8002ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f005 fd7c 	bl	80089c8 <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d126      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0204 	bic.w	r2, r2, #4
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0208 	bic.w	r2, r2, #8
 8002f06:	b292      	uxth	r2, r2
 8002f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f007 fc45 	bl	800a79c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f24:	b292      	uxth	r2, r2
 8002f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 fd4a 	bl	80089c8 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3e:	f040 8082 	bne.w	8003046 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e010      	b.n	8002f6a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	441a      	add	r2, r3
 8002f54:	7ffb      	ldrb	r3, [r7, #31]
 8002f56:	8812      	ldrh	r2, [r2, #0]
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	3320      	adds	r3, #32
 8002f5e:	443b      	add	r3, r7
 8002f60:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002f64:	7ffb      	ldrb	r3, [r7, #31]
 8002f66:	3301      	adds	r3, #1
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	d9eb      	bls.n	8002f48 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	b292      	uxth	r2, r2
 8002f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002fa0:	bf00      	nop
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f6      	beq.n	8002fa2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e00f      	b.n	8002ff2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	7ffa      	ldrb	r2, [r7, #31]
 8002fdc:	0092      	lsls	r2, r2, #2
 8002fde:	440a      	add	r2, r1
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	443b      	add	r3, r7
 8002fe6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002fea:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fec:	7ffb      	ldrb	r3, [r7, #31]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	2b07      	cmp	r3, #7
 8002ff6:	d9ec      	bls.n	8002fd2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0208 	orr.w	r2, r2, #8
 800300a:	b292      	uxth	r2, r2
 800300c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003022:	b292      	uxth	r2, r2
 8003024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0204 	orr.w	r2, r2, #4
 800303a:	b292      	uxth	r2, r2
 800303c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f007 fb91 	bl	800a768 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f005 fcbc 	bl	80089c8 <USB_ReadInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305a:	d10e      	bne.n	800307a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800306e:	b292      	uxth	r2, r2
 8003070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f007 fb4a 	bl	800a70e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f005 fca2 	bl	80089c8 <USB_ReadInterrupts>
 8003084:	4603      	mov	r3, r0
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308e:	d10b      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a2:	b292      	uxth	r2, r2
 80030a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80030a8:	bf00      	nop
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_PCD_SetAddress+0x1a>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e013      	b.n	80030f2 <HAL_PCD_SetAddress+0x42>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f005 fc49 	bl	800897a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	4608      	mov	r0, r1
 8003104:	4611      	mov	r1, r2
 8003106:	461a      	mov	r2, r3
 8003108:	4603      	mov	r3, r0
 800310a:	70fb      	strb	r3, [r7, #3]
 800310c:	460b      	mov	r3, r1
 800310e:	803b      	strh	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800311c:	2b00      	cmp	r3, #0
 800311e:	da0e      	bge.n	800313e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	705a      	strb	r2, [r3, #1]
 800313c:	e00e      	b.n	800315c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 0207 	and.w	r2, r3, #7
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	b2da      	uxtb	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003168:	883a      	ldrh	r2, [r7, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	78ba      	ldrb	r2, [r7, #2]
 8003172:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003186:	78bb      	ldrb	r3, [r7, #2]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d102      	bne.n	8003192 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_PCD_EP_Open+0xa6>
 800319c:	2302      	movs	r3, #2
 800319e:	e00e      	b.n	80031be <HAL_PCD_EP_Open+0xc4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 ff58 	bl	8006064 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	da0e      	bge.n	80031f8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	705a      	strb	r2, [r3, #1]
 80031f6:	e00e      	b.n	8003216 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 0207 	and.w	r2, r3, #7
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_PCD_EP_Close+0x6a>
 800322c:	2302      	movs	r3, #2
 800322e:	e00e      	b.n	800324e <HAL_PCD_EP_Close+0x88>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 fa7a 	bl	8006738 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	460b      	mov	r3, r1
 8003264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	f003 0207 	and.w	r2, r3, #7
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b2da      	uxtb	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 fc2c 	bl	8006b10 <USB_EPStartXfer>
 80032b8:	e005      	b.n	80032c6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fc25 	bl	8006b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	f003 0207 	and.w	r2, r3, #7
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	460b      	mov	r3, r1
 800330c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2201      	movs	r2, #1
 8003348:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	b2da      	uxtb	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003356:	7afb      	ldrb	r3, [r7, #11]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6979      	ldr	r1, [r7, #20]
 8003366:	4618      	mov	r0, r3
 8003368:	f003 fbd2 	bl	8006b10 <USB_EPStartXfer>
 800336c:	e005      	b.n	800337a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fbcb 	bl	8006b10 <USB_EPStartXfer>
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 0207 	and.w	r2, r3, #7
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d901      	bls.n	80033a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e04c      	b.n	800343c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da0e      	bge.n	80033c8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	705a      	strb	r2, [r3, #1]
 80033c6:	e00c      	b.n	80033e2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_PCD_EP_SetStall+0x7e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e01c      	b.n	800343c <HAL_PCD_EP_SetStall+0xb8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	4618      	mov	r0, r3
 8003412:	f005 f9b5 	bl	8008780 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	2b00      	cmp	r3, #0
 800341e:	d108      	bne.n	8003432 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f005 fada 	bl	80089e6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 020f 	and.w	r2, r3, #15
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	429a      	cmp	r2, r3
 800345c:	d901      	bls.n	8003462 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e040      	b.n	80034e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003466:	2b00      	cmp	r3, #0
 8003468:	da0e      	bge.n	8003488 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	705a      	strb	r2, [r3, #1]
 8003486:	e00e      	b.n	80034a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	f003 0207 	and.w	r2, r3, #7
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_PCD_EP_ClrStall+0x82>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e00e      	b.n	80034e4 <HAL_PCD_EP_ClrStall+0xa0>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f005 f9a3 	bl	8008820 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08e      	sub	sp, #56	; 0x38
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034f4:	e2ec      	b.n	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003500:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800350c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 8161 	bne.w	80037d8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003516:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d152      	bne.n	80035c6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800352c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003530:	81fb      	strh	r3, [r7, #14]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	89fb      	ldrh	r3, [r7, #14]
 8003538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003540:	b29b      	uxth	r3, r3
 8003542:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3328      	adds	r3, #40	; 0x28
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003552:	b29b      	uxth	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	3302      	adds	r3, #2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	441a      	add	r2, r3
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003584:	2100      	movs	r1, #0
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f007 f8a7 	bl	800a6da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 829b 	beq.w	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 8296 	bne.w	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b292      	uxth	r2, r2
 80035b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035c4:	e284      	b.n	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d034      	beq.n	800364a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	3306      	adds	r3, #6
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800361e:	b29b      	uxth	r3, r3
 8003620:	f005 fa31 	bl	8008a86 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29a      	uxth	r2, r3
 800362c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003630:	4013      	ands	r3, r2
 8003632:	823b      	strh	r3, [r7, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	8a3a      	ldrh	r2, [r7, #16]
 800363a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800363e:	b292      	uxth	r2, r2
 8003640:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f007 f81c 	bl	800a680 <HAL_PCD_SetupStageCallback>
 8003648:	e242      	b.n	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800364a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800364e:	2b00      	cmp	r3, #0
 8003650:	f280 823e 	bge.w	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29a      	uxth	r2, r3
 800365c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003660:	4013      	ands	r3, r2
 8003662:	83bb      	strh	r3, [r7, #28]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	8bba      	ldrh	r2, [r7, #28]
 800366a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800366e:	b292      	uxth	r2, r2
 8003670:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	3306      	adds	r3, #6
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d019      	beq.n	80036da <PCD_EP_ISR_Handler+0x1ee>
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d015      	beq.n	80036da <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	6959      	ldr	r1, [r3, #20]
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f005 f9e1 	bl	8008a86 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	441a      	add	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036d2:	2100      	movs	r1, #0
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f006 ffe5 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 81f2 	bne.w	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d112      	bne.n	800373a <PCD_EP_ISR_Handler+0x24e>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800371e:	b29a      	uxth	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	801a      	strh	r2, [r3, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800372e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003732:	b29a      	uxth	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	801a      	strh	r2, [r3, #0]
 8003738:	e02f      	b.n	800379a <PCD_EP_ISR_Handler+0x2ae>
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b3e      	cmp	r3, #62	; 0x3e
 8003740:	d813      	bhi.n	800376a <PCD_EP_ISR_Handler+0x27e>
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	633b      	str	r3, [r7, #48]	; 0x30
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <PCD_EP_ISR_Handler+0x270>
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	3301      	adds	r3, #1
 800375a:	633b      	str	r3, [r7, #48]	; 0x30
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	b29b      	uxth	r3, r3
 8003760:	029b      	lsls	r3, r3, #10
 8003762:	b29a      	uxth	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	e017      	b.n	800379a <PCD_EP_ISR_Handler+0x2ae>
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <PCD_EP_ISR_Handler+0x298>
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	3b01      	subs	r3, #1
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	b29b      	uxth	r3, r3
 8003788:	029b      	lsls	r3, r3, #10
 800378a:	b29b      	uxth	r3, r3
 800378c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003794:	b29a      	uxth	r2, r3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	827b      	strh	r3, [r7, #18]
 80037ac:	8a7b      	ldrh	r3, [r7, #18]
 80037ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80037b2:	827b      	strh	r3, [r7, #18]
 80037b4:	8a7b      	ldrh	r3, [r7, #18]
 80037b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037ba:	827b      	strh	r3, [r7, #18]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	8a7b      	ldrh	r3, [r7, #18]
 80037c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	8013      	strh	r3, [r2, #0]
 80037d6:	e17b      	b.n	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f280 80ea 	bge.w	80039c8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29a      	uxth	r2, r3
 8003806:	f640 738f 	movw	r3, #3983	; 0xf8f
 800380a:	4013      	ands	r3, r2
 800380c:	853b      	strh	r3, [r7, #40]	; 0x28
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800381e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003822:	b292      	uxth	r2, r2
 8003824:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003826:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	7b1b      	ldrb	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d122      	bne.n	800388a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384c:	b29b      	uxth	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4413      	add	r3, r2
 8003858:	3306      	adds	r3, #6
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800386e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8087 	beq.w	8003984 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	6959      	ldr	r1, [r3, #20]
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	88da      	ldrh	r2, [r3, #6]
 8003882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003884:	f005 f8ff 	bl	8008a86 <USB_ReadPMA>
 8003888:	e07c      	b.n	8003984 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	78db      	ldrb	r3, [r3, #3]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d108      	bne.n	80038a4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003892:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003894:	461a      	mov	r2, r3
 8003896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f927 	bl	8003aec <HAL_PCD_EP_DB_Receive>
 800389e:	4603      	mov	r3, r0
 80038a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80038a2:	e06f      	b.n	8003984 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	847b      	strh	r3, [r7, #34]	; 0x22
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d021      	beq.n	8003942 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	3302      	adds	r3, #2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003926:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003928:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02a      	beq.n	8003984 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	6959      	ldr	r1, [r3, #20]
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	891a      	ldrh	r2, [r3, #8]
 800393a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800393c:	f005 f8a3 	bl	8008a86 <USB_ReadPMA>
 8003940:	e020      	b.n	8003984 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394a:	b29b      	uxth	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	3306      	adds	r3, #6
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800396a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800396c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	6959      	ldr	r1, [r3, #20]
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	895a      	ldrh	r2, [r3, #10]
 800397e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003980:	f005 f881 	bl	8008a86 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800398a:	441a      	add	r2, r3
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003996:	441a      	add	r2, r3
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <PCD_EP_ISR_Handler+0x4c2>
 80039a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d206      	bcs.n	80039bc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f006 fe75 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
 80039ba:	e005      	b.n	80039c8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 f8a4 	bl	8006b10 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d07e      	beq.n	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80039d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a00:	843b      	strh	r3, [r7, #32]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	441a      	add	r2, r3
 8003a10:	8c3b      	ldrh	r3, [r7, #32]
 8003a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	78db      	ldrb	r3, [r3, #3]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d00c      	beq.n	8003a40 <PCD_EP_ISR_Handler+0x554>
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d146      	bne.n	8003ac4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d141      	bne.n	8003ac4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	3302      	adds	r3, #2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a68:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	8bfb      	ldrh	r3, [r7, #30]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d906      	bls.n	8003a82 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	699a      	ldr	r2, [r3, #24]
 8003a78:	8bfb      	ldrh	r3, [r7, #30]
 8003a7a:	1ad2      	subs	r2, r2, r3
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	619a      	str	r2, [r3, #24]
 8003a80:	e002      	b.n	8003a88 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f006 fe1f 	bl	800a6da <HAL_PCD_DataInStageCallback>
 8003a9c:	e018      	b.n	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	8bfb      	ldrh	r3, [r7, #30]
 8003aa4:	441a      	add	r2, r3
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	8bfb      	ldrh	r3, [r7, #30]
 8003ab0:	441a      	add	r2, r3
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 f827 	bl	8006b10 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003ac2:	e005      	b.n	8003ad0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ac4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f91b 	bl	8003d06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	b21b      	sxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f6ff ad0a 	blt.w	80034f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3738      	adds	r7, #56	; 0x38
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d07e      	beq.n	8003c02 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	3302      	adds	r3, #2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d306      	bcc.n	8003b46 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	8b7b      	ldrh	r3, [r7, #26]
 8003b3e:	1ad2      	subs	r2, r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	619a      	str	r2, [r3, #24]
 8003b44:	e002      	b.n	8003b4c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d123      	bne.n	8003b9c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	833b      	strh	r3, [r7, #24]
 8003b70:	8b3b      	ldrh	r3, [r7, #24]
 8003b72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b76:	833b      	strh	r3, [r7, #24]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	8b3b      	ldrh	r3, [r7, #24]
 8003b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01f      	beq.n	8003be6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc0:	82fb      	strh	r3, [r7, #22]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	8afb      	ldrh	r3, [r7, #22]
 8003bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003be6:	8b7b      	ldrh	r3, [r7, #26]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8087 	beq.w	8003cfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6959      	ldr	r1, [r3, #20]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	891a      	ldrh	r2, [r3, #8]
 8003bfa:	8b7b      	ldrh	r3, [r7, #26]
 8003bfc:	f004 ff43 	bl	8008a86 <USB_ReadPMA>
 8003c00:	e07c      	b.n	8003cfc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	3306      	adds	r3, #6
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	8b7b      	ldrh	r3, [r7, #26]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d306      	bcc.n	8003c44 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	8b7b      	ldrh	r3, [r7, #26]
 8003c3c:	1ad2      	subs	r2, r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	619a      	str	r2, [r3, #24]
 8003c42:	e002      	b.n	8003c4a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d123      	bne.n	8003c9a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	83fb      	strh	r3, [r7, #30]
 8003c6e:	8bfb      	ldrh	r3, [r7, #30]
 8003c70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c74:	83fb      	strh	r3, [r7, #30]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	441a      	add	r2, r3
 8003c84:	8bfb      	ldrh	r3, [r7, #30]
 8003c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11f      	bne.n	8003ce4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	83bb      	strh	r3, [r7, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	8bbb      	ldrh	r3, [r7, #28]
 8003cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ce4:	8b7b      	ldrh	r3, [r7, #26]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6959      	ldr	r1, [r3, #20]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	895a      	ldrh	r2, [r3, #10]
 8003cf6:	8b7b      	ldrh	r3, [r7, #26]
 8003cf8:	f004 fec5 	bl	8008a86 <USB_ReadPMA>
    }
  }

  return count;
 8003cfc:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b0a2      	sub	sp, #136	; 0x88
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 81c7 	beq.w	80040ae <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4413      	add	r3, r2
 8003d34:	3302      	adds	r3, #2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d907      	bls.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d60:	1ad2      	subs	r2, r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	619a      	str	r2, [r3, #24]
 8003d66:	e002      	b.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 80b9 	bne.w	8003eea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d126      	bne.n	8003dce <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	4413      	add	r3, r2
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	011a      	lsls	r2, r3, #4
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	4413      	add	r3, r2
 8003da2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	801a      	strh	r2, [r3, #0]
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	e01a      	b.n	8003e04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d116      	bne.n	8003e04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	633b      	str	r3, [r7, #48]	; 0x30
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	4413      	add	r3, r2
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	011a      	lsls	r2, r3, #4
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	4413      	add	r3, r2
 8003df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	2200      	movs	r2, #0
 8003e02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	785b      	ldrb	r3, [r3, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d126      	bne.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	4413      	add	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	011a      	lsls	r2, r3, #4
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4413      	add	r3, r2
 8003e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	801a      	strh	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	801a      	strh	r2, [r3, #0]
 8003e5e:	e017      	b.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d113      	bne.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	4413      	add	r3, r2
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	011a      	lsls	r2, r3, #4
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	4413      	add	r3, r2
 8003e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f006 fc1f 	bl	800a6da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 82d4 	beq.w	8004450 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	827b      	strh	r3, [r7, #18]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	8a7b      	ldrh	r3, [r7, #18]
 8003ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	8013      	strh	r3, [r2, #0]
 8003ee8:	e2b2      	b.n	8004450 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d021      	beq.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	f040 8286 	bne.w	8004450 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6a1a      	ldr	r2, [r3, #32]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d309      	bcc.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6a1a      	ldr	r2, [r3, #32]
 8003f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f78:	1ad2      	subs	r2, r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	621a      	str	r2, [r3, #32]
 8003f7e:	e015      	b.n	8003fac <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003f88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f96:	e009      	b.n	8003fac <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d155      	bne.n	8004060 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	4413      	add	r3, r2
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	011a      	lsls	r2, r3, #4
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d112      	bne.n	8004008 <HAL_PCD_EP_DB_Transmit+0x302>
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff0:	801a      	strh	r2, [r3, #0]
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004000:	b29a      	uxth	r2, r3
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	e047      	b.n	8004098 <HAL_PCD_EP_DB_Transmit+0x392>
 8004008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400a:	2b3e      	cmp	r3, #62	; 0x3e
 800400c:	d811      	bhi.n	8004032 <HAL_PCD_EP_DB_Transmit+0x32c>
 800400e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
 8004014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_PCD_EP_DB_Transmit+0x31e>
 800401e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004020:	3301      	adds	r3, #1
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
 8004024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004026:	b29b      	uxth	r3, r3
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	b29a      	uxth	r2, r3
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402e:	801a      	strh	r2, [r3, #0]
 8004030:	e032      	b.n	8004098 <HAL_PCD_EP_DB_Transmit+0x392>
 8004032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
 8004038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <HAL_PCD_EP_DB_Transmit+0x342>
 8004042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004044:	3b01      	subs	r3, #1
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
 8004048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404a:	b29b      	uxth	r3, r3
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	b29b      	uxth	r3, r3
 8004050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004058:	b29a      	uxth	r2, r3
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	801a      	strh	r2, [r3, #0]
 800405e:	e01b      	b.n	8004098 <HAL_PCD_EP_DB_Transmit+0x392>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d117      	bne.n	8004098 <HAL_PCD_EP_DB_Transmit+0x392>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	643b      	str	r3, [r7, #64]	; 0x40
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004076:	b29b      	uxth	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	4413      	add	r3, r2
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	011a      	lsls	r2, r3, #4
 8004086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004088:	4413      	add	r3, r2
 800408a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004092:	b29a      	uxth	r2, r3
 8004094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004096:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6959      	ldr	r1, [r3, #20]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	891a      	ldrh	r2, [r3, #8]
 80040a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f004 fca8 	bl	80089fc <USB_WritePMA>
 80040ac:	e1d0      	b.n	8004450 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	3306      	adds	r3, #6
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d307      	bcc.n	80040f6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040ee:	1ad2      	subs	r2, r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	619a      	str	r2, [r3, #24]
 80040f4:	e002      	b.n	80040fc <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 80c4 	bne.w	800428e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d126      	bne.n	800415c <HAL_PCD_EP_DB_Transmit+0x456>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	4413      	add	r3, r2
 8004124:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	4413      	add	r3, r2
 8004130:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004134:	66bb      	str	r3, [r7, #104]	; 0x68
 8004136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004140:	b29a      	uxth	r2, r3
 8004142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004154:	b29a      	uxth	r2, r3
 8004156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e01a      	b.n	8004192 <HAL_PCD_EP_DB_Transmit+0x48c>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d116      	bne.n	8004192 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	677b      	str	r3, [r7, #116]	; 0x74
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004172:	b29b      	uxth	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004178:	4413      	add	r3, r2
 800417a:	677b      	str	r3, [r7, #116]	; 0x74
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	011a      	lsls	r2, r3, #4
 8004182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004184:	4413      	add	r3, r2
 8004186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800418a:	673b      	str	r3, [r7, #112]	; 0x70
 800418c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800418e:	2200      	movs	r2, #0
 8004190:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	67bb      	str	r3, [r7, #120]	; 0x78
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d12f      	bne.n	8004200 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041b8:	4413      	add	r3, r2
 80041ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	011a      	lsls	r2, r3, #4
 80041c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041c8:	4413      	add	r3, r2
 80041ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041de:	b29a      	uxth	r2, r3
 80041e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	e017      	b.n	8004230 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d113      	bne.n	8004230 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004210:	b29b      	uxth	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004216:	4413      	add	r3, r2
 8004218:	67bb      	str	r3, [r7, #120]	; 0x78
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	011a      	lsls	r2, r3, #4
 8004220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004222:	4413      	add	r3, r2
 8004224:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004228:	67fb      	str	r3, [r7, #124]	; 0x7c
 800422a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800422c:	2200      	movs	r2, #0
 800422e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f006 fa4f 	bl	800a6da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 8104 	bne.w	8004450 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800427c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004280:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004288:	b29b      	uxth	r3, r3
 800428a:	8013      	strh	r3, [r2, #0]
 800428c:	e0e0      	b.n	8004450 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d121      	bne.n	80042dc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80042c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d8:	b29b      	uxth	r3, r3
 80042da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	f040 80b4 	bne.w	8004450 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042f0:	441a      	add	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042fe:	441a      	add	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	429a      	cmp	r2, r3
 800430e:	d309      	bcc.n	8004324 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800431c:	1ad2      	subs	r2, r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	621a      	str	r2, [r3, #32]
 8004322:	e015      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d107      	bne.n	800433c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800432c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004330:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800433a:	e009      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	667b      	str	r3, [r7, #100]	; 0x64
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d155      	bne.n	800440a <HAL_PCD_EP_DB_Transmit+0x704>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004372:	4413      	add	r3, r2
 8004374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	011a      	lsls	r2, r3, #4
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	4413      	add	r3, r2
 8004380:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004384:	65bb      	str	r3, [r7, #88]	; 0x58
 8004386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004388:	2b00      	cmp	r3, #0
 800438a:	d112      	bne.n	80043b2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800438c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004396:	b29a      	uxth	r2, r3
 8004398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e044      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x736>
 80043b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b4:	2b3e      	cmp	r3, #62	; 0x3e
 80043b6:	d811      	bhi.n	80043dc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80043b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	657b      	str	r3, [r7, #84]	; 0x54
 80043be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_PCD_EP_DB_Transmit+0x6c8>
 80043c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ca:	3301      	adds	r3, #1
 80043cc:	657b      	str	r3, [r7, #84]	; 0x54
 80043ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	e02f      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x736>
 80043dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	657b      	str	r3, [r7, #84]	; 0x54
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80043ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ee:	3b01      	subs	r3, #1
 80043f0:	657b      	str	r3, [r7, #84]	; 0x54
 80043f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	029b      	lsls	r3, r3, #10
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004402:	b29a      	uxth	r2, r3
 8004404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	e018      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x736>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	785b      	ldrb	r3, [r3, #1]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d114      	bne.n	800443c <HAL_PCD_EP_DB_Transmit+0x736>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004420:	4413      	add	r3, r2
 8004422:	667b      	str	r3, [r7, #100]	; 0x64
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	011a      	lsls	r2, r3, #4
 800442a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800442c:	4413      	add	r3, r2
 800442e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004432:	663b      	str	r3, [r7, #96]	; 0x60
 8004434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004436:	b29a      	uxth	r2, r3
 8004438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800443a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6959      	ldr	r1, [r3, #20]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	895a      	ldrh	r2, [r3, #10]
 8004448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	f004 fad6 	bl	80089fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446a:	823b      	strh	r3, [r7, #16]
 800446c:	8a3b      	ldrh	r3, [r7, #16]
 800446e:	f083 0310 	eor.w	r3, r3, #16
 8004472:	823b      	strh	r3, [r7, #16]
 8004474:	8a3b      	ldrh	r3, [r7, #16]
 8004476:	f083 0320 	eor.w	r3, r3, #32
 800447a:	823b      	strh	r3, [r7, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	8a3b      	ldrh	r3, [r7, #16]
 800448c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3788      	adds	r7, #136	; 0x88
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b087      	sub	sp, #28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	817b      	strh	r3, [r7, #10]
 80044b8:	4613      	mov	r3, r2
 80044ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044bc:	897b      	ldrh	r3, [r7, #10]
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c8:	897b      	ldrh	r3, [r7, #10]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e009      	b.n	80044f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044e0:	897a      	ldrh	r2, [r7, #10]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044f4:	893b      	ldrh	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	b29a      	uxth	r2, r3
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	80da      	strh	r2, [r3, #6]
 8004508:	e00b      	b.n	8004522 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2201      	movs	r2, #1
 800450e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	b29a      	uxth	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	b29a      	uxth	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
	...

08004530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e272      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 8087 	beq.w	800465e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004550:	4b92      	ldr	r3, [pc, #584]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b04      	cmp	r3, #4
 800455a:	d00c      	beq.n	8004576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800455c:	4b8f      	ldr	r3, [pc, #572]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d112      	bne.n	800458e <HAL_RCC_OscConfig+0x5e>
 8004568:	4b8c      	ldr	r3, [pc, #560]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d10b      	bne.n	800458e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004576:	4b89      	ldr	r3, [pc, #548]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d06c      	beq.n	800465c <HAL_RCC_OscConfig+0x12c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d168      	bne.n	800465c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e24c      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x76>
 8004598:	4b80      	ldr	r3, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a7f      	ldr	r2, [pc, #508]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e02e      	b.n	8004604 <HAL_RCC_OscConfig+0xd4>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x98>
 80045ae:	4b7b      	ldr	r3, [pc, #492]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7a      	ldr	r2, [pc, #488]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a77      	ldr	r2, [pc, #476]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xd4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0xbc>
 80045d2:	4b72      	ldr	r3, [pc, #456]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a71      	ldr	r2, [pc, #452]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b6f      	ldr	r3, [pc, #444]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6e      	ldr	r2, [pc, #440]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xd4>
 80045ec:	4b6b      	ldr	r3, [pc, #428]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b68      	ldr	r3, [pc, #416]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a67      	ldr	r2, [pc, #412]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd fb16 	bl	8001c3c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fb12 	bl	8001c3c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e200      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xe4>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fd fb02 	bl	8001c3c <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd fafe 	bl	8001c3c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1ec      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x10c>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800466a:	4b4c      	ldr	r3, [pc, #304]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004676:	4b49      	ldr	r3, [pc, #292]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b08      	cmp	r3, #8
 8004680:	d11c      	bne.n	80046bc <HAL_RCC_OscConfig+0x18c>
 8004682:	4b46      	ldr	r3, [pc, #280]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d116      	bne.n	80046bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x176>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1c0      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a6:	4b3d      	ldr	r3, [pc, #244]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4939      	ldr	r1, [pc, #228]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	e03a      	b.n	8004732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c4:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <HAL_RCC_OscConfig+0x270>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fd fab7 	bl	8001c3c <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd fab3 	bl	8001c3c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1a1      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e4:	4b2d      	ldr	r3, [pc, #180]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4927      	ldr	r1, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]
 8004704:	e015      	b.n	8004732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <HAL_RCC_OscConfig+0x270>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd fa96 	bl	8001c3c <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004714:	f7fd fa92 	bl	8001c3c <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e180      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d03a      	beq.n	80047b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d019      	beq.n	800477a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004746:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <HAL_RCC_OscConfig+0x274>)
 8004748:	2201      	movs	r2, #1
 800474a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474c:	f7fd fa76 	bl	8001c3c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004754:	f7fd fa72 	bl	8001c3c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e160      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <HAL_RCC_OscConfig+0x26c>)
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004772:	2001      	movs	r0, #1
 8004774:	f000 fac4 	bl	8004d00 <RCC_Delay>
 8004778:	e01c      	b.n	80047b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <HAL_RCC_OscConfig+0x274>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004780:	f7fd fa5c 	bl	8001c3c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004786:	e00f      	b.n	80047a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004788:	f7fd fa58 	bl	8001c3c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d908      	bls.n	80047a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e146      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	42420000 	.word	0x42420000
 80047a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a8:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e9      	bne.n	8004788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80a6 	beq.w	800490e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c2:	2300      	movs	r3, #0
 80047c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c6:	4b8b      	ldr	r3, [pc, #556]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10d      	bne.n	80047ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d2:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4a87      	ldr	r2, [pc, #540]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	61d3      	str	r3, [r2, #28]
 80047de:	4b85      	ldr	r3, [pc, #532]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ee:	4b82      	ldr	r3, [pc, #520]	; (80049f8 <HAL_RCC_OscConfig+0x4c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d118      	bne.n	800482c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fa:	4b7f      	ldr	r3, [pc, #508]	; (80049f8 <HAL_RCC_OscConfig+0x4c8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a7e      	ldr	r2, [pc, #504]	; (80049f8 <HAL_RCC_OscConfig+0x4c8>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004806:	f7fd fa19 	bl	8001c3c <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480e:	f7fd fa15 	bl	8001c3c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b64      	cmp	r3, #100	; 0x64
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e103      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	4b75      	ldr	r3, [pc, #468]	; (80049f8 <HAL_RCC_OscConfig+0x4c8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x312>
 8004834:	4b6f      	ldr	r3, [pc, #444]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4a6e      	ldr	r2, [pc, #440]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6213      	str	r3, [r2, #32]
 8004840:	e02d      	b.n	800489e <HAL_RCC_OscConfig+0x36e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x334>
 800484a:	4b6a      	ldr	r3, [pc, #424]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4a69      	ldr	r2, [pc, #420]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6213      	str	r3, [r2, #32]
 8004856:	4b67      	ldr	r3, [pc, #412]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4a66      	ldr	r2, [pc, #408]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	6213      	str	r3, [r2, #32]
 8004862:	e01c      	b.n	800489e <HAL_RCC_OscConfig+0x36e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2b05      	cmp	r3, #5
 800486a:	d10c      	bne.n	8004886 <HAL_RCC_OscConfig+0x356>
 800486c:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	4a60      	ldr	r2, [pc, #384]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	6213      	str	r3, [r2, #32]
 8004878:	4b5e      	ldr	r3, [pc, #376]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6213      	str	r3, [r2, #32]
 8004884:	e00b      	b.n	800489e <HAL_RCC_OscConfig+0x36e>
 8004886:	4b5b      	ldr	r3, [pc, #364]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4a5a      	ldr	r2, [pc, #360]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	6213      	str	r3, [r2, #32]
 8004892:	4b58      	ldr	r3, [pc, #352]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4a57      	ldr	r2, [pc, #348]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d015      	beq.n	80048d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fd f9c9 	bl	8001c3c <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ac:	e00a      	b.n	80048c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fd f9c5 	bl	8001c3c <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048bc:	4293      	cmp	r3, r2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e0b1      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c4:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ee      	beq.n	80048ae <HAL_RCC_OscConfig+0x37e>
 80048d0:	e014      	b.n	80048fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d2:	f7fd f9b3 	bl	8001c3c <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd f9af 	bl	8001c3c <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e09b      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f0:	4b40      	ldr	r3, [pc, #256]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ee      	bne.n	80048da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d105      	bne.n	800490e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004902:	4b3c      	ldr	r3, [pc, #240]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8087 	beq.w	8004a26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004918:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b08      	cmp	r3, #8
 8004922:	d061      	beq.n	80049e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d146      	bne.n	80049ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492c:	4b33      	ldr	r3, [pc, #204]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004932:	f7fd f983 	bl	8001c3c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493a:	f7fd f97f 	bl	8001c3c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e06d      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800494c:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f0      	bne.n	800493a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d108      	bne.n	8004974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004962:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	4921      	ldr	r1, [pc, #132]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004970:	4313      	orrs	r3, r2
 8004972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004974:	4b1f      	ldr	r3, [pc, #124]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a19      	ldr	r1, [r3, #32]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	430b      	orrs	r3, r1
 8004986:	491b      	ldr	r1, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fd f953 	bl	8001c3c <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fd f94f 	bl	8001c3c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e03d      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049ac:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x46a>
 80049b8:	e035      	b.n	8004a26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <HAL_RCC_OscConfig+0x4cc>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fd f93c 	bl	8001c3c <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd f938 	bl	8001c3c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e026      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x498>
 80049e6:	e01e      	b.n	8004a26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e019      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x500>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d106      	bne.n	8004a22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000

08004a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0d0      	b.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d910      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 0207 	bic.w	r2, r3, #7
 8004a5e:	4965      	ldr	r1, [pc, #404]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b63      	ldr	r3, [pc, #396]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0b8      	b.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a90:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4a58      	ldr	r2, [pc, #352]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a52      	ldr	r2, [pc, #328]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ab2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	494d      	ldr	r1, [pc, #308]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d040      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d115      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e07f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e073      	b.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06b      	b.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4936      	ldr	r1, [pc, #216]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b24:	f7fd f88a 	bl	8001c3c <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fd f886 	bl	8001c3c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e053      	b.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d210      	bcs.n	8004b84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 0207 	bic.w	r2, r3, #7
 8004b6a:	4922      	ldr	r1, [pc, #136]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e032      	b.n	8004bea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	490e      	ldr	r1, [pc, #56]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bc2:	f000 f821 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	490a      	ldr	r1, [pc, #40]	; (8004bfc <HAL_RCC_ClockConfig+0x1c8>)
 8004bd4:	5ccb      	ldrb	r3, [r1, r3]
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x1cc>)
 8004bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <HAL_RCC_ClockConfig+0x1d0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fc ffe8 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800ac9c 	.word	0x0800ac9c
 8004c00:	20000004 	.word	0x20000004
 8004c04:	20000008 	.word	0x20000008

08004c08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	b490      	push	{r4, r7}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c0e:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004c10:	1d3c      	adds	r4, r7, #4
 8004c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c18:	f240 2301 	movw	r3, #513	; 0x201
 8004c1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	2300      	movs	r3, #0
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c32:	4b21      	ldr	r3, [pc, #132]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d002      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x40>
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x46>
 8004c46:	e02b      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c48:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c4a:	623b      	str	r3, [r7, #32]
      break;
 8004c4c:	e02b      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	0c9b      	lsrs	r3, r3, #18
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	3328      	adds	r3, #40	; 0x28
 8004c58:	443b      	add	r3, r7
 8004c5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c5e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d012      	beq.n	8004c90 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	0c5b      	lsrs	r3, r3, #17
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	3328      	adds	r3, #40	; 0x28
 8004c76:	443b      	add	r3, r7
 8004c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c82:	fb03 f202 	mul.w	r2, r3, r2
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	e004      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	623b      	str	r3, [r7, #32]
      break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ca2:	623b      	str	r3, [r7, #32]
      break;
 8004ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3728      	adds	r7, #40	; 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc90      	pop	{r4, r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	0800ac2c 	.word	0x0800ac2c
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	007a1200 	.word	0x007a1200
 8004cc0:	003d0900 	.word	0x003d0900

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b02      	ldr	r3, [pc, #8]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	20000004 	.word	0x20000004

08004cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cdc:	f7ff fff2 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	0adb      	lsrs	r3, r3, #11
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4903      	ldr	r1, [pc, #12]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	0800acac 	.word	0x0800acac

08004d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <RCC_Delay+0x34>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <RCC_Delay+0x38>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	0a5b      	lsrs	r3, r3, #9
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d1c:	bf00      	nop
  }
  while (Delay --);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1e5a      	subs	r2, r3, #1
 8004d22:	60fa      	str	r2, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f9      	bne.n	8004d1c <RCC_Delay+0x1c>
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20000004 	.word	0x20000004
 8004d38:	10624dd3 	.word	0x10624dd3

08004d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d07d      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5c:	4b4f      	ldr	r3, [pc, #316]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d68:	4b4c      	ldr	r3, [pc, #304]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4a4b      	ldr	r2, [pc, #300]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d72:	61d3      	str	r3, [r2, #28]
 8004d74:	4b49      	ldr	r3, [pc, #292]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d118      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d90:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a42      	ldr	r2, [pc, #264]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9c:	f7fc ff4e 	bl	8001c3c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da2:	e008      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fc ff4a 	bl	8001c3c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	; 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e06d      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db6:	4b3a      	ldr	r3, [pc, #232]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d02e      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d027      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dea:	4b2e      	ldr	r3, [pc, #184]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004df6:	4a29      	ldr	r2, [pc, #164]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d014      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fc ff19 	bl	8001c3c <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fc ff15 	bl	8001c3c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e036      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4917      	ldr	r1, [pc, #92]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	490b      	ldr	r1, [pc, #44]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	4904      	ldr	r1, [pc, #16]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	42420440 	.word	0x42420440

08004ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b08d      	sub	sp, #52	; 0x34
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004eb0:	4b58      	ldr	r3, [pc, #352]	; (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004eb2:	f107 040c 	add.w	r4, r7, #12
 8004eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ebc:	f240 2301 	movw	r3, #513	; 0x201
 8004ec0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eca:	2300      	movs	r3, #0
 8004ecc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	f200 808e 	bhi.w	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d049      	beq.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d079      	beq.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004ef0:	e086      	b.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004ef2:	4b49      	ldr	r3, [pc, #292]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004ef8:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d07f      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	0c9b      	lsrs	r3, r3, #18
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	3330      	adds	r3, #48	; 0x30
 8004f0e:	443b      	add	r3, r7
 8004f10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f14:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d017      	beq.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f20:	4b3d      	ldr	r3, [pc, #244]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	0c5b      	lsrs	r3, r3, #17
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	3330      	adds	r3, #48	; 0x30
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00d      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f3e:	4a37      	ldr	r2, [pc, #220]	; (800501c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	fb02 f303 	mul.w	r3, r2, r3
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4e:	e004      	b.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	4a33      	ldr	r2, [pc, #204]	; (8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f66:	d102      	bne.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f6c:	e04a      	b.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004f7c:	e042      	b.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004f7e:	4b26      	ldr	r3, [pc, #152]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8e:	d108      	bne.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa0:	e01f      	b.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d109      	bne.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004fba:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc0:	e00f      	b.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fcc:	d11c      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004fda:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fe0:	e012      	b.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004fe2:	e011      	b.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004fe4:	f7ff fe78 	bl	8004cd8 <HAL_RCC_GetPCLK2Freq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	0b9b      	lsrs	r3, r3, #14
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ffe:	e004      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005000:	bf00      	nop
 8005002:	e002      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005004:	bf00      	nop
 8005006:	e000      	b.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005008:	bf00      	nop
    }
  }
  return (frequency);
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800500c:	4618      	mov	r0, r3
 800500e:	3734      	adds	r7, #52	; 0x34
 8005010:	46bd      	mov	sp, r7
 8005012:	bd90      	pop	{r4, r7, pc}
 8005014:	0800ac3c 	.word	0x0800ac3c
 8005018:	40021000 	.word	0x40021000
 800501c:	007a1200 	.word	0x007a1200
 8005020:	003d0900 	.word	0x003d0900
 8005024:	aaaaaaab 	.word	0xaaaaaaab

08005028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e041      	b.n	80050be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc f9aa 	bl	80013a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fc7c 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d001      	beq.n	80050e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e032      	b.n	8005146 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <HAL_TIM_Base_Start+0x88>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_Base_Start+0x48>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_Base_Start+0x48>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <HAL_TIM_Base_Start+0x8c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_Base_Start+0x48>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <HAL_TIM_Base_Start+0x90>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d111      	bne.n	8005134 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b06      	cmp	r3, #6
 8005120:	d010      	beq.n	8005144 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005132:	e007      	b.n	8005144 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800

0800515c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d001      	beq.n	8005174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e03a      	b.n	80051ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_Base_Start_IT+0x98>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x58>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d009      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x58>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x58>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a13      	ldr	r2, [pc, #76]	; (80051fc <HAL_TIM_Base_Start_IT+0xa0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d111      	bne.n	80051d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d010      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	e007      	b.n	80051e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800

08005200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e041      	b.n	8005296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f839 	bl	800529e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f000 fb90 	bl	8005964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_TIM_PWM_Start+0x24>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e022      	b.n	800531a <HAL_TIM_PWM_Start+0x6a>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d109      	bne.n	80052ee <HAL_TIM_PWM_Start+0x3e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	bf14      	ite	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	2300      	moveq	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e015      	b.n	800531a <HAL_TIM_PWM_Start+0x6a>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d109      	bne.n	8005308 <HAL_TIM_PWM_Start+0x58>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e008      	b.n	800531a <HAL_TIM_PWM_Start+0x6a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e05e      	b.n	80053e0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0x82>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005330:	e013      	b.n	800535a <HAL_TIM_PWM_Start+0xaa>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0x92>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005340:	e00b      	b.n	800535a <HAL_TIM_PWM_Start+0xaa>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start+0xa2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005350:	e003      	b.n	800535a <HAL_TIM_PWM_Start+0xaa>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2201      	movs	r2, #1
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fd7e 	bl	8005e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <HAL_TIM_PWM_Start+0x138>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d107      	bne.n	8005382 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005380:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_TIM_PWM_Start+0x138>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIM_PWM_Start+0xfa>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d009      	beq.n	80053aa <HAL_TIM_PWM_Start+0xfa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <HAL_TIM_PWM_Start+0x13c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIM_PWM_Start+0xfa>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <HAL_TIM_PWM_Start+0x140>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d010      	beq.n	80053de <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	e007      	b.n	80053de <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800

080053f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b02      	cmp	r3, #2
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0202 	mvn.w	r2, #2
 8005420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa78 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa6b 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa7a 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0204 	mvn.w	r2, #4
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa4e 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa41 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa50 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0208 	mvn.w	r2, #8
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2204      	movs	r2, #4
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa24 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa17 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa26 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b10      	cmp	r3, #16
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b10      	cmp	r3, #16
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0210 	mvn.w	r2, #16
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2208      	movs	r2, #8
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9fa 	bl	800592c <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9ed 	bl	800591a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f9fc 	bl	800593e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0201 	mvn.w	r2, #1
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9c8 	bl	8005908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b80      	cmp	r3, #128	; 0x80
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fceb 	bl	8005f7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d10e      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d107      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9c0 	bl	8005950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0220 	mvn.w	r2, #32
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fcb6 	bl	8005f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d101      	bne.n	800561e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800561a:	2302      	movs	r3, #2
 800561c:	e0ac      	b.n	8005778 <HAL_TIM_PWM_ConfigChannel+0x174>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b0c      	cmp	r3, #12
 800562a:	f200 809f 	bhi.w	800576c <HAL_TIM_PWM_ConfigChannel+0x168>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005669 	.word	0x08005669
 8005638:	0800576d 	.word	0x0800576d
 800563c:	0800576d 	.word	0x0800576d
 8005640:	0800576d 	.word	0x0800576d
 8005644:	080056a9 	.word	0x080056a9
 8005648:	0800576d 	.word	0x0800576d
 800564c:	0800576d 	.word	0x0800576d
 8005650:	0800576d 	.word	0x0800576d
 8005654:	080056eb 	.word	0x080056eb
 8005658:	0800576d 	.word	0x0800576d
 800565c:	0800576d 	.word	0x0800576d
 8005660:	0800576d 	.word	0x0800576d
 8005664:	0800572b 	.word	0x0800572b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f9da 	bl	8005a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	619a      	str	r2, [r3, #24]
      break;
 80056a6:	e062      	b.n	800576e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fa20 	bl	8005af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]
      break;
 80056e8:	e041      	b.n	800576e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fa69 	bl	8005bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0208 	orr.w	r2, r2, #8
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0204 	bic.w	r2, r2, #4
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
      break;
 8005728:	e021      	b.n	800576e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fab3 	bl	8005c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	021a      	lsls	r2, r3, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	61da      	str	r2, [r3, #28]
      break;
 800576a:	e000      	b.n	800576e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800576c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_TIM_ConfigClockSource+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e0b3      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x180>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d0:	d03e      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0xd0>
 80057d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d6:	f200 8087 	bhi.w	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 80057da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057de:	f000 8085 	beq.w	80058ec <HAL_TIM_ConfigClockSource+0x16c>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d87f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d01a      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xa2>
 80057ec:	2b70      	cmp	r3, #112	; 0x70
 80057ee:	d87b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 80057f0:	2b60      	cmp	r3, #96	; 0x60
 80057f2:	d050      	beq.n	8005896 <HAL_TIM_ConfigClockSource+0x116>
 80057f4:	2b60      	cmp	r3, #96	; 0x60
 80057f6:	d877      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d03c      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0xf6>
 80057fc:	2b50      	cmp	r3, #80	; 0x50
 80057fe:	d873      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d058      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0x136>
 8005804:	2b40      	cmp	r3, #64	; 0x40
 8005806:	d86f      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 8005808:	2b30      	cmp	r3, #48	; 0x30
 800580a:	d064      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x156>
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d86b      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 8005810:	2b20      	cmp	r3, #32
 8005812:	d060      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x156>
 8005814:	2b20      	cmp	r3, #32
 8005816:	d867      	bhi.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05c      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x156>
 800581c:	2b10      	cmp	r3, #16
 800581e:	d05a      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005820:	e062      	b.n	80058e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6899      	ldr	r1, [r3, #8]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f000 faf8 	bl	8005e26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005844:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	609a      	str	r2, [r3, #8]
      break;
 800584e:	e04e      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6899      	ldr	r1, [r3, #8]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f000 fae1 	bl	8005e26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005872:	609a      	str	r2, [r3, #8]
      break;
 8005874:	e03b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6859      	ldr	r1, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	461a      	mov	r2, r3
 8005884:	f000 fa58 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2150      	movs	r1, #80	; 0x50
 800588e:	4618      	mov	r0, r3
 8005890:	f000 faaf 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 8005894:	e02b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	6859      	ldr	r1, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f000 fa76 	bl	8005d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2160      	movs	r1, #96	; 0x60
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fa9f 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 80058b4:	e01b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 fa38 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fa8f 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 80058d4:	e00b      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f000 fa86 	bl	8005df2 <TIM_ITRx_SetConfig>
        break;
 80058e6:	e002      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
	...

08005964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <TIM_Base_SetConfig+0xb8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <TIM_Base_SetConfig+0x30>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005982:	d007      	beq.n	8005994 <TIM_Base_SetConfig+0x30>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <TIM_Base_SetConfig+0xbc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_Base_SetConfig+0x30>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <TIM_Base_SetConfig+0xc0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d108      	bne.n	80059a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1c      	ldr	r2, [pc, #112]	; (8005a1c <TIM_Base_SetConfig+0xb8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_Base_SetConfig+0x62>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b4:	d007      	beq.n	80059c6 <TIM_Base_SetConfig+0x62>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a19      	ldr	r2, [pc, #100]	; (8005a20 <TIM_Base_SetConfig+0xbc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_Base_SetConfig+0x62>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <TIM_Base_SetConfig+0xc0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d108      	bne.n	80059d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a07      	ldr	r2, [pc, #28]	; (8005a1c <TIM_Base_SetConfig+0xb8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d103      	bne.n	8005a0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	615a      	str	r2, [r3, #20]
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800

08005a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0201 	bic.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f023 0302 	bic.w	r3, r3, #2
 8005a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <TIM_OC1_SetConfig+0xc8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d10c      	bne.n	8005a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0308 	bic.w	r3, r3, #8
 8005a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0304 	bic.w	r3, r3, #4
 8005a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <TIM_OC1_SetConfig+0xc8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d111      	bne.n	8005aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	621a      	str	r2, [r3, #32]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40012c00 	.word	0x40012c00

08005af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0210 	bic.w	r2, r3, #16
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0320 	bic.w	r3, r3, #32
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a1d      	ldr	r2, [pc, #116]	; (8005bc4 <TIM_OC2_SetConfig+0xd0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d10d      	bne.n	8005b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <TIM_OC2_SetConfig+0xd0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d113      	bne.n	8005ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	40012c00 	.word	0x40012c00

08005bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <TIM_OC3_SetConfig+0xd0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10d      	bne.n	8005c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <TIM_OC3_SetConfig+0xd0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d113      	bne.n	8005c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00

08005c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <TIM_OC4_SetConfig+0x98>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d109      	bne.n	8005d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr
 8005d34:	40012c00 	.word	0x40012c00

08005d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0201 	bic.w	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 030a 	bic.w	r3, r3, #10
 8005d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f023 0210 	bic.w	r2, r3, #16
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	031b      	lsls	r3, r3, #12
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f043 0307 	orr.w	r3, r3, #7
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr

08005e26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b087      	sub	sp, #28
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	021a      	lsls	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	609a      	str	r2, [r3, #8]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	2201      	movs	r2, #1
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	401a      	ands	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e046      	b.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f10:	d009      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a10      	ldr	r2, [pc, #64]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10c      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800

08005f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	f107 0014 	add.w	r0, r7, #20
 8005f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	b004      	add	sp, #16
 8005faa:	4770      	bx	lr

08005fac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fbc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fe0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fe4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr

0800600c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	bc80      	pop	{r7}
 8006022:	4770      	bx	lr

08006024 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006024:	b084      	sub	sp, #16
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	f107 0014 	add.w	r0, r7, #20
 8006032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	b004      	add	sp, #16
 8006062:	4770      	bx	lr

08006064 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006064:	b480      	push	{r7}
 8006066:	b09b      	sub	sp, #108	; 0x6c
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29b      	uxth	r3, r3
 8006082:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	78db      	ldrb	r3, [r3, #3]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d81f      	bhi.n	80060d6 <USB_ActivateEndpoint+0x72>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <USB_ActivateEndpoint+0x38>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060df 	.word	0x080060df
 80060a8:	080060bb 	.word	0x080060bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060b8:	e012      	b.n	80060e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80060c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060c6:	e00b      	b.n	80060e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80060c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80060d4:	e004      	b.n	80060e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80060dc:	e000      	b.n	80060e0 <USB_ActivateEndpoint+0x7c>
      break;
 80060de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	441a      	add	r2, r3
 80060ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	b29a      	uxth	r2, r3
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	b29b      	uxth	r3, r3
 8006146:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	7b1b      	ldrb	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 8149 	bne.w	80063e4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8084 	beq.w	8006264 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006166:	b29b      	uxth	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	88db      	ldrh	r3, [r3, #6]
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	81fb      	strh	r3, [r7, #14]
 800619e:	89fb      	ldrh	r3, [r7, #14]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <USB_ActivateEndpoint+0x17c>
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	81bb      	strh	r3, [r7, #12]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	441a      	add	r2, r3
 80061ca:	89bb      	ldrh	r3, [r7, #12]
 80061cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061dc:	b29b      	uxth	r3, r3
 80061de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	78db      	ldrb	r3, [r3, #3]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d020      	beq.n	800622a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fe:	813b      	strh	r3, [r7, #8]
 8006200:	893b      	ldrh	r3, [r7, #8]
 8006202:	f083 0320 	eor.w	r3, r3, #32
 8006206:	813b      	strh	r3, [r7, #8]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	441a      	add	r2, r3
 8006212:	893b      	ldrh	r3, [r7, #8]
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
 8006228:	e27f      	b.n	800672a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006240:	817b      	strh	r3, [r7, #10]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	897b      	ldrh	r3, [r7, #10]
 800624e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625e:	b29b      	uxth	r3, r3
 8006260:	8013      	strh	r3, [r2, #0]
 8006262:	e262      	b.n	800672a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626e:	b29b      	uxth	r3, r3
 8006270:	461a      	mov	r2, r3
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	4413      	add	r3, r2
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	011a      	lsls	r2, r3, #4
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	4413      	add	r3, r2
 8006282:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	88db      	ldrh	r3, [r3, #6]
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	4413      	add	r3, r2
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	011a      	lsls	r2, r3, #4
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	4413      	add	r3, r2
 80062b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d112      	bne.n	80062ea <USB_ActivateEndpoint+0x286>
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	e02f      	b.n	800634a <USB_ActivateEndpoint+0x2e6>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b3e      	cmp	r3, #62	; 0x3e
 80062f0:	d813      	bhi.n	800631a <USB_ActivateEndpoint+0x2b6>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	663b      	str	r3, [r7, #96]	; 0x60
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <USB_ActivateEndpoint+0x2a8>
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	3301      	adds	r3, #1
 800630a:	663b      	str	r3, [r7, #96]	; 0x60
 800630c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800630e:	b29b      	uxth	r3, r3
 8006310:	029b      	lsls	r3, r3, #10
 8006312:	b29a      	uxth	r2, r3
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	e017      	b.n	800634a <USB_ActivateEndpoint+0x2e6>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	663b      	str	r3, [r7, #96]	; 0x60
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2b00      	cmp	r3, #0
 800632c:	d102      	bne.n	8006334 <USB_ActivateEndpoint+0x2d0>
 800632e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006330:	3b01      	subs	r3, #1
 8006332:	663b      	str	r3, [r7, #96]	; 0x60
 8006334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006336:	b29b      	uxth	r3, r3
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	b29b      	uxth	r3, r3
 800633c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006344:	b29a      	uxth	r2, r3
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	83fb      	strh	r3, [r7, #30]
 8006358:	8bfb      	ldrh	r3, [r7, #30]
 800635a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01b      	beq.n	800639a <USB_ActivateEndpoint+0x336>
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006378:	83bb      	strh	r3, [r7, #28]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	441a      	add	r2, r3
 8006384:	8bbb      	ldrh	r3, [r7, #28]
 8006386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800638e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006396:	b29b      	uxth	r3, r3
 8006398:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b0:	837b      	strh	r3, [r7, #26]
 80063b2:	8b7b      	ldrh	r3, [r7, #26]
 80063b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063b8:	837b      	strh	r3, [r7, #26]
 80063ba:	8b7b      	ldrh	r3, [r7, #26]
 80063bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80063c0:	837b      	strh	r3, [r7, #26]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	8b7b      	ldrh	r3, [r7, #26]
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]
 80063e2:	e1a2      	b.n	800672a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800640c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006414:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641c:	b29b      	uxth	r3, r3
 800641e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	65bb      	str	r3, [r7, #88]	; 0x58
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006430:	4413      	add	r3, r2
 8006432:	65bb      	str	r3, [r7, #88]	; 0x58
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800643c:	4413      	add	r3, r2
 800643e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006442:	657b      	str	r3, [r7, #84]	; 0x54
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	891b      	ldrh	r3, [r3, #8]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	b29b      	uxth	r3, r3
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	653b      	str	r3, [r7, #80]	; 0x50
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006464:	4413      	add	r3, r2
 8006466:	653b      	str	r3, [r7, #80]	; 0x50
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	011a      	lsls	r2, r3, #4
 800646e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006470:	4413      	add	r3, r2
 8006472:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	895b      	ldrh	r3, [r3, #10]
 800647c:	085b      	lsrs	r3, r3, #1
 800647e:	b29b      	uxth	r3, r3
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006486:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 8091 	bne.w	80065b4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80064a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80064a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01b      	beq.n	80064e2 <USB_ActivateEndpoint+0x47e>
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	441a      	add	r2, r3
 80064cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80064ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80064f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80064f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01b      	beq.n	8006532 <USB_ActivateEndpoint+0x4ce>
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006548:	86bb      	strh	r3, [r7, #52]	; 0x34
 800654a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800654c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006550:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006552:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006554:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006558:	86bb      	strh	r3, [r7, #52]	; 0x34
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006590:	867b      	strh	r3, [r7, #50]	; 0x32
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800659e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8013      	strh	r3, [r2, #0]
 80065b2:	e0ba      	b.n	800672a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80065c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01d      	beq.n	800660c <USB_ActivateEndpoint+0x5a8>
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006608:	b29b      	uxth	r3, r3
 800660a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800661c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01d      	beq.n	8006664 <USB_ActivateEndpoint+0x600>
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	78db      	ldrb	r3, [r3, #3]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d024      	beq.n	80066b6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006682:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006686:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800668a:	f083 0320 	eor.w	r3, r3, #32
 800668e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	441a      	add	r2, r3
 800669c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80066a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8013      	strh	r3, [r2, #0]
 80066b4:	e01d      	b.n	80066f2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006726:	b29b      	uxth	r3, r3
 8006728:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800672a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800672e:	4618      	mov	r0, r3
 8006730:	376c      	adds	r7, #108	; 0x6c
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006738:	b480      	push	{r7}
 800673a:	b08d      	sub	sp, #52	; 0x34
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	7b1b      	ldrb	r3, [r3, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f040 808e 	bne.w	8006868 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d044      	beq.n	80067de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	81bb      	strh	r3, [r7, #12]
 8006762:	89bb      	ldrh	r3, [r7, #12]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <USB_DeactivateEndpoint+0x6c>
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	817b      	strh	r3, [r7, #10]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	897b      	ldrh	r3, [r7, #10]
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ba:	813b      	strh	r3, [r7, #8]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	441a      	add	r2, r3
 80067c6:	893b      	ldrh	r3, [r7, #8]
 80067c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]
 80067dc:	e192      	b.n	8006b04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	827b      	strh	r3, [r7, #18]
 80067ec:	8a7b      	ldrh	r3, [r7, #18]
 80067ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01b      	beq.n	800682e <USB_DeactivateEndpoint+0xf6>
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680c:	823b      	strh	r3, [r7, #16]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	441a      	add	r2, r3
 8006818:	8a3b      	ldrh	r3, [r7, #16]
 800681a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682a:	b29b      	uxth	r3, r3
 800682c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006844:	81fb      	strh	r3, [r7, #14]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	441a      	add	r2, r3
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
 8006866:	e14d      	b.n	8006b04 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f040 80a5 	bne.w	80069bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	843b      	strh	r3, [r7, #32]
 8006880:	8c3b      	ldrh	r3, [r7, #32]
 8006882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01b      	beq.n	80068c2 <USB_DeactivateEndpoint+0x18a>
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	83fb      	strh	r3, [r7, #30]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	8bfb      	ldrh	r3, [r7, #30]
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	83bb      	strh	r3, [r7, #28]
 80068d0:	8bbb      	ldrh	r3, [r7, #28]
 80068d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01b      	beq.n	8006912 <USB_DeactivateEndpoint+0x1da>
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f0:	837b      	strh	r3, [r7, #26]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	8b7b      	ldrh	r3, [r7, #26]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	833b      	strh	r3, [r7, #24]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	441a      	add	r2, r3
 8006934:	8b3b      	ldrh	r3, [r7, #24]
 8006936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006946:	b29b      	uxth	r3, r3
 8006948:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	82fb      	strh	r3, [r7, #22]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	8afb      	ldrh	r3, [r7, #22]
 800696e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697e:	b29b      	uxth	r3, r3
 8006980:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006998:	82bb      	strh	r3, [r7, #20]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	8abb      	ldrh	r3, [r7, #20]
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
 80069ba:	e0a3      	b.n	8006b04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01b      	beq.n	8006a0c <USB_DeactivateEndpoint+0x2d4>
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <USB_DeactivateEndpoint+0x324>
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	441a      	add	r2, r3
 8006a7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	441a      	add	r2, r3
 8006ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	441a      	add	r2, r3
 8006aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3734      	adds	r7, #52	; 0x34
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b0cc      	sub	sp, #304	; 0x130
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b1e:	6018      	str	r0, [r3, #0]
 8006b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b28:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	f041 817d 	bne.w	8007e36 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d908      	bls.n	8006b6a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006b68:	e007      	b.n	8006b7a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	7b1b      	ldrb	r3, [r3, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d152      	bne.n	8006c30 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6959      	ldr	r1, [r3, #20]
 8006b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	88da      	ldrh	r2, [r3, #6]
 8006ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bb0:	6800      	ldr	r0, [r0, #0]
 8006bb2:	f001 ff23 	bl	80089fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006bbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bc2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	601a      	str	r2, [r3, #0]
 8006bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006be4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006be8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	440a      	add	r2, r1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	011a      	lsls	r2, r3, #4
 8006c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	f001 b8b5 	b.w	8007d9a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	f040 84c6 	bne.w	80075ce <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	f240 8443 	bls.w	80074e6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 823e 	beq.w	800717e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 809a 	bne.w	8006e5c <USB_EPStartXfer+0x34c>
 8006d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d38:	6812      	ldr	r2, [r2, #0]
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d5a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	440a      	add	r2, r1
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	011a      	lsls	r2, r3, #4
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d122      	bne.n	8006dda <USB_EPStartXfer+0x2ca>
 8006d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	e079      	b.n	8006ece <USB_EPStartXfer+0x3be>
 8006dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dde:	2b3e      	cmp	r3, #62	; 0x3e
 8006de0:	d81b      	bhi.n	8006e1a <USB_EPStartXfer+0x30a>
 8006de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d004      	beq.n	8006e02 <USB_EPStartXfer+0x2f2>
 8006df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	029b      	lsls	r3, r3, #10
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e059      	b.n	8006ece <USB_EPStartXfer+0x3be>
 8006e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d104      	bne.n	8006e3a <USB_EPStartXfer+0x32a>
 8006e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e34:	3b01      	subs	r3, #1
 8006e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e038      	b.n	8006ece <USB_EPStartXfer+0x3be>
 8006e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d130      	bne.n	8006ece <USB_EPStartXfer+0x3be>
 8006e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006e86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e8a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	440a      	add	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	011a      	lsls	r2, r3, #4
 8006ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	895b      	ldrh	r3, [r3, #10]
 8006eda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6959      	ldr	r1, [r3, #20]
 8006eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ef4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ef8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006efc:	6800      	ldr	r0, [r0, #0]
 8006efe:	f001 fd7d 	bl	80089fc <USB_WritePMA>
            ep->xfer_buff += len;
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f12:	441a      	add	r2, r3
 8006f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6a1a      	ldr	r2, [r3, #32]
 8006f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d90f      	bls.n	8006f5c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6a1a      	ldr	r2, [r3, #32]
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	621a      	str	r2, [r3, #32]
 8006f5a:	e00e      	b.n	8006f7a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2200      	movs	r2, #0
 8006f78:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 809a 	bne.w	80070c0 <USB_EPStartXfer+0x5b0>
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006f94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006fba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fbe:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	011a      	lsls	r2, r3, #4
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d122      	bne.n	800703e <USB_EPStartXfer+0x52e>
 8006ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800700a:	b29a      	uxth	r2, r3
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702e:	b29a      	uxth	r2, r3
 8007030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007034:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	801a      	strh	r2, [r3, #0]
 800703c:	e083      	b.n	8007146 <USB_EPStartXfer+0x636>
 800703e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007042:	2b3e      	cmp	r3, #62	; 0x3e
 8007044:	d81b      	bhi.n	800707e <USB_EPStartXfer+0x56e>
 8007046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <USB_EPStartXfer+0x556>
 800705c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007060:	3301      	adds	r3, #1
 8007062:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007066:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800706a:	b29b      	uxth	r3, r3
 800706c:	029b      	lsls	r3, r3, #10
 800706e:	b29a      	uxth	r2, r3
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e063      	b.n	8007146 <USB_EPStartXfer+0x636>
 800707e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <USB_EPStartXfer+0x58e>
 8007094:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007098:	3b01      	subs	r3, #1
 800709a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800709e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	e042      	b.n	8007146 <USB_EPStartXfer+0x636>
 80070c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d13a      	bne.n	8007146 <USB_EPStartXfer+0x636>
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80070d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4619      	mov	r1, r3
 80070f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80070fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007102:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	440a      	add	r2, r1
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	011a      	lsls	r2, r3, #4
 800711a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4413      	add	r3, r2
 8007126:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007138:	b29a      	uxth	r2, r3
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	891b      	ldrh	r3, [r3, #8]
 8007152:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6959      	ldr	r1, [r3, #20]
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	b29b      	uxth	r3, r3
 8007168:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800716c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007170:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007174:	6800      	ldr	r0, [r0, #0]
 8007176:	f001 fc41 	bl	80089fc <USB_WritePMA>
 800717a:	f000 be0e 	b.w	8007d9a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d16d      	bne.n	800726a <USB_EPStartXfer+0x75a>
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	64bb      	str	r3, [r7, #72]	; 0x48
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ae:	4413      	add	r3, r2
 80071b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	011a      	lsls	r2, r3, #4
 80071c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c2:	4413      	add	r3, r2
 80071c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071c8:	647b      	str	r3, [r7, #68]	; 0x44
 80071ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d112      	bne.n	80071f8 <USB_EPStartXfer+0x6e8>
 80071d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	e063      	b.n	80072c0 <USB_EPStartXfer+0x7b0>
 80071f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fc:	2b3e      	cmp	r3, #62	; 0x3e
 80071fe:	d817      	bhi.n	8007230 <USB_EPStartXfer+0x720>
 8007200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800720a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <USB_EPStartXfer+0x710>
 8007216:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800721a:	3301      	adds	r3, #1
 800721c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007220:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007224:	b29b      	uxth	r3, r3
 8007226:	029b      	lsls	r3, r3, #10
 8007228:	b29a      	uxth	r2, r3
 800722a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	e047      	b.n	80072c0 <USB_EPStartXfer+0x7b0>
 8007230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800723a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	2b00      	cmp	r3, #0
 8007244:	d104      	bne.n	8007250 <USB_EPStartXfer+0x740>
 8007246:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800724a:	3b01      	subs	r3, #1
 800724c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007250:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007254:	b29b      	uxth	r3, r3
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	b29b      	uxth	r3, r3
 800725a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007262:	b29a      	uxth	r2, r3
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	e02a      	b.n	80072c0 <USB_EPStartXfer+0x7b0>
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d122      	bne.n	80072c0 <USB_EPStartXfer+0x7b0>
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
 8007286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007294:	b29b      	uxth	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800729a:	4413      	add	r3, r2
 800729c:	653b      	str	r3, [r7, #80]	; 0x50
 800729e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	011a      	lsls	r2, r3, #4
 80072ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ae:	4413      	add	r3, r2
 80072b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	891b      	ldrh	r3, [r3, #8]
 80072cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6959      	ldr	r1, [r3, #20]
 80072dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072ee:	6800      	ldr	r0, [r0, #0]
 80072f0:	f001 fb84 	bl	80089fc <USB_WritePMA>
            ep->xfer_buff += len;
 80072f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007304:	441a      	add	r2, r3
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6a1a      	ldr	r2, [r3, #32]
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	429a      	cmp	r2, r3
 800732c:	d90f      	bls.n	800734e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6a1a      	ldr	r2, [r3, #32]
 800733a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733e:	1ad2      	subs	r2, r2, r3
 8007340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	621a      	str	r2, [r3, #32]
 800734c:	e00e      	b.n	800736c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800734e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800735e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2200      	movs	r2, #0
 800736a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d16d      	bne.n	8007464 <USB_EPStartXfer+0x954>
 8007388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	63bb      	str	r3, [r7, #56]	; 0x38
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	4413      	add	r3, r2
 80073aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	011a      	lsls	r2, r3, #4
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	4413      	add	r3, r2
 80073be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
 80073c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d112      	bne.n	80073f2 <USB_EPStartXfer+0x8e2>
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e05d      	b.n	80074ae <USB_EPStartXfer+0x99e>
 80073f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f6:	2b3e      	cmp	r3, #62	; 0x3e
 80073f8:	d817      	bhi.n	800742a <USB_EPStartXfer+0x91a>
 80073fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <USB_EPStartXfer+0x90a>
 8007410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007414:	3301      	adds	r3, #1
 8007416:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800741a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800741e:	b29b      	uxth	r3, r3
 8007420:	029b      	lsls	r3, r3, #10
 8007422:	b29a      	uxth	r2, r3
 8007424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	e041      	b.n	80074ae <USB_EPStartXfer+0x99e>
 800742a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <USB_EPStartXfer+0x93a>
 8007440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007444:	3b01      	subs	r3, #1
 8007446:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800744a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800744e:	b29b      	uxth	r3, r3
 8007450:	029b      	lsls	r3, r3, #10
 8007452:	b29b      	uxth	r3, r3
 8007454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745c:	b29a      	uxth	r2, r3
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	e024      	b.n	80074ae <USB_EPStartXfer+0x99e>
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	785b      	ldrb	r3, [r3, #1]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d11c      	bne.n	80074ae <USB_EPStartXfer+0x99e>
 8007474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007482:	b29b      	uxth	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007488:	4413      	add	r3, r2
 800748a:	643b      	str	r3, [r7, #64]	; 0x40
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	011a      	lsls	r2, r3, #4
 800749a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749c:	4413      	add	r3, r2
 800749e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	895b      	ldrh	r3, [r3, #10]
 80074ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6959      	ldr	r1, [r3, #20]
 80074ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f001 fa8d 	bl	80089fc <USB_WritePMA>
 80074e2:	f000 bc5a 	b.w	8007d9a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	441a      	add	r2, r3
 800753a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800753e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800754a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800754e:	b29b      	uxth	r3, r3
 8007550:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800755e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007562:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756c:	b29b      	uxth	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007572:	4413      	add	r3, r2
 8007574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	011a      	lsls	r2, r3, #4
 8007584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007586:	4413      	add	r3, r2
 8007588:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800758c:	65bb      	str	r3, [r7, #88]	; 0x58
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	b29a      	uxth	r2, r3
 8007594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007596:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	891b      	ldrh	r3, [r3, #8]
 80075a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6959      	ldr	r1, [r3, #20]
 80075b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075c6:	6800      	ldr	r0, [r0, #0]
 80075c8:	f001 fa18 	bl	80089fc <USB_WritePMA>
 80075cc:	e3e5      	b.n	8007d9a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80075ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80075f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	441a      	add	r2, r3
 8007612:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007626:	b29b      	uxth	r3, r3
 8007628:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6a1a      	ldr	r2, [r3, #32]
 8007636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 81bc 	beq.w	80079e8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d16d      	bne.n	800776a <USB_EPStartXfer+0xc5a>
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	67bb      	str	r3, [r7, #120]	; 0x78
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ae:	4413      	add	r3, r2
 80076b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	011a      	lsls	r2, r3, #4
 80076c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c2:	4413      	add	r3, r2
 80076c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076c8:	677b      	str	r3, [r7, #116]	; 0x74
 80076ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d112      	bne.n	80076f8 <USB_EPStartXfer+0xbe8>
 80076d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076dc:	b29a      	uxth	r2, r3
 80076de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f4:	801a      	strh	r2, [r3, #0]
 80076f6:	e060      	b.n	80077ba <USB_EPStartXfer+0xcaa>
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	2b3e      	cmp	r3, #62	; 0x3e
 80076fe:	d817      	bhi.n	8007730 <USB_EPStartXfer+0xc20>
 8007700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800770a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USB_EPStartXfer+0xc10>
 8007716:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800771a:	3301      	adds	r3, #1
 800771c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007720:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007724:	b29b      	uxth	r3, r3
 8007726:	029b      	lsls	r3, r3, #10
 8007728:	b29a      	uxth	r2, r3
 800772a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	e044      	b.n	80077ba <USB_EPStartXfer+0xcaa>
 8007730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800773a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773e:	f003 031f 	and.w	r3, r3, #31
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <USB_EPStartXfer+0xc40>
 8007746:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800774a:	3b01      	subs	r3, #1
 800774c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007750:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007754:	b29b      	uxth	r3, r3
 8007756:	029b      	lsls	r3, r3, #10
 8007758:	b29b      	uxth	r3, r3
 800775a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800775e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007762:	b29a      	uxth	r2, r3
 8007764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	e027      	b.n	80077ba <USB_EPStartXfer+0xcaa>
 800776a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d11f      	bne.n	80077ba <USB_EPStartXfer+0xcaa>
 800777a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007788:	b29b      	uxth	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007790:	4413      	add	r3, r2
 8007792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	011a      	lsls	r2, r3, #4
 80077a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	895b      	ldrh	r3, [r3, #10]
 80077c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6959      	ldr	r1, [r3, #20]
 80077d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077e8:	6800      	ldr	r0, [r0, #0]
 80077ea:	f001 f907 	bl	80089fc <USB_WritePMA>
          ep->xfer_buff += len;
 80077ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695a      	ldr	r2, [r3, #20]
 80077fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fe:	441a      	add	r2, r3
 8007800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800780c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a1a      	ldr	r2, [r3, #32]
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d90f      	bls.n	8007848 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6a1a      	ldr	r2, [r3, #32]
 8007834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	621a      	str	r2, [r3, #32]
 8007846:	e00e      	b.n	8007866 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8295 	beq.w	8007d9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d16d      	bne.n	800795c <USB_EPStartXfer+0xe4c>
 8007880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	66bb      	str	r3, [r7, #104]	; 0x68
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789a:	b29b      	uxth	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078a0:	4413      	add	r3, r2
 80078a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	011a      	lsls	r2, r3, #4
 80078b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078b4:	4413      	add	r3, r2
 80078b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ba:	667b      	str	r3, [r7, #100]	; 0x64
 80078bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d112      	bne.n	80078ea <USB_EPStartXfer+0xdda>
 80078c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d2:	801a      	strh	r2, [r3, #0]
 80078d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	e063      	b.n	80079b2 <USB_EPStartXfer+0xea2>
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ee:	2b3e      	cmp	r3, #62	; 0x3e
 80078f0:	d817      	bhi.n	8007922 <USB_EPStartXfer+0xe12>
 80078f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80078fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <USB_EPStartXfer+0xe02>
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790c:	3301      	adds	r3, #1
 800790e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007916:	b29b      	uxth	r3, r3
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	b29a      	uxth	r2, r3
 800791c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e047      	b.n	80079b2 <USB_EPStartXfer+0xea2>
 8007922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800792c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <USB_EPStartXfer+0xe32>
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793c:	3b01      	subs	r3, #1
 800793e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29b      	uxth	r3, r3
 800794c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007954:	b29a      	uxth	r2, r3
 8007956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	e02a      	b.n	80079b2 <USB_EPStartXfer+0xea2>
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d122      	bne.n	80079b2 <USB_EPStartXfer+0xea2>
 800796c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	673b      	str	r3, [r7, #112]	; 0x70
 8007978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007986:	b29b      	uxth	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800798c:	4413      	add	r3, r2
 800798e:	673b      	str	r3, [r7, #112]	; 0x70
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	011a      	lsls	r2, r3, #4
 800799e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079a0:	4413      	add	r3, r2
 80079a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	891b      	ldrh	r3, [r3, #8]
 80079be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6959      	ldr	r1, [r3, #20]
 80079ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80079dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80079e0:	6800      	ldr	r0, [r0, #0]
 80079e2:	f001 f80b 	bl	80089fc <USB_WritePMA>
 80079e6:	e1d8      	b.n	8007d9a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d178      	bne.n	8007aea <USB_EPStartXfer+0xfda>
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	011a      	lsls	r2, r3, #4
 8007a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a34:	4413      	add	r3, r2
 8007a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d116      	bne.n	8007a74 <USB_EPStartXfer+0xf64>
 8007a46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e06b      	b.n	8007b4c <USB_EPStartXfer+0x103c>
 8007a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a78:	2b3e      	cmp	r3, #62	; 0x3e
 8007a7a:	d818      	bhi.n	8007aae <USB_EPStartXfer+0xf9e>
 8007a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <USB_EPStartXfer+0xf8c>
 8007a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a96:	3301      	adds	r3, #1
 8007a98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	029b      	lsls	r3, r3, #10
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e04e      	b.n	8007b4c <USB_EPStartXfer+0x103c>
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <USB_EPStartXfer+0xfbe>
 8007ac4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ace:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	029b      	lsls	r3, r3, #10
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	e030      	b.n	8007b4c <USB_EPStartXfer+0x103c>
 8007aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d128      	bne.n	8007b4c <USB_EPStartXfer+0x103c>
 8007afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b1e:	4413      	add	r3, r2
 8007b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	011a      	lsls	r2, r3, #4
 8007b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b36:	4413      	add	r3, r2
 8007b38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	891b      	ldrh	r3, [r3, #8]
 8007b58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6959      	ldr	r1, [r3, #20]
 8007b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b72:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b76:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	f000 ff3e 	bl	80089fc <USB_WritePMA>
          ep->xfer_buff += len;
 8007b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695a      	ldr	r2, [r3, #20]
 8007b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b90:	441a      	add	r2, r3
 8007b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d90f      	bls.n	8007bda <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a1a      	ldr	r2, [r3, #32]
 8007bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bca:	1ad2      	subs	r2, r2, r3
 8007bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	621a      	str	r2, [r3, #32]
 8007bd8:	e00e      	b.n	8007bf8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 80cc 	beq.w	8007d9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d178      	bne.n	8007d12 <USB_EPStartXfer+0x1202>
 8007c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c44:	4413      	add	r3, r2
 8007c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	011a      	lsls	r2, r3, #4
 8007c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d116      	bne.n	8007c9c <USB_EPStartXfer+0x118c>
 8007c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c80:	801a      	strh	r2, [r3, #0]
 8007c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c98:	801a      	strh	r2, [r3, #0]
 8007c9a:	e064      	b.n	8007d66 <USB_EPStartXfer+0x1256>
 8007c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca2:	d818      	bhi.n	8007cd6 <USB_EPStartXfer+0x11c6>
 8007ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d004      	beq.n	8007cc4 <USB_EPStartXfer+0x11b4>
 8007cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	029b      	lsls	r3, r3, #10
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	e047      	b.n	8007d66 <USB_EPStartXfer+0x1256>
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <USB_EPStartXfer+0x11e6>
 8007cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	029b      	lsls	r3, r3, #10
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	e029      	b.n	8007d66 <USB_EPStartXfer+0x1256>
 8007d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d121      	bne.n	8007d66 <USB_EPStartXfer+0x1256>
 8007d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	461a      	mov	r2, r3
 8007d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d38:	4413      	add	r3, r2
 8007d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	011a      	lsls	r2, r3, #4
 8007d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	895b      	ldrh	r3, [r3, #10]
 8007d72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6959      	ldr	r1, [r3, #20]
 8007d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d94:	6800      	ldr	r0, [r0, #0]
 8007d96:	f000 fe31 	bl	80089fc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dbc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc8:	8013      	strh	r3, [r2, #0]
 8007dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dce:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007dd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dd6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007dda:	8812      	ldrh	r2, [r2, #0]
 8007ddc:	f082 0210 	eor.w	r2, r2, #16
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007dea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007df2:	8812      	ldrh	r2, [r2, #0]
 8007df4:	f082 0220 	eor.w	r2, r2, #32
 8007df8:	801a      	strh	r2, [r3, #0]
 8007dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	441a      	add	r2, r3
 8007e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e18:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	8013      	strh	r3, [r2, #0]
 8007e32:	f000 bc9f 	b.w	8008774 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	7b1b      	ldrb	r3, [r3, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 80ae 	bne.w	8007fa4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d917      	bls.n	8007e94 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	619a      	str	r2, [r3, #24]
 8007e92:	e00e      	b.n	8007eb2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	011a      	lsls	r2, r3, #4
 8007eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007eee:	4413      	add	r3, r2
 8007ef0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d116      	bne.n	8007f2e <USB_EPStartXfer+0x141e>
 8007f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	e3e8      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
 8007f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f32:	2b3e      	cmp	r3, #62	; 0x3e
 8007f34:	d818      	bhi.n	8007f68 <USB_EPStartXfer+0x1458>
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <USB_EPStartXfer+0x1446>
 8007f4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f50:	3301      	adds	r3, #1
 8007f52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	029b      	lsls	r3, r3, #10
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	e3cb      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
 8007f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d104      	bne.n	8007f88 <USB_EPStartXfer+0x1478>
 8007f7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f82:	3b01      	subs	r3, #1
 8007f84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	029b      	lsls	r3, r3, #10
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	e3ad      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	78db      	ldrb	r3, [r3, #3]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	f040 8200 	bne.w	80083b6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f040 8091 	bne.w	80080ea <USB_EPStartXfer+0x15da>
 8007fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007fec:	4413      	add	r3, r2
 8007fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	011a      	lsls	r2, r3, #4
 8008000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008004:	4413      	add	r3, r2
 8008006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800800a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800800e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d116      	bne.n	800804c <USB_EPStartXfer+0x153c>
 800801e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800802a:	b29a      	uxth	r2, r3
 800802c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008042:	b29a      	uxth	r2, r3
 8008044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	e083      	b.n	8008154 <USB_EPStartXfer+0x1644>
 800804c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b3e      	cmp	r3, #62	; 0x3e
 800805a:	d820      	bhi.n	800809e <USB_EPStartXfer+0x158e>
 800805c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800806e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <USB_EPStartXfer+0x157c>
 8008082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008086:	3301      	adds	r3, #1
 8008088:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008090:	b29b      	uxth	r3, r3
 8008092:	029b      	lsls	r3, r3, #10
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	e05a      	b.n	8008154 <USB_EPStartXfer+0x1644>
 800809e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f003 031f 	and.w	r3, r3, #31
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <USB_EPStartXfer+0x15be>
 80080c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c8:	3b01      	subs	r3, #1
 80080ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	029b      	lsls	r3, r3, #10
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080e6:	801a      	strh	r2, [r3, #0]
 80080e8:	e034      	b.n	8008154 <USB_EPStartXfer+0x1644>
 80080ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d12c      	bne.n	8008154 <USB_EPStartXfer+0x1644>
 80080fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008116:	b29b      	uxth	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800811e:	4413      	add	r3, r2
 8008120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	011a      	lsls	r2, r3, #4
 8008132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008136:	4413      	add	r3, r2
 8008138:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800813c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	b29a      	uxth	r2, r3
 800814e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f040 8091 	bne.w	8008296 <USB_EPStartXfer+0x1786>
 8008174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008186:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008190:	b29b      	uxth	r3, r3
 8008192:	461a      	mov	r2, r3
 8008194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008198:	4413      	add	r3, r2
 800819a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800819e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	011a      	lsls	r2, r3, #4
 80081ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80081b0:	4413      	add	r3, r2
 80081b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d116      	bne.n	80081f8 <USB_EPStartXfer+0x16e8>
 80081ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081f4:	801a      	strh	r2, [r3, #0]
 80081f6:	e07c      	b.n	80082f2 <USB_EPStartXfer+0x17e2>
 80081f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	2b3e      	cmp	r3, #62	; 0x3e
 8008206:	d820      	bhi.n	800824a <USB_EPStartXfer+0x173a>
 8008208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	085b      	lsrs	r3, r3, #1
 8008216:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800821a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <USB_EPStartXfer+0x1728>
 800822e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008232:	3301      	adds	r3, #1
 8008234:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008238:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800823c:	b29b      	uxth	r3, r3
 800823e:	029b      	lsls	r3, r3, #10
 8008240:	b29a      	uxth	r2, r3
 8008242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	e053      	b.n	80082f2 <USB_EPStartXfer+0x17e2>
 800824a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800825c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f003 031f 	and.w	r3, r3, #31
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <USB_EPStartXfer+0x176a>
 8008270:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008274:	3b01      	subs	r3, #1
 8008276:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800827a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800827e:	b29b      	uxth	r3, r3
 8008280:	029b      	lsls	r3, r3, #10
 8008282:	b29b      	uxth	r3, r3
 8008284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800828c:	b29a      	uxth	r2, r3
 800828e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	e02d      	b.n	80082f2 <USB_EPStartXfer+0x17e2>
 8008296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d125      	bne.n	80082f2 <USB_EPStartXfer+0x17e2>
 80082a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082bc:	4413      	add	r3, r2
 80082be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	011a      	lsls	r2, r3, #4
 80082d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80082d4:	4413      	add	r3, r2
 80082d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 81fe 	beq.w	8008700 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008308:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008324:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <USB_EPStartXfer+0x182c>
 8008330:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10d      	bne.n	8008358 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800833c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008344:	2b00      	cmp	r3, #0
 8008346:	f040 81db 	bne.w	8008700 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800834a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	f040 81d4 	bne.w	8008700 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	441a      	add	r2, r3
 800839c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80083a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	8013      	strh	r3, [r2, #0]
 80083b4:	e1a4      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80083b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	78db      	ldrb	r3, [r3, #3]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	f040 819a 	bne.w	80086fc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80083c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	699a      	ldr	r2, [r3, #24]
 80083d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d917      	bls.n	8008414 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80083e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80083f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699a      	ldr	r2, [r3, #24]
 8008400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	619a      	str	r2, [r3, #24]
 8008412:	e00e      	b.n	8008432 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2200      	movs	r2, #0
 8008430:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d178      	bne.n	8008534 <USB_EPStartXfer+0x1a24>
 8008442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845e:	b29b      	uxth	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008466:	4413      	add	r3, r2
 8008468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800846c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	011a      	lsls	r2, r3, #4
 800847a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800847e:	4413      	add	r3, r2
 8008480:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d116      	bne.n	80084be <USB_EPStartXfer+0x19ae>
 8008490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800849c:	b29a      	uxth	r2, r3
 800849e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e06b      	b.n	8008596 <USB_EPStartXfer+0x1a86>
 80084be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c2:	2b3e      	cmp	r3, #62	; 0x3e
 80084c4:	d818      	bhi.n	80084f8 <USB_EPStartXfer+0x19e8>
 80084c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ca:	085b      	lsrs	r3, r3, #1
 80084cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <USB_EPStartXfer+0x19d6>
 80084dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e0:	3301      	adds	r3, #1
 80084e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	029b      	lsls	r3, r3, #10
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	e04e      	b.n	8008596 <USB_EPStartXfer+0x1a86>
 80084f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <USB_EPStartXfer+0x1a08>
 800850e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008512:	3b01      	subs	r3, #1
 8008514:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800851c:	b29b      	uxth	r3, r3
 800851e:	029b      	lsls	r3, r3, #10
 8008520:	b29b      	uxth	r3, r3
 8008522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852a:	b29a      	uxth	r2, r3
 800852c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	e030      	b.n	8008596 <USB_EPStartXfer+0x1a86>
 8008534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	785b      	ldrb	r3, [r3, #1]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d128      	bne.n	8008596 <USB_EPStartXfer+0x1a86>
 8008544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008560:	b29b      	uxth	r3, r3
 8008562:	461a      	mov	r2, r3
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	4413      	add	r3, r2
 800856a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	011a      	lsls	r2, r3, #4
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008580:	4413      	add	r3, r2
 8008582:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008586:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800858a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858e:	b29a      	uxth	r2, r3
 8008590:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d178      	bne.n	80086a6 <USB_EPStartXfer+0x1b96>
 80085b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d8:	4413      	add	r3, r2
 80085da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	011a      	lsls	r2, r3, #4
 80085ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085f0:	4413      	add	r3, r2
 80085f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d116      	bne.n	8008630 <USB_EPStartXfer+0x1b20>
 8008602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	b29b      	uxth	r3, r3
 800861e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008626:	b29a      	uxth	r2, r3
 8008628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e067      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
 8008630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008634:	2b3e      	cmp	r3, #62	; 0x3e
 8008636:	d818      	bhi.n	800866a <USB_EPStartXfer+0x1b5a>
 8008638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863c:	085b      	lsrs	r3, r3, #1
 800863e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <USB_EPStartXfer+0x1b48>
 800864e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008652:	3301      	adds	r3, #1
 8008654:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800865c:	b29b      	uxth	r3, r3
 800865e:	029b      	lsls	r3, r3, #10
 8008660:	b29a      	uxth	r2, r3
 8008662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008666:	801a      	strh	r2, [r3, #0]
 8008668:	e04a      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
 800866a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008678:	f003 031f 	and.w	r3, r3, #31
 800867c:	2b00      	cmp	r3, #0
 800867e:	d104      	bne.n	800868a <USB_EPStartXfer+0x1b7a>
 8008680:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008684:	3b01      	subs	r3, #1
 8008686:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800868a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800868e:	b29b      	uxth	r3, r3
 8008690:	029b      	lsls	r3, r3, #10
 8008692:	b29b      	uxth	r3, r3
 8008694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800869c:	b29a      	uxth	r2, r3
 800869e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	e02c      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
 80086a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d124      	bne.n	8008700 <USB_EPStartXfer+0x1bf0>
 80086b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086cc:	4413      	add	r3, r2
 80086ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	011a      	lsls	r2, r3, #4
 80086e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e4:	4413      	add	r3, r2
 80086e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f8:	801a      	strh	r2, [r3, #0]
 80086fa:	e001      	b.n	8008700 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e03a      	b.n	8008776 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29b      	uxth	r3, r3
 800871e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800872a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800872e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008732:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008736:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800873a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800873e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	441a      	add	r2, r3
 800875c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800876c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008770:	b29b      	uxth	r3, r3
 8008772:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d020      	beq.n	80087d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a8:	81bb      	strh	r3, [r7, #12]
 80087aa:	89bb      	ldrh	r3, [r7, #12]
 80087ac:	f083 0310 	eor.w	r3, r3, #16
 80087b0:	81bb      	strh	r3, [r7, #12]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	441a      	add	r2, r3
 80087bc:	89bb      	ldrh	r3, [r7, #12]
 80087be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	8013      	strh	r3, [r2, #0]
 80087d2:	e01f      	b.n	8008814 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ea:	81fb      	strh	r3, [r7, #14]
 80087ec:	89fb      	ldrh	r3, [r7, #14]
 80087ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087f2:	81fb      	strh	r3, [r7, #14]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	441a      	add	r2, r3
 80087fe:	89fb      	ldrh	r3, [r7, #14]
 8008800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008810:	b29b      	uxth	r3, r3
 8008812:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr

08008820 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	7b1b      	ldrb	r3, [r3, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f040 809d 	bne.w	800896e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d04c      	beq.n	80088d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	823b      	strh	r3, [r7, #16]
 800884a:	8a3b      	ldrh	r3, [r7, #16]
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01b      	beq.n	800888c <USB_EPClearStall+0x6c>
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29b      	uxth	r3, r3
 8008862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886a:	81fb      	strh	r3, [r7, #14]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	441a      	add	r2, r3
 8008876:	89fb      	ldrh	r3, [r7, #14]
 8008878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800887c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008888:	b29b      	uxth	r3, r3
 800888a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	78db      	ldrb	r3, [r3, #3]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d06c      	beq.n	800896e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	81bb      	strh	r3, [r7, #12]
 80088ac:	89bb      	ldrh	r3, [r7, #12]
 80088ae:	f083 0320 	eor.w	r3, r3, #32
 80088b2:	81bb      	strh	r3, [r7, #12]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	441a      	add	r2, r3
 80088be:	89bb      	ldrh	r3, [r7, #12]
 80088c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	8013      	strh	r3, [r2, #0]
 80088d4:	e04b      	b.n	800896e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	82fb      	strh	r3, [r7, #22]
 80088e4:	8afb      	ldrh	r3, [r7, #22]
 80088e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01b      	beq.n	8008926 <USB_EPClearStall+0x106>
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008904:	82bb      	strh	r3, [r7, #20]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	441a      	add	r2, r3
 8008910:	8abb      	ldrh	r3, [r7, #20]
 8008912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800891a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800891e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008922:	b29b      	uxth	r3, r3
 8008924:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893c:	827b      	strh	r3, [r7, #18]
 800893e:	8a7b      	ldrh	r3, [r7, #18]
 8008940:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008944:	827b      	strh	r3, [r7, #18]
 8008946:	8a7b      	ldrh	r3, [r7, #18]
 8008948:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800894c:	827b      	strh	r3, [r7, #18]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	441a      	add	r2, r3
 8008958:	8a7b      	ldrh	r3, [r7, #18]
 800895a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896a:	b29b      	uxth	r3, r3
 800896c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr

0800897a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2280      	movs	r2, #128	; 0x80
 8008990:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr

080089a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr

080089b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80089da:	68fb      	ldr	r3, [r7, #12]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bc80      	pop	{r7}
 80089e4:	4770      	bx	lr

080089e6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr

080089fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b08d      	sub	sp, #52	; 0x34
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4611      	mov	r1, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	80fb      	strh	r3, [r7, #6]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a12:	88bb      	ldrh	r3, [r7, #4]
 8008a14:	3301      	adds	r3, #1
 8008a16:	085b      	lsrs	r3, r3, #1
 8008a18:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	005a      	lsls	r2, r3, #1
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a34:	e01e      	b.n	8008a74 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	3301      	adds	r3, #1
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	3302      	adds	r3, #2
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	3302      	adds	r3, #2
 8008a66:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	3b01      	subs	r3, #1
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1dd      	bne.n	8008a36 <USB_WritePMA+0x3a>
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	3734      	adds	r7, #52	; 0x34
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr

08008a86 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b08b      	sub	sp, #44	; 0x2c
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	4611      	mov	r1, r2
 8008a92:	461a      	mov	r2, r3
 8008a94:	460b      	mov	r3, r1
 8008a96:	80fb      	strh	r3, [r7, #6]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a9c:	88bb      	ldrh	r3, [r7, #4]
 8008a9e:	085b      	lsrs	r3, r3, #1
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008aac:	88fb      	ldrh	r3, [r7, #6]
 8008aae:	005a      	lsls	r2, r3, #1
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ab8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
 8008abe:	e01b      	b.n	8008af8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	3302      	adds	r3, #2
 8008acc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	0a1b      	lsrs	r3, r3, #8
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	3302      	adds	r3, #2
 8008af0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	3b01      	subs	r3, #1
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e0      	bne.n	8008ac0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008afe:	88bb      	ldrh	r3, [r7, #4]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d007      	beq.n	8008b1a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	701a      	strb	r2, [r3, #0]
  }
}
 8008b1a:	bf00      	nop
 8008b1c:	372c      	adds	r7, #44	; 0x2c
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7c1b      	ldrb	r3, [r3, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d115      	bne.n	8008b68 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b40:	2202      	movs	r2, #2
 8008b42:	2181      	movs	r1, #129	; 0x81
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 feac 	bl	800a8a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b54:	2202      	movs	r2, #2
 8008b56:	2101      	movs	r1, #1
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f001 fea2 	bl	800a8a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008b66:	e012      	b.n	8008b8e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b68:	2340      	movs	r3, #64	; 0x40
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	2181      	movs	r1, #129	; 0x81
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fe97 	bl	800a8a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b7a:	2340      	movs	r3, #64	; 0x40
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	2101      	movs	r1, #1
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 fe8e 	bl	800a8a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b8e:	2308      	movs	r3, #8
 8008b90:	2203      	movs	r2, #3
 8008b92:	2182      	movs	r1, #130	; 0x82
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 fe84 	bl	800a8a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ba0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ba4:	f001 ffa4 	bl	800aaf0 <USBD_static_malloc>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	73fb      	strb	r3, [r7, #15]
 8008bbe:	e026      	b.n	8008c0e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	7c1b      	ldrb	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d109      	bne.n	8008bfe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 ff44 	bl	800aa84 <USBD_LL_PrepareReceive>
 8008bfc:	e007      	b.n	8008c0e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c04:	2340      	movs	r3, #64	; 0x40
 8008c06:	2101      	movs	r1, #1
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 ff3b 	bl	800aa84 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008c28:	2181      	movs	r1, #129	; 0x81
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 fe5f 	bl	800a8ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c36:	2101      	movs	r1, #1
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 fe58 	bl	800a8ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c46:	2182      	movs	r1, #130	; 0x82
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 fe50 	bl	800a8ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00e      	beq.n	8008c7c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f001 ff4a 	bl	800ab08 <USBD_static_free>
    pdev->pClassData = NULL;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b086      	sub	sp, #24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c96:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d039      	beq.n	8008d24 <USBD_CDC_Setup+0x9e>
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d17f      	bne.n	8008db4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	88db      	ldrh	r3, [r3, #6]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d029      	beq.n	8008d10 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	b25b      	sxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da11      	bge.n	8008cea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008cd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	88d2      	ldrh	r2, [r2, #6]
 8008cd8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008cda:	6939      	ldr	r1, [r7, #16]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	88db      	ldrh	r3, [r3, #6]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fa09 	bl	800a0fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008ce8:	e06b      	b.n	8008dc2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	785a      	ldrb	r2, [r3, #1]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	88db      	ldrh	r3, [r3, #6]
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d00:	6939      	ldr	r1, [r7, #16]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	88db      	ldrh	r3, [r3, #6]
 8008d06:	461a      	mov	r2, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 fa24 	bl	800a156 <USBD_CtlPrepareRx>
      break;
 8008d0e:	e058      	b.n	8008dc2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	7850      	ldrb	r0, [r2, #1]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	4798      	blx	r3
      break;
 8008d22:	e04e      	b.n	8008dc2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	2b0b      	cmp	r3, #11
 8008d2a:	d02e      	beq.n	8008d8a <USBD_CDC_Setup+0x104>
 8008d2c:	2b0b      	cmp	r3, #11
 8008d2e:	dc38      	bgt.n	8008da2 <USBD_CDC_Setup+0x11c>
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <USBD_CDC_Setup+0xb4>
 8008d34:	2b0a      	cmp	r3, #10
 8008d36:	d014      	beq.n	8008d62 <USBD_CDC_Setup+0xdc>
 8008d38:	e033      	b.n	8008da2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d40:	2b03      	cmp	r3, #3
 8008d42:	d107      	bne.n	8008d54 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008d44:	f107 030c 	add.w	r3, r7, #12
 8008d48:	2202      	movs	r2, #2
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f9d4 	bl	800a0fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d52:	e02e      	b.n	8008db2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 f965 	bl	800a026 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	75fb      	strb	r3, [r7, #23]
          break;
 8008d60:	e027      	b.n	8008db2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d107      	bne.n	8008d7c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d6c:	f107 030f 	add.w	r3, r7, #15
 8008d70:	2201      	movs	r2, #1
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 f9c0 	bl	800a0fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d7a:	e01a      	b.n	8008db2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 f951 	bl	800a026 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d84:	2302      	movs	r3, #2
 8008d86:	75fb      	strb	r3, [r7, #23]
          break;
 8008d88:	e013      	b.n	8008db2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d00d      	beq.n	8008db0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 f945 	bl	800a026 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008da0:	e006      	b.n	8008db0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 f93e 	bl	800a026 <USBD_CtlError>
          ret = USBD_FAIL;
 8008daa:	2302      	movs	r3, #2
 8008dac:	75fb      	strb	r3, [r7, #23]
          break;
 8008dae:	e000      	b.n	8008db2 <USBD_CDC_Setup+0x12c>
          break;
 8008db0:	bf00      	nop
      }
      break;
 8008db2:	e006      	b.n	8008dc2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 f935 	bl	800a026 <USBD_CtlError>
      ret = USBD_FAIL;
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc0:	bf00      	nop
  }

  return ret;
 8008dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dde:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008de6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d03a      	beq.n	8008e68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	331c      	adds	r3, #28
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d029      	beq.n	8008e5c <USBD_CDC_DataIn+0x90>
 8008e08:	78fa      	ldrb	r2, [r7, #3]
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	331c      	adds	r3, #28
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	78f9      	ldrb	r1, [r7, #3]
 8008e1c:	68b8      	ldr	r0, [r7, #8]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	440b      	add	r3, r1
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	4403      	add	r3, r0
 8008e28:	3338      	adds	r3, #56	; 0x38
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e30:	fb01 f303 	mul.w	r3, r1, r3
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d110      	bne.n	8008e5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008e3a:	78fa      	ldrb	r2, [r7, #3]
 8008e3c:	6879      	ldr	r1, [r7, #4]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	440b      	add	r3, r1
 8008e48:	331c      	adds	r3, #28
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e4e:	78f9      	ldrb	r1, [r7, #3]
 8008e50:	2300      	movs	r3, #0
 8008e52:	2200      	movs	r2, #0
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 fdf2 	bl	800aa3e <USBD_LL_Transmit>
 8008e5a:	e003      	b.n	8008e64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	e000      	b.n	8008e6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008e68:	2302      	movs	r3, #2
  }
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 fe1d 	bl	800aaca <USBD_LL_GetRxDataSize>
 8008e90:	4602      	mov	r2, r0
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00d      	beq.n	8008ebe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4798      	blx	r3

    return USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e000      	b.n	8008ec0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008ebe:	2302      	movs	r3, #2
  }
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d015      	beq.n	8008f0e <USBD_CDC_EP0_RxReady+0x46>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ee8:	2bff      	cmp	r3, #255	; 0xff
 8008eea:	d010      	beq.n	8008f0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008efa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f02:	b292      	uxth	r2, r2
 8008f04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	22ff      	movs	r2, #255	; 0xff
 8008f0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2243      	movs	r2, #67	; 0x43
 8008f24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008f26:	4b03      	ldr	r3, [pc, #12]	; (8008f34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bc80      	pop	{r7}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000098 	.word	0x20000098

08008f38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2243      	movs	r2, #67	; 0x43
 8008f44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008f46:	4b03      	ldr	r3, [pc, #12]	; (8008f54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	20000054 	.word	0x20000054

08008f58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2243      	movs	r2, #67	; 0x43
 8008f64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008f66:	4b03      	ldr	r3, [pc, #12]	; (8008f74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bc80      	pop	{r7}
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	200000dc 	.word	0x200000dc

08008f78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	220a      	movs	r2, #10
 8008f84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008f86:	4b03      	ldr	r3, [pc, #12]	; (8008f94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bc80      	pop	{r7}
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000010 	.word	0x20000010

08008f98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008fe2:	88fa      	ldrh	r2, [r7, #6]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bc80      	pop	{r7}
 8008ff4:	4770      	bx	lr

08008ff6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009006:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	bc80      	pop	{r7}
 800901a:	4770      	bx	lr

0800901c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800902a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01c      	beq.n	8009070 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800903c:	2b00      	cmp	r3, #0
 800903e:	d115      	bne.n	800906c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2201      	movs	r2, #1
 8009044:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800905e:	b29b      	uxth	r3, r3
 8009060:	2181      	movs	r1, #129	; 0x81
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f001 fceb 	bl	800aa3e <USBD_LL_Transmit>

      return USBD_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	e002      	b.n	8009072 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800906c:	2301      	movs	r3, #1
 800906e:	e000      	b.n	8009072 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009070:	2302      	movs	r3, #2
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009088:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009090:	2b00      	cmp	r3, #0
 8009092:	d017      	beq.n	80090c4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7c1b      	ldrb	r3, [r3, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d109      	bne.n	80090b0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090a6:	2101      	movs	r1, #1
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 fceb 	bl	800aa84 <USBD_LL_PrepareReceive>
 80090ae:	e007      	b.n	80090c0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090b6:	2340      	movs	r3, #64	; 0x40
 80090b8:	2101      	movs	r1, #1
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 fce2 	bl	800aa84 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e000      	b.n	80090c6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80090c4:	2302      	movs	r3, #2
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	4613      	mov	r3, r2
 80090da:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090e2:	2302      	movs	r3, #2
 80090e4:	e01a      	b.n	800911c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	79fa      	ldrb	r2, [r7, #7]
 8009112:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f001 fb4f 	bl	800a7b8 <USBD_LL_Init>

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d006      	beq.n	8009146 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73fb      	strb	r3, [r7, #15]
 8009144:	e001      	b.n	800914a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009146:	2302      	movs	r3, #2
 8009148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800914a:	7bfb      	ldrb	r3, [r7, #15]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	bc80      	pop	{r7}
 8009154:	4770      	bx	lr

08009156 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fb84 	bl	800a86c <USBD_LL_Start>

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	bc80      	pop	{r7}
 8009180:	4770      	bx	lr

08009182 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800918e:	2302      	movs	r3, #2
 8009190:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00c      	beq.n	80091b6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	78fa      	ldrb	r2, [r7, #3]
 80091a6:	4611      	mov	r1, r2
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4798      	blx	r3
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	78fa      	ldrb	r2, [r7, #3]
 80091d6:	4611      	mov	r1, r2
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fed8 	bl	8009fae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800920c:	461a      	mov	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800921a:	f003 031f 	and.w	r3, r3, #31
 800921e:	2b02      	cmp	r3, #2
 8009220:	d016      	beq.n	8009250 <USBD_LL_SetupStage+0x6a>
 8009222:	2b02      	cmp	r3, #2
 8009224:	d81c      	bhi.n	8009260 <USBD_LL_SetupStage+0x7a>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <USBD_LL_SetupStage+0x4a>
 800922a:	2b01      	cmp	r3, #1
 800922c:	d008      	beq.n	8009240 <USBD_LL_SetupStage+0x5a>
 800922e:	e017      	b.n	8009260 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f9cb 	bl	80095d4 <USBD_StdDevReq>
      break;
 800923e:	e01a      	b.n	8009276 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fa2d 	bl	80096a8 <USBD_StdItfReq>
      break;
 800924e:	e012      	b.n	8009276 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fa6d 	bl	8009738 <USBD_StdEPReq>
      break;
 800925e:	e00a      	b.n	8009276 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800926a:	b2db      	uxtb	r3, r3
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 fb5c 	bl	800a92c <USBD_LL_StallEP>
      break;
 8009274:	bf00      	nop
  }

  return USBD_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	460b      	mov	r3, r1
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d14b      	bne.n	800932c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800929a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d134      	bne.n	8009310 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d919      	bls.n	80092e6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	68da      	ldr	r2, [r3, #12]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	1ad2      	subs	r2, r2, r3
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d203      	bcs.n	80092d4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	e002      	b.n	80092da <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092d8:	b29b      	uxth	r3, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 ff57 	bl	800a192 <USBD_CtlContinueRx>
 80092e4:	e038      	b.n	8009358 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d105      	bne.n	8009308 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 ff54 	bl	800a1b6 <USBD_CtlSendStatus>
 800930e:	e023      	b.n	8009358 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009316:	2b05      	cmp	r3, #5
 8009318:	d11e      	bne.n	8009358 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009322:	2100      	movs	r1, #0
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f001 fb01 	bl	800a92c <USBD_LL_StallEP>
 800932a:	e015      	b.n	8009358 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00d      	beq.n	8009354 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800933e:	2b03      	cmp	r3, #3
 8009340:	d108      	bne.n	8009354 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	7afa      	ldrb	r2, [r7, #11]
 800934c:	4611      	mov	r1, r2
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	4798      	blx	r3
 8009352:	e001      	b.n	8009358 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009354:	2302      	movs	r3, #2
 8009356:	e000      	b.n	800935a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	460b      	mov	r3, r1
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d17f      	bne.n	8009476 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3314      	adds	r3, #20
 800937a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009382:	2b02      	cmp	r3, #2
 8009384:	d15c      	bne.n	8009440 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	429a      	cmp	r2, r3
 8009390:	d915      	bls.n	80093be <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fec1 	bl	800a132 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093b0:	2300      	movs	r3, #0
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f001 fb64 	bl	800aa84 <USBD_LL_PrepareReceive>
 80093bc:	e04e      	b.n	800945c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	6912      	ldr	r2, [r2, #16]
 80093c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ca:	fb01 f202 	mul.w	r2, r1, r2
 80093ce:	1a9b      	subs	r3, r3, r2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d11c      	bne.n	800940e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093dc:	429a      	cmp	r2, r3
 80093de:	d316      	bcc.n	800940e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d20f      	bcs.n	800940e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093ee:	2200      	movs	r2, #0
 80093f0:	2100      	movs	r1, #0
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 fe9d 	bl	800a132 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009400:	2300      	movs	r3, #0
 8009402:	2200      	movs	r2, #0
 8009404:	2100      	movs	r1, #0
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f001 fb3c 	bl	800aa84 <USBD_LL_PrepareReceive>
 800940c:	e026      	b.n	800945c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009420:	2b03      	cmp	r3, #3
 8009422:	d105      	bne.n	8009430 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009430:	2180      	movs	r1, #128	; 0x80
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f001 fa7a 	bl	800a92c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fecf 	bl	800a1dc <USBD_CtlReceiveStatus>
 800943e:	e00d      	b.n	800945c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009446:	2b04      	cmp	r3, #4
 8009448:	d004      	beq.n	8009454 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009454:	2180      	movs	r1, #128	; 0x80
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f001 fa68 	bl	800a92c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009462:	2b01      	cmp	r3, #1
 8009464:	d11d      	bne.n	80094a2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f7ff fe81 	bl	800916e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009474:	e015      	b.n	80094a2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00d      	beq.n	800949e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009488:	2b03      	cmp	r3, #3
 800948a:	d108      	bne.n	800949e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	7afa      	ldrb	r2, [r7, #11]
 8009496:	4611      	mov	r1, r2
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	4798      	blx	r3
 800949c:	e001      	b.n	80094a2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800949e:	2302      	movs	r3, #2
 80094a0:	e000      	b.n	80094a4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094b4:	2340      	movs	r3, #64	; 0x40
 80094b6:	2200      	movs	r2, #0
 80094b8:	2100      	movs	r1, #0
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 f9f1 	bl	800a8a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2240      	movs	r2, #64	; 0x40
 80094cc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	2200      	movs	r2, #0
 80094d4:	2180      	movs	r1, #128	; 0x80
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 f9e3 	bl	800a8a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2240      	movs	r2, #64	; 0x40
 80094e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6852      	ldr	r2, [r2, #4]
 800951c:	b2d2      	uxtb	r2, r2
 800951e:	4611      	mov	r1, r2
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	4798      	blx	r3
  }

  return USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	460b      	mov	r3, r1
 8009538:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	78fa      	ldrb	r2, [r7, #3]
 800953e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr

0800954c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2204      	movs	r2, #4
 8009564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009582:	2b04      	cmp	r3, #4
 8009584:	d105      	bne.n	8009592 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	bc80      	pop	{r7}
 800959c:	4770      	bx	lr

0800959e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d10b      	bne.n	80095c8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ea:	2b40      	cmp	r3, #64	; 0x40
 80095ec:	d005      	beq.n	80095fa <USBD_StdDevReq+0x26>
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d84f      	bhi.n	8009692 <USBD_StdDevReq+0xbe>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <USBD_StdDevReq+0x36>
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d14b      	bne.n	8009692 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
      break;
 8009608:	e048      	b.n	800969c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	2b09      	cmp	r3, #9
 8009610:	d839      	bhi.n	8009686 <USBD_StdDevReq+0xb2>
 8009612:	a201      	add	r2, pc, #4	; (adr r2, 8009618 <USBD_StdDevReq+0x44>)
 8009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009618:	08009669 	.word	0x08009669
 800961c:	0800967d 	.word	0x0800967d
 8009620:	08009687 	.word	0x08009687
 8009624:	08009673 	.word	0x08009673
 8009628:	08009687 	.word	0x08009687
 800962c:	0800964b 	.word	0x0800964b
 8009630:	08009641 	.word	0x08009641
 8009634:	08009687 	.word	0x08009687
 8009638:	0800965f 	.word	0x0800965f
 800963c:	08009655 	.word	0x08009655
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f9dc 	bl	8009a00 <USBD_GetDescriptor>
          break;
 8009648:	e022      	b.n	8009690 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fb3f 	bl	8009cd0 <USBD_SetAddress>
          break;
 8009652:	e01d      	b.n	8009690 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fb7e 	bl	8009d58 <USBD_SetConfig>
          break;
 800965c:	e018      	b.n	8009690 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fc07 	bl	8009e74 <USBD_GetConfig>
          break;
 8009666:	e013      	b.n	8009690 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fc37 	bl	8009ede <USBD_GetStatus>
          break;
 8009670:	e00e      	b.n	8009690 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fc65 	bl	8009f44 <USBD_SetFeature>
          break;
 800967a:	e009      	b.n	8009690 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fc74 	bl	8009f6c <USBD_ClrFeature>
          break;
 8009684:	e004      	b.n	8009690 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fccc 	bl	800a026 <USBD_CtlError>
          break;
 800968e:	bf00      	nop
      }
      break;
 8009690:	e004      	b.n	800969c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fcc6 	bl	800a026 <USBD_CtlError>
      break;
 800969a:	bf00      	nop
  }

  return ret;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop

080096a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096be:	2b40      	cmp	r3, #64	; 0x40
 80096c0:	d005      	beq.n	80096ce <USBD_StdItfReq+0x26>
 80096c2:	2b40      	cmp	r3, #64	; 0x40
 80096c4:	d82e      	bhi.n	8009724 <USBD_StdItfReq+0x7c>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <USBD_StdItfReq+0x26>
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	d12a      	bne.n	8009724 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	3b01      	subs	r3, #1
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d81d      	bhi.n	8009716 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	889b      	ldrh	r3, [r3, #4]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d813      	bhi.n	800970c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	88db      	ldrh	r3, [r3, #6]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d110      	bne.n	8009720 <USBD_StdItfReq+0x78>
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10d      	bne.n	8009720 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fd56 	bl	800a1b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800970a:	e009      	b.n	8009720 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fc89 	bl	800a026 <USBD_CtlError>
          break;
 8009714:	e004      	b.n	8009720 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fc84 	bl	800a026 <USBD_CtlError>
          break;
 800971e:	e000      	b.n	8009722 <USBD_StdItfReq+0x7a>
          break;
 8009720:	bf00      	nop
      }
      break;
 8009722:	e004      	b.n	800972e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fc7d 	bl	800a026 <USBD_CtlError>
      break;
 800972c:	bf00      	nop
  }

  return USBD_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3710      	adds	r7, #16
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	889b      	ldrh	r3, [r3, #4]
 800974a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009754:	2b40      	cmp	r3, #64	; 0x40
 8009756:	d007      	beq.n	8009768 <USBD_StdEPReq+0x30>
 8009758:	2b40      	cmp	r3, #64	; 0x40
 800975a:	f200 8146 	bhi.w	80099ea <USBD_StdEPReq+0x2b2>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <USBD_StdEPReq+0x40>
 8009762:	2b20      	cmp	r3, #32
 8009764:	f040 8141 	bne.w	80099ea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
      break;
 8009776:	e13d      	b.n	80099f4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009780:	2b20      	cmp	r3, #32
 8009782:	d10a      	bne.n	800979a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	e12d      	b.n	80099f6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d007      	beq.n	80097b2 <USBD_StdEPReq+0x7a>
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	f300 811b 	bgt.w	80099de <USBD_StdEPReq+0x2a6>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d072      	beq.n	8009892 <USBD_StdEPReq+0x15a>
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d03a      	beq.n	8009826 <USBD_StdEPReq+0xee>
 80097b0:	e115      	b.n	80099de <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d002      	beq.n	80097c2 <USBD_StdEPReq+0x8a>
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d015      	beq.n	80097ec <USBD_StdEPReq+0xb4>
 80097c0:	e02b      	b.n	800981a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00c      	beq.n	80097e2 <USBD_StdEPReq+0xaa>
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	2b80      	cmp	r3, #128	; 0x80
 80097cc:	d009      	beq.n	80097e2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	4619      	mov	r1, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 f8aa 	bl	800a92c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80097d8:	2180      	movs	r1, #128	; 0x80
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 f8a6 	bl	800a92c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097e0:	e020      	b.n	8009824 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc1e 	bl	800a026 <USBD_CtlError>
              break;
 80097ea:	e01b      	b.n	8009824 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	885b      	ldrh	r3, [r3, #2]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10e      	bne.n	8009812 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00b      	beq.n	8009812 <USBD_StdEPReq+0xda>
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	2b80      	cmp	r3, #128	; 0x80
 80097fe:	d008      	beq.n	8009812 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	88db      	ldrh	r3, [r3, #6]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 f88d 	bl	800a92c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fccf 	bl	800a1b6 <USBD_CtlSendStatus>

              break;
 8009818:	e004      	b.n	8009824 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fc02 	bl	800a026 <USBD_CtlError>
              break;
 8009822:	bf00      	nop
          }
          break;
 8009824:	e0e0      	b.n	80099e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	2b02      	cmp	r3, #2
 800982e:	d002      	beq.n	8009836 <USBD_StdEPReq+0xfe>
 8009830:	2b03      	cmp	r3, #3
 8009832:	d015      	beq.n	8009860 <USBD_StdEPReq+0x128>
 8009834:	e026      	b.n	8009884 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <USBD_StdEPReq+0x11e>
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	2b80      	cmp	r3, #128	; 0x80
 8009840:	d009      	beq.n	8009856 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	4619      	mov	r1, r3
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 f870 	bl	800a92c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800984c:	2180      	movs	r1, #128	; 0x80
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 f86c 	bl	800a92c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009854:	e01c      	b.n	8009890 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fbe4 	bl	800a026 <USBD_CtlError>
              break;
 800985e:	e017      	b.n	8009890 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	885b      	ldrh	r3, [r3, #2]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d112      	bne.n	800988e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800986e:	2b00      	cmp	r3, #0
 8009870:	d004      	beq.n	800987c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 f877 	bl	800a96a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fc9a 	bl	800a1b6 <USBD_CtlSendStatus>
              }
              break;
 8009882:	e004      	b.n	800988e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fbcd 	bl	800a026 <USBD_CtlError>
              break;
 800988c:	e000      	b.n	8009890 <USBD_StdEPReq+0x158>
              break;
 800988e:	bf00      	nop
          }
          break;
 8009890:	e0aa      	b.n	80099e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009898:	2b02      	cmp	r3, #2
 800989a:	d002      	beq.n	80098a2 <USBD_StdEPReq+0x16a>
 800989c:	2b03      	cmp	r3, #3
 800989e:	d032      	beq.n	8009906 <USBD_StdEPReq+0x1ce>
 80098a0:	e097      	b.n	80099d2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d007      	beq.n	80098b8 <USBD_StdEPReq+0x180>
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	2b80      	cmp	r3, #128	; 0x80
 80098ac:	d004      	beq.n	80098b8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fbb8 	bl	800a026 <USBD_CtlError>
                break;
 80098b6:	e091      	b.n	80099dc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	da0b      	bge.n	80098d8 <USBD_StdEPReq+0x1a0>
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
 80098c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c6:	4613      	mov	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4413      	add	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	3310      	adds	r3, #16
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	4413      	add	r3, r2
 80098d4:	3304      	adds	r3, #4
 80098d6:	e00b      	b.n	80098f0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098de:	4613      	mov	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	3304      	adds	r3, #4
 80098f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2202      	movs	r2, #2
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fbfb 	bl	800a0fa <USBD_CtlSendData>
              break;
 8009904:	e06a      	b.n	80099dc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	da11      	bge.n	8009932 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	f003 020f 	and.w	r2, r3, #15
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	3318      	adds	r3, #24
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d117      	bne.n	8009958 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fb7b 	bl	800a026 <USBD_CtlError>
                  break;
 8009930:	e054      	b.n	80099dc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	f003 020f 	and.w	r2, r3, #15
 8009938:	6879      	ldr	r1, [r7, #4]
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	440b      	add	r3, r1
 8009944:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d104      	bne.n	8009958 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fb68 	bl	800a026 <USBD_CtlError>
                  break;
 8009956:	e041      	b.n	80099dc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800995c:	2b00      	cmp	r3, #0
 800995e:	da0b      	bge.n	8009978 <USBD_StdEPReq+0x240>
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	3310      	adds	r3, #16
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	3304      	adds	r3, #4
 8009976:	e00b      	b.n	8009990 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	4413      	add	r3, r2
 800998e:	3304      	adds	r3, #4
 8009990:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <USBD_StdEPReq+0x266>
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b80      	cmp	r3, #128	; 0x80
 800999c:	d103      	bne.n	80099a6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	e00e      	b.n	80099c4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fffc 	bl	800a9a8 <USBD_LL_IsStallEP>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2201      	movs	r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	e002      	b.n	80099c4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2200      	movs	r2, #0
 80099c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2202      	movs	r2, #2
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fb95 	bl	800a0fa <USBD_CtlSendData>
              break;
 80099d0:	e004      	b.n	80099dc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fb26 	bl	800a026 <USBD_CtlError>
              break;
 80099da:	bf00      	nop
          }
          break;
 80099dc:	e004      	b.n	80099e8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fb20 	bl	800a026 <USBD_CtlError>
          break;
 80099e6:	bf00      	nop
      }
      break;
 80099e8:	e004      	b.n	80099f4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fb1a 	bl	800a026 <USBD_CtlError>
      break;
 80099f2:	bf00      	nop
  }

  return ret;
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	885b      	ldrh	r3, [r3, #2]
 8009a1a:	0a1b      	lsrs	r3, r3, #8
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	2b06      	cmp	r3, #6
 8009a22:	f200 8128 	bhi.w	8009c76 <USBD_GetDescriptor+0x276>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <USBD_GetDescriptor+0x2c>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009a49 	.word	0x08009a49
 8009a30:	08009a61 	.word	0x08009a61
 8009a34:	08009aa1 	.word	0x08009aa1
 8009a38:	08009c77 	.word	0x08009c77
 8009a3c:	08009c77 	.word	0x08009c77
 8009a40:	08009c17 	.word	0x08009c17
 8009a44:	08009c43 	.word	0x08009c43
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
      break;
 8009a5e:	e112      	b.n	8009c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7c1b      	ldrb	r3, [r3, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10d      	bne.n	8009a84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a70:	f107 0208 	add.w	r2, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	2202      	movs	r2, #2
 8009a80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a82:	e100      	b.n	8009c86 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	f107 0208 	add.w	r2, r7, #8
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	701a      	strb	r2, [r3, #0]
      break;
 8009a9e:	e0f2      	b.n	8009c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	885b      	ldrh	r3, [r3, #2]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	f200 80ac 	bhi.w	8009c04 <USBD_GetDescriptor+0x204>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <USBD_GetDescriptor+0xb4>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009acd 	.word	0x08009acd
 8009ab8:	08009b01 	.word	0x08009b01
 8009abc:	08009b35 	.word	0x08009b35
 8009ac0:	08009b69 	.word	0x08009b69
 8009ac4:	08009b9d 	.word	0x08009b9d
 8009ac8:	08009bd1 	.word	0x08009bd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00b      	beq.n	8009af0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7c12      	ldrb	r2, [r2, #16]
 8009ae4:	f107 0108 	add.w	r1, r7, #8
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
 8009aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aee:	e091      	b.n	8009c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa97 	bl	800a026 <USBD_CtlError>
            err++;
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	3301      	adds	r3, #1
 8009afc:	72fb      	strb	r3, [r7, #11]
          break;
 8009afe:	e089      	b.n	8009c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7c12      	ldrb	r2, [r2, #16]
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b22:	e077      	b.n	8009c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa7d 	bl	800a026 <USBD_CtlError>
            err++;
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	72fb      	strb	r3, [r7, #11]
          break;
 8009b32:	e06f      	b.n	8009c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7c12      	ldrb	r2, [r2, #16]
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b56:	e05d      	b.n	8009c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa63 	bl	800a026 <USBD_CtlError>
            err++;
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	3301      	adds	r3, #1
 8009b64:	72fb      	strb	r3, [r7, #11]
          break;
 8009b66:	e055      	b.n	8009c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	7c12      	ldrb	r2, [r2, #16]
 8009b80:	f107 0108 	add.w	r1, r7, #8
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8a:	e043      	b.n	8009c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa49 	bl	800a026 <USBD_CtlError>
            err++;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	3301      	adds	r3, #1
 8009b98:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9a:	e03b      	b.n	8009c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bbe:	e029      	b.n	8009c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa2f 	bl	800a026 <USBD_CtlError>
            err++;
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bce:	e021      	b.n	8009c14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	7c12      	ldrb	r2, [r2, #16]
 8009be8:	f107 0108 	add.w	r1, r7, #8
 8009bec:	4610      	mov	r0, r2
 8009bee:	4798      	blx	r3
 8009bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bf2:	e00f      	b.n	8009c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fa15 	bl	800a026 <USBD_CtlError>
            err++;
 8009bfc:	7afb      	ldrb	r3, [r7, #11]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	72fb      	strb	r3, [r7, #11]
          break;
 8009c02:	e007      	b.n	8009c14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa0d 	bl	800a026 <USBD_CtlError>
          err++;
 8009c0c:	7afb      	ldrb	r3, [r7, #11]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c12:	e038      	b.n	8009c86 <USBD_GetDescriptor+0x286>
 8009c14:	e037      	b.n	8009c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7c1b      	ldrb	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d109      	bne.n	8009c32 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	f107 0208 	add.w	r2, r7, #8
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	4798      	blx	r3
 8009c2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c30:	e029      	b.n	8009c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f9f6 	bl	800a026 <USBD_CtlError>
        err++;
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c40:	e021      	b.n	8009c86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	7c1b      	ldrb	r3, [r3, #16]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10d      	bne.n	8009c66 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	f107 0208 	add.w	r2, r7, #8
 8009c56:	4610      	mov	r0, r2
 8009c58:	4798      	blx	r3
 8009c5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	2207      	movs	r2, #7
 8009c62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c64:	e00f      	b.n	8009c86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f9dc 	bl	800a026 <USBD_CtlError>
        err++;
 8009c6e:	7afb      	ldrb	r3, [r7, #11]
 8009c70:	3301      	adds	r3, #1
 8009c72:	72fb      	strb	r3, [r7, #11]
      break;
 8009c74:	e007      	b.n	8009c86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f9d4 	bl	800a026 <USBD_CtlError>
      err++;
 8009c7e:	7afb      	ldrb	r3, [r7, #11]
 8009c80:	3301      	adds	r3, #1
 8009c82:	72fb      	strb	r3, [r7, #11]
      break;
 8009c84:	bf00      	nop
  }

  if (err != 0U)
 8009c86:	7afb      	ldrb	r3, [r7, #11]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d11c      	bne.n	8009cc6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009c8c:	893b      	ldrh	r3, [r7, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d011      	beq.n	8009cb6 <USBD_GetDescriptor+0x2b6>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	88db      	ldrh	r3, [r3, #6]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00d      	beq.n	8009cb6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	88da      	ldrh	r2, [r3, #6]
 8009c9e:	893b      	ldrh	r3, [r7, #8]
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	bf28      	it	cs
 8009ca4:	4613      	movcs	r3, r2
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009caa:	893b      	ldrh	r3, [r7, #8]
 8009cac:	461a      	mov	r2, r3
 8009cae:	68f9      	ldr	r1, [r7, #12]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fa22 	bl	800a0fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	88db      	ldrh	r3, [r3, #6]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d104      	bne.n	8009cc8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa79 	bl	800a1b6 <USBD_CtlSendStatus>
 8009cc4:	e000      	b.n	8009cc8 <USBD_GetDescriptor+0x2c8>
    return;
 8009cc6:	bf00      	nop
    }
  }
}
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop

08009cd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	889b      	ldrh	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d130      	bne.n	8009d44 <USBD_SetAddress+0x74>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	88db      	ldrh	r3, [r3, #6]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d12c      	bne.n	8009d44 <USBD_SetAddress+0x74>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	885b      	ldrh	r3, [r3, #2]
 8009cee:	2b7f      	cmp	r3, #127	; 0x7f
 8009cf0:	d828      	bhi.n	8009d44 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	885b      	ldrh	r3, [r3, #2]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d104      	bne.n	8009d12 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f98b 	bl	800a026 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d10:	e01d      	b.n	8009d4e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7bfa      	ldrb	r2, [r7, #15]
 8009d16:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fe6e 	bl	800aa00 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fa46 	bl	800a1b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d38:	e009      	b.n	8009d4e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d42:	e004      	b.n	8009d4e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f96d 	bl	800a026 <USBD_CtlError>
  }
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	885b      	ldrh	r3, [r3, #2]
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	4b41      	ldr	r3, [pc, #260]	; (8009e70 <USBD_SetConfig+0x118>)
 8009d6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d6c:	4b40      	ldr	r3, [pc, #256]	; (8009e70 <USBD_SetConfig+0x118>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d904      	bls.n	8009d7e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f955 	bl	800a026 <USBD_CtlError>
 8009d7c:	e075      	b.n	8009e6a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d002      	beq.n	8009d8e <USBD_SetConfig+0x36>
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d023      	beq.n	8009dd4 <USBD_SetConfig+0x7c>
 8009d8c:	e062      	b.n	8009e54 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009d8e:	4b38      	ldr	r3, [pc, #224]	; (8009e70 <USBD_SetConfig+0x118>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01a      	beq.n	8009dcc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009d96:	4b36      	ldr	r3, [pc, #216]	; (8009e70 <USBD_SetConfig+0x118>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2203      	movs	r2, #3
 8009da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009da8:	4b31      	ldr	r3, [pc, #196]	; (8009e70 <USBD_SetConfig+0x118>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff f9e7 	bl	8009182 <USBD_SetClassConfig>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d104      	bne.n	8009dc4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f932 	bl	800a026 <USBD_CtlError>
            return;
 8009dc2:	e052      	b.n	8009e6a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f9f6 	bl	800a1b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009dca:	e04e      	b.n	8009e6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f9f2 	bl	800a1b6 <USBD_CtlSendStatus>
        break;
 8009dd2:	e04a      	b.n	8009e6a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009dd4:	4b26      	ldr	r3, [pc, #152]	; (8009e70 <USBD_SetConfig+0x118>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d112      	bne.n	8009e02 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009de4:	4b22      	ldr	r3, [pc, #136]	; (8009e70 <USBD_SetConfig+0x118>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	461a      	mov	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009dee:	4b20      	ldr	r3, [pc, #128]	; (8009e70 <USBD_SetConfig+0x118>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff f9e3 	bl	80091c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f9db 	bl	800a1b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e00:	e033      	b.n	8009e6a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e02:	4b1b      	ldr	r3, [pc, #108]	; (8009e70 <USBD_SetConfig+0x118>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d01d      	beq.n	8009e4c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7ff f9d1 	bl	80091c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e1e:	4b14      	ldr	r3, [pc, #80]	; (8009e70 <USBD_SetConfig+0x118>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e28:	4b11      	ldr	r3, [pc, #68]	; (8009e70 <USBD_SetConfig+0x118>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff f9a7 	bl	8009182 <USBD_SetClassConfig>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d104      	bne.n	8009e44 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f8f2 	bl	800a026 <USBD_CtlError>
            return;
 8009e42:	e012      	b.n	8009e6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f9b6 	bl	800a1b6 <USBD_CtlSendStatus>
        break;
 8009e4a:	e00e      	b.n	8009e6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f9b2 	bl	800a1b6 <USBD_CtlSendStatus>
        break;
 8009e52:	e00a      	b.n	8009e6a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f8e5 	bl	800a026 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e5c:	4b04      	ldr	r3, [pc, #16]	; (8009e70 <USBD_SetConfig+0x118>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff f9ac 	bl	80091c0 <USBD_ClrClassConfig>
        break;
 8009e68:	bf00      	nop
    }
  }
}
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20002890 	.word	0x20002890

08009e74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	88db      	ldrh	r3, [r3, #6]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d004      	beq.n	8009e90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f8cc 	bl	800a026 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e8e:	e022      	b.n	8009ed6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	dc02      	bgt.n	8009ea0 <USBD_GetConfig+0x2c>
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dc03      	bgt.n	8009ea6 <USBD_GetConfig+0x32>
 8009e9e:	e015      	b.n	8009ecc <USBD_GetConfig+0x58>
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d00b      	beq.n	8009ebc <USBD_GetConfig+0x48>
 8009ea4:	e012      	b.n	8009ecc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3308      	adds	r3, #8
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f920 	bl	800a0fa <USBD_CtlSendData>
        break;
 8009eba:	e00c      	b.n	8009ed6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f918 	bl	800a0fa <USBD_CtlSendData>
        break;
 8009eca:	e004      	b.n	8009ed6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f8a9 	bl	800a026 <USBD_CtlError>
        break;
 8009ed4:	bf00      	nop
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d81e      	bhi.n	8009f32 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	88db      	ldrh	r3, [r3, #6]
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d004      	beq.n	8009f06 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f891 	bl	800a026 <USBD_CtlError>
        break;
 8009f04:	e01a      	b.n	8009f3c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f043 0202 	orr.w	r2, r3, #2
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	330c      	adds	r3, #12
 8009f26:	2202      	movs	r2, #2
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f8e5 	bl	800a0fa <USBD_CtlSendData>
      break;
 8009f30:	e004      	b.n	8009f3c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f876 	bl	800a026 <USBD_CtlError>
      break;
 8009f3a:	bf00      	nop
  }
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	885b      	ldrh	r3, [r3, #2]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d106      	bne.n	8009f64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f929 	bl	800a1b6 <USBD_CtlSendStatus>
  }
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d80b      	bhi.n	8009f9a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	885b      	ldrh	r3, [r3, #2]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d10c      	bne.n	8009fa4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f90f 	bl	800a1b6 <USBD_CtlSendStatus>
      }
      break;
 8009f98:	e004      	b.n	8009fa4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f842 	bl	800a026 <USBD_CtlError>
      break;
 8009fa2:	e000      	b.n	8009fa6 <USBD_ClrFeature+0x3a>
      break;
 8009fa4:	bf00      	nop
  }
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781a      	ldrb	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	785a      	ldrb	r2, [r3, #1]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	3302      	adds	r3, #2
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	3303      	adds	r3, #3
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4413      	add	r3, r2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	3305      	adds	r3, #5
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	3306      	adds	r3, #6
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	b29a      	uxth	r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	3307      	adds	r3, #7
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	b29b      	uxth	r3, r3
 800a014:	4413      	add	r3, r2
 800a016:	b29a      	uxth	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	80da      	strh	r2, [r3, #6]

}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	bc80      	pop	{r7}
 800a024:	4770      	bx	lr

0800a026 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b082      	sub	sp, #8
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a030:	2180      	movs	r1, #128	; 0x80
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fc7a 	bl	800a92c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a038:	2100      	movs	r1, #0
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fc76 	bl	800a92c <USBD_LL_StallEP>
}
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d032      	beq.n	800a0c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 f834 	bl	800a0cc <USBD_GetLen>
 800a064:	4603      	mov	r3, r0
 800a066:	3301      	adds	r3, #1
 800a068:	b29b      	uxth	r3, r3
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	75fa      	strb	r2, [r7, #23]
 800a078:	461a      	mov	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	4413      	add	r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	1c5a      	adds	r2, r3, #1
 800a088:	75fa      	strb	r2, [r7, #23]
 800a08a:	461a      	mov	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4413      	add	r3, r2
 800a090:	2203      	movs	r2, #3
 800a092:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a094:	e012      	b.n	800a0bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	60fa      	str	r2, [r7, #12]
 800a09c:	7dfa      	ldrb	r2, [r7, #23]
 800a09e:	1c51      	adds	r1, r2, #1
 800a0a0:	75f9      	strb	r1, [r7, #23]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	75fa      	strb	r2, [r7, #23]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e8      	bne.n	800a096 <USBD_GetString+0x4e>
    }
  }
}
 800a0c4:	bf00      	nop
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a0d8:	e005      	b.n	800a0e6 <USBD_GetLen+0x1a>
  {
    len++;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f5      	bne.n	800a0da <USBD_GetLen+0xe>
  }

  return len;
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	4770      	bx	lr

0800a0fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	4613      	mov	r3, r2
 800a106:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a110:	88fa      	ldrh	r2, [r7, #6]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a11c:	88fb      	ldrh	r3, [r7, #6]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fc8b 	bl	800aa3e <USBD_LL_Transmit>

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	4613      	mov	r3, r2
 800a13e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a140:	88fb      	ldrh	r3, [r7, #6]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	2100      	movs	r1, #0
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 fc79 	bl	800aa3e <USBD_LL_Transmit>

  return USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	4613      	mov	r3, r2
 800a162:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2203      	movs	r2, #3
 800a168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a16c:	88fa      	ldrh	r2, [r7, #6]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a174:	88fa      	ldrh	r2, [r7, #6]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a17c:	88fb      	ldrh	r3, [r7, #6]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	2100      	movs	r1, #0
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fc7e 	bl	800aa84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	4613      	mov	r3, r2
 800a19e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1a0:	88fb      	ldrh	r3, [r7, #6]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 fc6c 	bl	800aa84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2204      	movs	r2, #4
 800a1c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc36 	bl	800aa3e <USBD_LL_Transmit>

  return USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2205      	movs	r2, #5
 800a1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fc46 	bl	800aa84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a208:	2200      	movs	r2, #0
 800a20a:	4912      	ldr	r1, [pc, #72]	; (800a254 <MX_USB_DEVICE_Init+0x50>)
 800a20c:	4812      	ldr	r0, [pc, #72]	; (800a258 <MX_USB_DEVICE_Init+0x54>)
 800a20e:	f7fe ff5e 	bl	80090ce <USBD_Init>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a218:	f7f6 fc76 	bl	8000b08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a21c:	490f      	ldr	r1, [pc, #60]	; (800a25c <MX_USB_DEVICE_Init+0x58>)
 800a21e:	480e      	ldr	r0, [pc, #56]	; (800a258 <MX_USB_DEVICE_Init+0x54>)
 800a220:	f7fe ff80 	bl	8009124 <USBD_RegisterClass>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a22a:	f7f6 fc6d 	bl	8000b08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a22e:	490c      	ldr	r1, [pc, #48]	; (800a260 <MX_USB_DEVICE_Init+0x5c>)
 800a230:	4809      	ldr	r0, [pc, #36]	; (800a258 <MX_USB_DEVICE_Init+0x54>)
 800a232:	f7fe feb1 	bl	8008f98 <USBD_CDC_RegisterInterface>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a23c:	f7f6 fc64 	bl	8000b08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a240:	4805      	ldr	r0, [pc, #20]	; (800a258 <MX_USB_DEVICE_Init+0x54>)
 800a242:	f7fe ff88 	bl	8009156 <USBD_Start>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a24c:	f7f6 fc5c 	bl	8000b08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a250:	bf00      	nop
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000130 	.word	0x20000130
 800a258:	20002894 	.word	0x20002894
 800a25c:	2000001c 	.word	0x2000001c
 800a260:	20000120 	.word	0x20000120

0800a264 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a268:	2200      	movs	r2, #0
 800a26a:	4905      	ldr	r1, [pc, #20]	; (800a280 <CDC_Init_FS+0x1c>)
 800a26c:	4805      	ldr	r0, [pc, #20]	; (800a284 <CDC_Init_FS+0x20>)
 800a26e:	f7fe fea9 	bl	8008fc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a272:	4905      	ldr	r1, [pc, #20]	; (800a288 <CDC_Init_FS+0x24>)
 800a274:	4803      	ldr	r0, [pc, #12]	; (800a284 <CDC_Init_FS+0x20>)
 800a276:	f7fe febe 	bl	8008ff6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a27a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	20002f58 	.word	0x20002f58
 800a284:	20002894 	.word	0x20002894
 800a288:	20002b58 	.word	0x20002b58

0800a28c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a28c:	b480      	push	{r7}
 800a28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a290:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a292:	4618      	mov	r0, r3
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr
	...

0800a29c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6039      	str	r1, [r7, #0]
 800a2a6:	71fb      	strb	r3, [r7, #7]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	2b23      	cmp	r3, #35	; 0x23
 800a2b0:	d84a      	bhi.n	800a348 <CDC_Control_FS+0xac>
 800a2b2:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <CDC_Control_FS+0x1c>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a349 	.word	0x0800a349
 800a2bc:	0800a349 	.word	0x0800a349
 800a2c0:	0800a349 	.word	0x0800a349
 800a2c4:	0800a349 	.word	0x0800a349
 800a2c8:	0800a349 	.word	0x0800a349
 800a2cc:	0800a349 	.word	0x0800a349
 800a2d0:	0800a349 	.word	0x0800a349
 800a2d4:	0800a349 	.word	0x0800a349
 800a2d8:	0800a349 	.word	0x0800a349
 800a2dc:	0800a349 	.word	0x0800a349
 800a2e0:	0800a349 	.word	0x0800a349
 800a2e4:	0800a349 	.word	0x0800a349
 800a2e8:	0800a349 	.word	0x0800a349
 800a2ec:	0800a349 	.word	0x0800a349
 800a2f0:	0800a349 	.word	0x0800a349
 800a2f4:	0800a349 	.word	0x0800a349
 800a2f8:	0800a349 	.word	0x0800a349
 800a2fc:	0800a349 	.word	0x0800a349
 800a300:	0800a349 	.word	0x0800a349
 800a304:	0800a349 	.word	0x0800a349
 800a308:	0800a349 	.word	0x0800a349
 800a30c:	0800a349 	.word	0x0800a349
 800a310:	0800a349 	.word	0x0800a349
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a349 	.word	0x0800a349
 800a31c:	0800a349 	.word	0x0800a349
 800a320:	0800a349 	.word	0x0800a349
 800a324:	0800a349 	.word	0x0800a349
 800a328:	0800a349 	.word	0x0800a349
 800a32c:	0800a349 	.word	0x0800a349
 800a330:	0800a349 	.word	0x0800a349
 800a334:	0800a349 	.word	0x0800a349
 800a338:	0800a349 	.word	0x0800a349
 800a33c:	0800a349 	.word	0x0800a349
 800a340:	0800a349 	.word	0x0800a349
 800a344:	0800a349 	.word	0x0800a349
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a348:	bf00      	nop
  }

  return (USBD_OK);
 800a34a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	bc80      	pop	{r7}
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop

0800a358 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Rx_to_buff(Buf, Len);
 800a362:	4b08      	ldr	r3, [pc, #32]	; (800a384 <CDC_Receive_FS+0x2c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	4806      	ldr	r0, [pc, #24]	; (800a388 <CDC_Receive_FS+0x30>)
 800a370:	f7fe fe41 	bl	8008ff6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a374:	4804      	ldr	r0, [pc, #16]	; (800a388 <CDC_Receive_FS+0x30>)
 800a376:	f7fe fe80 	bl	800907a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a37a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20003358 	.word	0x20003358
 800a388:	20002894 	.word	0x20002894

0800a38c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	460b      	mov	r3, r1
 800a396:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a39c:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <CDC_Transmit_FS+0x48>)
 800a39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d001      	beq.n	800a3b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e00b      	b.n	800a3ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3b2:	887b      	ldrh	r3, [r7, #2]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	4806      	ldr	r0, [pc, #24]	; (800a3d4 <CDC_Transmit_FS+0x48>)
 800a3ba:	f7fe fe03 	bl	8008fc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3be:	4805      	ldr	r0, [pc, #20]	; (800a3d4 <CDC_Transmit_FS+0x48>)
 800a3c0:	f7fe fe2c 	bl	800901c <USBD_CDC_TransmitPacket>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20002894 	.word	0x20002894

0800a3d8 <CDC_Attach_Receive_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Receive_FS(CDC_Attach_Rx f){
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	CDC_Rx_to_buff = f;
 800a3e0:	4a03      	ldr	r2, [pc, #12]	; (800a3f0 <CDC_Attach_Receive_FS+0x18>)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6013      	str	r3, [r2, #0]
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr
 800a3f0:	20003358 	.word	0x20003358

0800a3f4 <CDC_Transmit_FS_Status>:

uint32_t CDC_Transmit_FS_Status(){
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3fa:	4b06      	ldr	r3, [pc, #24]	; (800a414 <CDC_Transmit_FS_Status+0x20>)
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a400:	607b      	str	r3, [r7, #4]
	return hcdc->TxState;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
}
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bc80      	pop	{r7}
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20002894 	.word	0x20002894

0800a418 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	2212      	movs	r2, #18
 800a428:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a42a:	4b03      	ldr	r3, [pc, #12]	; (800a438 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	bc80      	pop	{r7}
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	2000014c 	.word	0x2000014c

0800a43c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	6039      	str	r1, [r7, #0]
 800a446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2204      	movs	r2, #4
 800a44c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a44e:	4b03      	ldr	r3, [pc, #12]	; (800a45c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a450:	4618      	mov	r0, r3
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	bc80      	pop	{r7}
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	20000160 	.word	0x20000160

0800a460 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a46c:	79fb      	ldrb	r3, [r7, #7]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d105      	bne.n	800a47e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	4907      	ldr	r1, [pc, #28]	; (800a494 <USBD_FS_ProductStrDescriptor+0x34>)
 800a476:	4808      	ldr	r0, [pc, #32]	; (800a498 <USBD_FS_ProductStrDescriptor+0x38>)
 800a478:	f7ff fde6 	bl	800a048 <USBD_GetString>
 800a47c:	e004      	b.n	800a488 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	4904      	ldr	r1, [pc, #16]	; (800a494 <USBD_FS_ProductStrDescriptor+0x34>)
 800a482:	4805      	ldr	r0, [pc, #20]	; (800a498 <USBD_FS_ProductStrDescriptor+0x38>)
 800a484:	f7ff fde0 	bl	800a048 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a488:	4b02      	ldr	r3, [pc, #8]	; (800a494 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	2000335c 	.word	0x2000335c
 800a498:	0800ac4c 	.word	0x0800ac4c

0800a49c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	6039      	str	r1, [r7, #0]
 800a4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	4904      	ldr	r1, [pc, #16]	; (800a4bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4ac:	4804      	ldr	r0, [pc, #16]	; (800a4c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4ae:	f7ff fdcb 	bl	800a048 <USBD_GetString>
  return USBD_StrDesc;
 800a4b2:	4b02      	ldr	r3, [pc, #8]	; (800a4bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	2000335c 	.word	0x2000335c
 800a4c0:	0800ac64 	.word	0x0800ac64

0800a4c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	6039      	str	r1, [r7, #0]
 800a4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	221a      	movs	r2, #26
 800a4d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4d6:	f000 f843 	bl	800a560 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4da:	4b02      	ldr	r3, [pc, #8]	; (800a4e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20000164 	.word	0x20000164

0800a4e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	6039      	str	r1, [r7, #0]
 800a4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	4907      	ldr	r1, [pc, #28]	; (800a51c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4fe:	4808      	ldr	r0, [pc, #32]	; (800a520 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a500:	f7ff fda2 	bl	800a048 <USBD_GetString>
 800a504:	e004      	b.n	800a510 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	4904      	ldr	r1, [pc, #16]	; (800a51c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a50a:	4805      	ldr	r0, [pc, #20]	; (800a520 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a50c:	f7ff fd9c 	bl	800a048 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a510:	4b02      	ldr	r3, [pc, #8]	; (800a51c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	2000335c 	.word	0x2000335c
 800a520:	0800ac78 	.word	0x0800ac78

0800a524 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	6039      	str	r1, [r7, #0]
 800a52e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d105      	bne.n	800a542 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	4907      	ldr	r1, [pc, #28]	; (800a558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a53a:	4808      	ldr	r0, [pc, #32]	; (800a55c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a53c:	f7ff fd84 	bl	800a048 <USBD_GetString>
 800a540:	e004      	b.n	800a54c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	4904      	ldr	r1, [pc, #16]	; (800a558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a546:	4805      	ldr	r0, [pc, #20]	; (800a55c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a548:	f7ff fd7e 	bl	800a048 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a54c:	4b02      	ldr	r3, [pc, #8]	; (800a558 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	2000335c 	.word	0x2000335c
 800a55c:	0800ac84 	.word	0x0800ac84

0800a560 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a566:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <Get_SerialNum+0x44>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a56c:	4b0e      	ldr	r3, [pc, #56]	; (800a5a8 <Get_SerialNum+0x48>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a572:	4b0e      	ldr	r3, [pc, #56]	; (800a5ac <Get_SerialNum+0x4c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d009      	beq.n	800a59a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a586:	2208      	movs	r2, #8
 800a588:	4909      	ldr	r1, [pc, #36]	; (800a5b0 <Get_SerialNum+0x50>)
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f814 	bl	800a5b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a590:	2204      	movs	r2, #4
 800a592:	4908      	ldr	r1, [pc, #32]	; (800a5b4 <Get_SerialNum+0x54>)
 800a594:	68b8      	ldr	r0, [r7, #8]
 800a596:	f000 f80f 	bl	800a5b8 <IntToUnicode>
  }
}
 800a59a:	bf00      	nop
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	1ffff7e8 	.word	0x1ffff7e8
 800a5a8:	1ffff7ec 	.word	0x1ffff7ec
 800a5ac:	1ffff7f0 	.word	0x1ffff7f0
 800a5b0:	20000166 	.word	0x20000166
 800a5b4:	20000176 	.word	0x20000176

0800a5b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	75fb      	strb	r3, [r7, #23]
 800a5ce:	e027      	b.n	800a620 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	0f1b      	lsrs	r3, r3, #28
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	d80b      	bhi.n	800a5f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	0f1b      	lsrs	r3, r3, #28
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	440b      	add	r3, r1
 800a5e8:	3230      	adds	r2, #48	; 0x30
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	e00a      	b.n	800a606 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	0f1b      	lsrs	r3, r3, #28
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	440b      	add	r3, r1
 800a600:	3237      	adds	r2, #55	; 0x37
 800a602:	b2d2      	uxtb	r2, r2
 800a604:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a60c:	7dfb      	ldrb	r3, [r7, #23]
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	3301      	adds	r3, #1
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	4413      	add	r3, r2
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	3301      	adds	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
 800a620:	7dfa      	ldrb	r2, [r7, #23]
 800a622:	79fb      	ldrb	r3, [r7, #7]
 800a624:	429a      	cmp	r2, r3
 800a626:	d3d3      	bcc.n	800a5d0 <IntToUnicode+0x18>
  }
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr

0800a634 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a0d      	ldr	r2, [pc, #52]	; (800a678 <HAL_PCD_MspInit+0x44>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d113      	bne.n	800a66e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a646:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <HAL_PCD_MspInit+0x48>)
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	4a0c      	ldr	r2, [pc, #48]	; (800a67c <HAL_PCD_MspInit+0x48>)
 800a64c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a650:	61d3      	str	r3, [r2, #28]
 800a652:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <HAL_PCD_MspInit+0x48>)
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	2014      	movs	r0, #20
 800a664:	f7f8 f8cd 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a668:	2014      	movs	r0, #20
 800a66a:	f7f8 f8e6 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a66e:	bf00      	nop
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	40005c00 	.word	0x40005c00
 800a67c:	40021000 	.word	0x40021000

0800a680 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f7fe fda5 	bl	80091e6 <USBD_LL_SetupStage>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	f7fe fdd7 	bl	8009280 <USBD_LL_DataOutStage>
}
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a6ec:	78fa      	ldrb	r2, [r7, #3]
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	440b      	add	r3, r1
 800a6fa:	333c      	adds	r3, #60	; 0x3c
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	4619      	mov	r1, r3
 800a702:	f7fe fe2e 	bl	8009362 <USBD_LL_DataInStage>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe ff3e 	bl	800959e <USBD_LL_SOF>
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a732:	2301      	movs	r3, #1
 800a734:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d001      	beq.n	800a742 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a73e:	f7f6 f9e3 	bl	8000b08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a748:	7bfa      	ldrb	r2, [r7, #15]
 800a74a:	4611      	mov	r1, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fe feee 	bl	800952e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fe fea7 	bl	80094ac <USBD_LL_Reset>
}
 800a75e:	bf00      	nop
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fee8 	bl	800954c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d005      	beq.n	800a790 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <HAL_PCD_SuspendCallback+0x30>)
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	4a03      	ldr	r2, [pc, #12]	; (800a798 <HAL_PCD_SuspendCallback+0x30>)
 800a78a:	f043 0306 	orr.w	r3, r3, #6
 800a78e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	e000ed00 	.word	0xe000ed00

0800a79c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fee2 	bl	8009574 <USBD_LL_Resume>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a7c0:	4a28      	ldr	r2, [pc, #160]	; (800a864 <USBD_LL_Init+0xac>)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a26      	ldr	r2, [pc, #152]	; (800a864 <USBD_LL_Init+0xac>)
 800a7cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a7d0:	4b24      	ldr	r3, [pc, #144]	; (800a864 <USBD_LL_Init+0xac>)
 800a7d2:	4a25      	ldr	r2, [pc, #148]	; (800a868 <USBD_LL_Init+0xb0>)
 800a7d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a7d6:	4b23      	ldr	r3, [pc, #140]	; (800a864 <USBD_LL_Init+0xac>)
 800a7d8:	2208      	movs	r2, #8
 800a7da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a7dc:	4b21      	ldr	r3, [pc, #132]	; (800a864 <USBD_LL_Init+0xac>)
 800a7de:	2202      	movs	r2, #2
 800a7e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a7e2:	4b20      	ldr	r3, [pc, #128]	; (800a864 <USBD_LL_Init+0xac>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a7e8:	4b1e      	ldr	r3, [pc, #120]	; (800a864 <USBD_LL_Init+0xac>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a7ee:	4b1d      	ldr	r3, [pc, #116]	; (800a864 <USBD_LL_Init+0xac>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a7f4:	481b      	ldr	r0, [pc, #108]	; (800a864 <USBD_LL_Init+0xac>)
 800a7f6:	f7f8 f9d7 	bl	8002ba8 <HAL_PCD_Init>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a800:	f7f6 f982 	bl	8000b08 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a80a:	2318      	movs	r3, #24
 800a80c:	2200      	movs	r2, #0
 800a80e:	2100      	movs	r1, #0
 800a810:	f7f9 fe4b 	bl	80044aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a81a:	2358      	movs	r3, #88	; 0x58
 800a81c:	2200      	movs	r2, #0
 800a81e:	2180      	movs	r1, #128	; 0x80
 800a820:	f7f9 fe43 	bl	80044aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a82a:	23c0      	movs	r3, #192	; 0xc0
 800a82c:	2200      	movs	r2, #0
 800a82e:	2181      	movs	r1, #129	; 0x81
 800a830:	f7f9 fe3b 	bl	80044aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a83a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a83e:	2200      	movs	r2, #0
 800a840:	2101      	movs	r1, #1
 800a842:	f7f9 fe32 	bl	80044aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a84c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a850:	2200      	movs	r2, #0
 800a852:	2182      	movs	r1, #130	; 0x82
 800a854:	f7f9 fe29 	bl	80044aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	2000355c 	.word	0x2000355c
 800a868:	40005c00 	.word	0x40005c00

0800a86c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a882:	4618      	mov	r0, r3
 800a884:	f7f8 fa9b 	bl	8002dbe <HAL_PCD_Start>
 800a888:	4603      	mov	r3, r0
 800a88a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 f94e 	bl	800ab30 <USBD_Get_USB_Status>
 800a894:	4603      	mov	r3, r0
 800a896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a898:	7bbb      	ldrb	r3, [r7, #14]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	4608      	mov	r0, r1
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	70fb      	strb	r3, [r7, #3]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70bb      	strb	r3, [r7, #2]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8ca:	78bb      	ldrb	r3, [r7, #2]
 800a8cc:	883a      	ldrh	r2, [r7, #0]
 800a8ce:	78f9      	ldrb	r1, [r7, #3]
 800a8d0:	f7f8 fc13 	bl	80030fa <HAL_PCD_EP_Open>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 f928 	bl	800ab30 <USBD_Get_USB_Status>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a908:	78fa      	ldrb	r2, [r7, #3]
 800a90a:	4611      	mov	r1, r2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f8 fc5a 	bl	80031c6 <HAL_PCD_EP_Close>
 800a912:	4603      	mov	r3, r0
 800a914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 f909 	bl	800ab30 <USBD_Get_USB_Status>
 800a91e:	4603      	mov	r3, r0
 800a920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a922:	7bbb      	ldrb	r3, [r7, #14]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a946:	78fa      	ldrb	r2, [r7, #3]
 800a948:	4611      	mov	r1, r2
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7f8 fd1a 	bl	8003384 <HAL_PCD_EP_SetStall>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	4618      	mov	r0, r3
 800a958:	f000 f8ea 	bl	800ab30 <USBD_Get_USB_Status>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a960:	7bbb      	ldrb	r3, [r7, #14]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a984:	78fa      	ldrb	r2, [r7, #3]
 800a986:	4611      	mov	r1, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	f7f8 fd5b 	bl	8003444 <HAL_PCD_EP_ClrStall>
 800a98e:	4603      	mov	r3, r0
 800a990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f8cb 	bl	800ab30 <USBD_Get_USB_Status>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	da0c      	bge.n	800a9de <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ca:	68f9      	ldr	r1, [r7, #12]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	440b      	add	r3, r1
 800a9d8:	3302      	adds	r3, #2
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	e00b      	b.n	800a9f6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9de:	78fb      	ldrb	r3, [r7, #3]
 800a9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9e4:	68f9      	ldr	r1, [r7, #12]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	440b      	add	r3, r1
 800a9f0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a9f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bc80      	pop	{r7}
 800a9fe:	4770      	bx	lr

0800aa00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa1a:	78fa      	ldrb	r2, [r7, #3]
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7f8 fb46 	bl	80030b0 <HAL_PCD_SetAddress>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 f880 	bl	800ab30 <USBD_Get_USB_Status>
 800aa30:	4603      	mov	r3, r0
 800aa32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	72fb      	strb	r3, [r7, #11]
 800aa4e:	4613      	mov	r3, r2
 800aa50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa60:	893b      	ldrh	r3, [r7, #8]
 800aa62:	7af9      	ldrb	r1, [r7, #11]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	f7f8 fc4a 	bl	80032fe <HAL_PCD_EP_Transmit>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f000 f85d 	bl	800ab30 <USBD_Get_USB_Status>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa7a:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	460b      	mov	r3, r1
 800aa92:	72fb      	strb	r3, [r7, #11]
 800aa94:	4613      	mov	r3, r2
 800aa96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaa6:	893b      	ldrh	r3, [r7, #8]
 800aaa8:	7af9      	ldrb	r1, [r7, #11]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	f7f8 fbd3 	bl	8003256 <HAL_PCD_EP_Receive>
 800aab0:	4603      	mov	r3, r0
 800aab2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 f83a 	bl	800ab30 <USBD_Get_USB_Status>
 800aabc:	4603      	mov	r3, r0
 800aabe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aac0:	7dbb      	ldrb	r3, [r7, #22]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	460b      	mov	r3, r1
 800aad4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	4611      	mov	r1, r2
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7f8 fbf5 	bl	80032d0 <HAL_PCD_EP_GetRxCount>
 800aae6:	4603      	mov	r3, r0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <USBD_static_malloc+0x14>)
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bc80      	pop	{r7}
 800ab02:	4770      	bx	lr
 800ab04:	20003848 	.word	0x20003848

0800ab08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]

}
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bc80      	pop	{r7}
 800ab18:	4770      	bx	lr

0800ab1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bc80      	pop	{r7}
 800ab2e:	4770      	bx	lr

0800ab30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab3e:	79fb      	ldrb	r3, [r7, #7]
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d817      	bhi.n	800ab74 <USBD_Get_USB_Status+0x44>
 800ab44:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <USBD_Get_USB_Status+0x1c>)
 800ab46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4a:	bf00      	nop
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800ab63 	.word	0x0800ab63
 800ab54:	0800ab69 	.word	0x0800ab69
 800ab58:	0800ab6f 	.word	0x0800ab6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab60:	e00b      	b.n	800ab7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab62:	2302      	movs	r3, #2
 800ab64:	73fb      	strb	r3, [r7, #15]
    break;
 800ab66:	e008      	b.n	800ab7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab6c:	e005      	b.n	800ab7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab6e:	2302      	movs	r3, #2
 800ab70:	73fb      	strb	r3, [r7, #15]
    break;
 800ab72:	e002      	b.n	800ab7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab74:	2302      	movs	r3, #2
 800ab76:	73fb      	strb	r3, [r7, #15]
    break;
 800ab78:	bf00      	nop
  }
  return usb_status;
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop

0800ab88 <__libc_init_array>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	2600      	movs	r6, #0
 800ab8c:	4d0c      	ldr	r5, [pc, #48]	; (800abc0 <__libc_init_array+0x38>)
 800ab8e:	4c0d      	ldr	r4, [pc, #52]	; (800abc4 <__libc_init_array+0x3c>)
 800ab90:	1b64      	subs	r4, r4, r5
 800ab92:	10a4      	asrs	r4, r4, #2
 800ab94:	42a6      	cmp	r6, r4
 800ab96:	d109      	bne.n	800abac <__libc_init_array+0x24>
 800ab98:	f000 f822 	bl	800abe0 <_init>
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	4d0a      	ldr	r5, [pc, #40]	; (800abc8 <__libc_init_array+0x40>)
 800aba0:	4c0a      	ldr	r4, [pc, #40]	; (800abcc <__libc_init_array+0x44>)
 800aba2:	1b64      	subs	r4, r4, r5
 800aba4:	10a4      	asrs	r4, r4, #2
 800aba6:	42a6      	cmp	r6, r4
 800aba8:	d105      	bne.n	800abb6 <__libc_init_array+0x2e>
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb0:	4798      	blx	r3
 800abb2:	3601      	adds	r6, #1
 800abb4:	e7ee      	b.n	800ab94 <__libc_init_array+0xc>
 800abb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abba:	4798      	blx	r3
 800abbc:	3601      	adds	r6, #1
 800abbe:	e7f2      	b.n	800aba6 <__libc_init_array+0x1e>
 800abc0:	0800acb4 	.word	0x0800acb4
 800abc4:	0800acb4 	.word	0x0800acb4
 800abc8:	0800acb4 	.word	0x0800acb4
 800abcc:	0800acb8 	.word	0x0800acb8

0800abd0 <memset>:
 800abd0:	4603      	mov	r3, r0
 800abd2:	4402      	add	r2, r0
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d100      	bne.n	800abda <memset+0xa>
 800abd8:	4770      	bx	lr
 800abda:	f803 1b01 	strb.w	r1, [r3], #1
 800abde:	e7f9      	b.n	800abd4 <memset+0x4>

0800abe0 <_init>:
 800abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe2:	bf00      	nop
 800abe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe6:	bc08      	pop	{r3}
 800abe8:	469e      	mov	lr, r3
 800abea:	4770      	bx	lr

0800abec <_fini>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr
