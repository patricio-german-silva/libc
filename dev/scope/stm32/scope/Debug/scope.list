
scope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a068  0800a068  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800a068  0800a068  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a068  0800a068  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a068  0800a068  0001a068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a06c  0800a06c  0001a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800a070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000188c  20000180  20000180  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  20001a0c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155ec  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003971  00000000  00000000  00035795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00039108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  0003a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a727  00000000  00000000  0003b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bb9  00000000  00000000  00055d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092856  00000000  00000000  0006c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  000ff178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08009fcc 	.word	0x08009fcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08009fcc 	.word	0x08009fcc

0800014c <cmd_init>:


/*
 *inicializa las estructuras de datos
 */
void cmd_init(_usrtick *ut, _hb *h, _pcomm *p){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	usrtick = ut;
 8000158:	4a06      	ldr	r2, [pc, #24]	; (8000174 <cmd_init+0x28>)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	6013      	str	r3, [r2, #0]
	hb = h;
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <cmd_init+0x2c>)
 8000160:	68bb      	ldr	r3, [r7, #8]
 8000162:	6013      	str	r3, [r2, #0]
	cdc = p;
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <cmd_init+0x30>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
}
 800016a:	bf00      	nop
 800016c:	3714      	adds	r7, #20
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	200001a0 	.word	0x200001a0
 8000178:	200001a4 	.word	0x200001a4
 800017c:	2000019c 	.word	0x2000019c

08000180 <cmd_exec>:
 *
 *
 * 	Respuesta Err: Comando desconocodo
 *
 */
void cmd_exec(_pcomm *p){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	switch(p->rx.buff[p->rx.datastart]){
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	691b      	ldr	r3, [r3, #16]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000190:	4413      	add	r3, r2
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2ba0      	cmp	r3, #160	; 0xa0
 8000196:	d002      	beq.n	800019e <cmd_exec+0x1e>
 8000198:	2ba1      	cmp	r3, #161	; 0xa1
 800019a:	d00b      	beq.n	80001b4 <cmd_exec+0x34>
 800019c:	e01e      	b.n	80001dc <cmd_exec+0x5c>
	/*   ·····································································*/
	/*   ·······················   REPORTES DE INFO   ······················· */
	/*   ·····································································*/
	// Keep alive
	case _CMD_KEEP_ALIVE:{
		pcomm_tx_put_data_frame(p, &p->rx.buff[p->rx.datastart], 1);
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	691b      	ldr	r3, [r3, #16]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80001a6:	4413      	add	r3, r2
 80001a8:	2201      	movs	r2, #1
 80001aa:	4619      	mov	r1, r3
 80001ac:	6878      	ldr	r0, [r7, #4]
 80001ae:	f000 fc97 	bl	8000ae0 <pcomm_tx_put_data_frame>
		break;
 80001b2:	e01b      	b.n	80001ec <cmd_exec+0x6c>
	}
	// Firmware version
	case _CMD_FIRMWARE_VERSION:{
		uint8_t firmware_version_size = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]
		while(firmware_version[firmware_version_size++]);
 80001b8:	bf00      	nop
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	73fa      	strb	r2, [r7, #15]
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b0e      	ldr	r3, [pc, #56]	; (80001fc <cmd_exec+0x7c>)
 80001c4:	5c9b      	ldrb	r3, [r3, r2]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d1f7      	bne.n	80001ba <cmd_exec+0x3a>
		pcomm_tx_put_cmd_frame(p, _CMD_FIRMWARE_VERSION, (uint8_t *)firmware_version, firmware_version_size-1);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	3b01      	subs	r3, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <cmd_exec+0x7c>)
 80001d2:	21a1      	movs	r1, #161	; 0xa1
 80001d4:	6878      	ldr	r0, [r7, #4]
 80001d6:	f000 fcc0 	bl	8000b5a <pcomm_tx_put_cmd_frame>
		break;
 80001da:	e007      	b.n	80001ec <cmd_exec+0x6c>
	}
	// Comando desconocido
	default:{
		pcomm_tx_put_data_frame(p, (uint8_t *)cmd_error, 3);
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <cmd_exec+0x80>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2203      	movs	r2, #3
 80001e2:	4619      	mov	r1, r3
 80001e4:	6878      	ldr	r0, [r7, #4]
 80001e6:	f000 fc7b 	bl	8000ae0 <pcomm_tx_put_data_frame>
		break;
 80001ea:	bf00      	nop
	}
	}
	pcomm_rx_data_flush(p);
 80001ec:	6878      	ldr	r0, [r7, #4]
 80001ee:	f000 fbb5 	bl	800095c <pcomm_rx_data_flush>
}
 80001f2:	bf00      	nop
 80001f4:	3710      	adds	r7, #16
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	0800a040 	.word	0x0800a040
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_ADC_ConvCpltCallback>:
 * --------------  REDEFINICION DE MANEJO DE INTERRUPCIONES   ---------------------------
 */
/*
 * ISR ADC - Conversion complete
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
	...

08000218 <heartbeat_gpio_callback>:
 */

/*
 * Al hearbeat
 */
void heartbeat_gpio_callback(uint8_t state){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, state);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	461a      	mov	r2, r3
 8000226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <heartbeat_gpio_callback+0x20>)
 800022c:	f001 ff78 	bl	8002120 <HAL_GPIO_WritePin>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40011000 	.word	0x40011000

0800023c <cdc_receive>:

/*
 * al modulo CDC para la carga de datos recibidos por USB CDC
 */
void cdc_receive(uint8_t *Buf, uint32_t *Len){
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
	pcomm_rx_receive_array(&cdc, Buf, *Len);
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	6879      	ldr	r1, [r7, #4]
 800024e:	4803      	ldr	r0, [pc, #12]	; (800025c <cdc_receive+0x20>)
 8000250:	f000 fb3d 	bl	80008ce <pcomm_rx_receive_array>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	200007f0 	.word	0x200007f0

08000260 <tasks_1ms>:

/*
 * Al planificador usrtick
 */
void tasks_1ms(){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	// Envio datos disponibles en pcomm CDC
	if(pcomm_tx_data_ready(&cdc)){
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <tasks_1ms+0x48>)
 8000266:	f000 fcd4 	bl	8000c12 <pcomm_tx_data_ready>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00f      	beq.n	8000290 <tasks_1ms+0x30>
		if(CDC_Transmit_FS_Status() == USBD_OK){
 8000270:	f009 fab6 	bl	80097e0 <CDC_Transmit_FS_Status>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d10a      	bne.n	8000290 <tasks_1ms+0x30>
			CDC_Transmit_FS(cdc.tx.buff, cdc.tx.iw);
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <tasks_1ms+0x48>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <tasks_1ms+0x48>)
 8000280:	88d2      	ldrh	r2, [r2, #6]
 8000282:	4611      	mov	r1, r2
 8000284:	4618      	mov	r0, r3
 8000286:	f009 fa77 	bl	8009778 <CDC_Transmit_FS>
			pcomm_tx_data_flush(&cdc);
 800028a:	4807      	ldr	r0, [pc, #28]	; (80002a8 <tasks_1ms+0x48>)
 800028c:	f000 fccc 	bl	8000c28 <pcomm_tx_data_flush>
		}
	}

	// Ejecucion de comandos
	if(pcomm_rx_data_ready(&cdc)){
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <tasks_1ms+0x48>)
 8000292:	f000 fb4b 	bl	800092c <pcomm_rx_data_ready>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <tasks_1ms+0x42>
		cmd_exec(&cdc);
 800029c:	4802      	ldr	r0, [pc, #8]	; (80002a8 <tasks_1ms+0x48>)
 800029e:	f7ff ff6f 	bl	8000180 <cmd_exec>
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200007f0 	.word	0x200007f0

080002ac <tasks_10ms>:

void tasks_10ms(){}
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <tasks_100ms>:

void tasks_100ms(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	heartbeat(&hb);
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <tasks_100ms+0x10>)
 80002be:	f001 f8ad 	bl	800141c <heartbeat>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200007e4 	.word	0x200007e4

080002cc <tasks_1s>:

void tasks_1s(){}
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <tasks_10s>:

void tasks_10s(){}
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ea:	f001 f8ed 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ee:	f000 f873 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f2:	f000 fa1d 	bl	8000730 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002f6:	f000 f8cd 	bl	8000494 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002fa:	f000 f919 	bl	8000530 <MX_ADC2_Init>
  MX_TIM4_Init();
 80002fe:	f000 f9a1 	bl	8000644 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000302:	f009 f975 	bl	80095f0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000306:	f000 f951 	bl	80005ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Inicializacion del planificador usertick
  usrtick_init(&usrtick, 1000);
 800030a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800030e:	4824      	ldr	r0, [pc, #144]	; (80003a0 <main+0xbc>)
 8000310:	f000 ff5e 	bl	80011d0 <usrtick_init>
  usrtick_attach(&usrtick, tasks_1ms, 1);
 8000314:	2201      	movs	r2, #1
 8000316:	4923      	ldr	r1, [pc, #140]	; (80003a4 <main+0xc0>)
 8000318:	4821      	ldr	r0, [pc, #132]	; (80003a0 <main+0xbc>)
 800031a:	f000 ff72 	bl	8001202 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_10ms, 10);
 800031e:	220a      	movs	r2, #10
 8000320:	4921      	ldr	r1, [pc, #132]	; (80003a8 <main+0xc4>)
 8000322:	481f      	ldr	r0, [pc, #124]	; (80003a0 <main+0xbc>)
 8000324:	f000 ff6d 	bl	8001202 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_100ms, 100);
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	4920      	ldr	r1, [pc, #128]	; (80003ac <main+0xc8>)
 800032c:	481c      	ldr	r0, [pc, #112]	; (80003a0 <main+0xbc>)
 800032e:	f000 ff68 	bl	8001202 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_1s, 1000);
 8000332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000336:	491e      	ldr	r1, [pc, #120]	; (80003b0 <main+0xcc>)
 8000338:	4819      	ldr	r0, [pc, #100]	; (80003a0 <main+0xbc>)
 800033a:	f000 ff62 	bl	8001202 <usrtick_attach>
  usrtick_attach(&usrtick, tasks_10s, 10000);
 800033e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000342:	491c      	ldr	r1, [pc, #112]	; (80003b4 <main+0xd0>)
 8000344:	4816      	ldr	r0, [pc, #88]	; (80003a0 <main+0xbc>)
 8000346:	f000 ff5c 	bl	8001202 <usrtick_attach>

  // Inicializacion de heartbeat
  heartbeat_init(&hb);
 800034a:	481b      	ldr	r0, [pc, #108]	; (80003b8 <main+0xd4>)
 800034c:	f001 f852 	bl	80013f4 <heartbeat_init>
  heartbeat_attach(&hb, heartbeat_gpio_callback);
 8000350:	491a      	ldr	r1, [pc, #104]	; (80003bc <main+0xd8>)
 8000352:	4819      	ldr	r0, [pc, #100]	; (80003b8 <main+0xd4>)
 8000354:	f001 f885 	bl	8001462 <heartbeat_attach>

  // Inicializo protocolo de comunicación
  pcomm_init(&cdc, _PCOMM_TX_MODE_BATCH, __rx_bf_cdc, _PCOMM_RX_BUFF_SIZE, __tx_bf_cdc, _PCOMM_TX_BUFF_SIZE, 100);
 8000358:	2364      	movs	r3, #100	; 0x64
 800035a:	9302      	str	r3, [sp, #8]
 800035c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <main+0xdc>)
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036a:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <main+0xe0>)
 800036c:	2101      	movs	r1, #1
 800036e:	4816      	ldr	r0, [pc, #88]	; (80003c8 <main+0xe4>)
 8000370:	f000 fa4f 	bl	8000812 <pcomm_init>

  // Inicializo recepcion de comandos
  cmd_init(&usrtick, &hb, &cdc);
 8000374:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <main+0xe4>)
 8000376:	4910      	ldr	r1, [pc, #64]	; (80003b8 <main+0xd4>)
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <main+0xbc>)
 800037a:	f7ff fee7 	bl	800014c <cmd_init>

  // Establezco la funcion callback para la recepcion sobre USB CDC
  CDC_Attach_Receive_FS(cdc_receive);
 800037e:	4813      	ldr	r0, [pc, #76]	; (80003cc <main+0xe8>)
 8000380:	f009 fa20 	bl	80097c4 <CDC_Attach_Receive_FS>

  //  Inicio los Timers
  HAL_TIM_Base_Start_IT(&htim3);
 8000384:	4812      	ldr	r0, [pc, #72]	; (80003d0 <main+0xec>)
 8000386:	f004 f8df 	bl	8004548 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 800038a:	4812      	ldr	r0, [pc, #72]	; (80003d4 <main+0xf0>)
 800038c:	f004 f892 	bl	80044b4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000390:	2108      	movs	r1, #8
 8000392:	4810      	ldr	r0, [pc, #64]	; (80003d4 <main+0xf0>)
 8000394:	f004 f982 	bl	800469c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	usrtick_work(&usrtick);
 8000398:	4801      	ldr	r0, [pc, #4]	; (80003a0 <main+0xbc>)
 800039a:	f000 ff69 	bl	8001270 <usrtick_work>
 800039e:	e7fb      	b.n	8000398 <main+0xb4>
 80003a0:	20000798 	.word	0x20000798
 80003a4:	08000261 	.word	0x08000261
 80003a8:	080002ad 	.word	0x080002ad
 80003ac:	080002b9 	.word	0x080002b9
 80003b0:	080002cd 	.word	0x080002cd
 80003b4:	080002d9 	.word	0x080002d9
 80003b8:	200007e4 	.word	0x200007e4
 80003bc:	08000219 	.word	0x08000219
 80003c0:	20000398 	.word	0x20000398
 80003c4:	20000298 	.word	0x20000298
 80003c8:	200007f0 	.word	0x200007f0
 80003cc:	0800023d 	.word	0x0800023d
 80003d0:	20000208 	.word	0x20000208
 80003d4:	20000250 	.word	0x20000250

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b094      	sub	sp, #80	; 0x50
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e2:	2228      	movs	r2, #40	; 0x28
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f009 fde8 	bl	8009fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000408:	2301      	movs	r3, #1
 800040a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000416:	2301      	movs	r3, #1
 8000418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000424:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000428:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fb52 	bl	8003ad8 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800043a:	f000 f9e5 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	2102      	movs	r1, #2
 800045a:	4618      	mov	r0, r3
 800045c:	f003 fdbe 	bl	8003fdc <HAL_RCC_ClockConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000466:	f000 f9cf 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800046a:	2312      	movs	r3, #18
 800046c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800046e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000472:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000474:	2300      	movs	r3, #0
 8000476:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	4618      	mov	r0, r3
 800047c:	f003 ff14 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000486:	f000 f9bf 	bl	8000808 <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3750      	adds	r7, #80	; 0x50
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800049e:	463b      	mov	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_ADC1_Init+0x94>)
 80004aa:	4a20      	ldr	r2, [pc, #128]	; (800052c <MX_ADC1_Init+0x98>)
 80004ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ae:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_ADC1_Init+0x94>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <MX_ADC1_Init+0x94>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_ADC1_Init+0x94>)
 80004bc:	2200      	movs	r2, #0
 80004be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <MX_ADC1_Init+0x94>)
 80004c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_ADC1_Init+0x94>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <MX_ADC1_Init+0x94>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d4:	4814      	ldr	r0, [pc, #80]	; (8000528 <MX_ADC1_Init+0x94>)
 80004d6:	f001 f859 	bl	800158c <HAL_ADC_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 80004e0:	f000 f992 	bl	8000808 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80004e4:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80004e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4619      	mov	r1, r3
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <MX_ADC1_Init+0x94>)
 80004f2:	f001 fb31 	bl	8001b58 <HAL_ADCEx_MultiModeConfigChannel>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004fc:	f000 f984 	bl	8000808 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000500:	2300      	movs	r3, #0
 8000502:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000504:	2301      	movs	r3, #1
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800050c:	463b      	mov	r3, r7
 800050e:	4619      	mov	r1, r3
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_ADC1_Init+0x94>)
 8000512:	f001 f9df 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800051c:	f000 f974 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200001a8 	.word	0x200001a8
 800052c:	40012400 	.word	0x40012400

08000530 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_ADC2_Init+0x74>)
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <MX_ADC2_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_ADC2_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_ADC2_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_ADC2_Init+0x74>)
 8000554:	2200      	movs	r2, #0
 8000556:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_ADC2_Init+0x74>)
 800055a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800055e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <MX_ADC2_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_ADC2_Init+0x74>)
 8000568:	2201      	movs	r2, #1
 800056a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <MX_ADC2_Init+0x74>)
 800056e:	f001 f80d 	bl	800158c <HAL_ADC_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000578:	f000 f946 	bl	8000808 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000580:	2301      	movs	r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_ADC2_Init+0x74>)
 800058e:	f001 f9a1 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000598:	f000 f936 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001d8 	.word	0x200001d8
 80005a8:	40012800 	.word	0x40012800

080005ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_TIM3_Init+0x90>)
 80005ca:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <MX_TIM3_Init+0x94>)
 80005cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_TIM3_Init+0x90>)
 80005d0:	2247      	movs	r2, #71	; 0x47
 80005d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_TIM3_Init+0x90>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_TIM3_Init+0x90>)
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_TIM3_Init+0x90>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_TIM3_Init+0x90>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005ec:	4813      	ldr	r0, [pc, #76]	; (800063c <MX_TIM3_Init+0x90>)
 80005ee:	f003 ff11 	bl	8004414 <HAL_TIM_Base_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80005f8:	f000 f906 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4619      	mov	r1, r3
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <MX_TIM3_Init+0x90>)
 800060a:	f004 faaf 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000614:	f000 f8f8 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000618:	2320      	movs	r3, #32
 800061a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_TIM3_Init+0x90>)
 8000626:	f004 fe37 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000630:	f000 f8ea 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000208 	.word	0x20000208
 8000640:	40000400 	.word	0x40000400

08000644 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08e      	sub	sp, #56	; 0x38
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_TIM4_Init+0xe4>)
 8000676:	4a2d      	ldr	r2, [pc, #180]	; (800072c <MX_TIM4_Init+0xe8>)
 8000678:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_TIM4_Init+0xe4>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_TIM4_Init+0xe4>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_TIM4_Init+0xe4>)
 8000688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_TIM4_Init+0xe4>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <MX_TIM4_Init+0xe4>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800069a:	4823      	ldr	r0, [pc, #140]	; (8000728 <MX_TIM4_Init+0xe4>)
 800069c:	f003 feba 	bl	8004414 <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80006a6:	f000 f8af 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b4:	4619      	mov	r1, r3
 80006b6:	481c      	ldr	r0, [pc, #112]	; (8000728 <MX_TIM4_Init+0xe4>)
 80006b8:	f004 fa58 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80006c2:	f000 f8a1 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80006c6:	4818      	ldr	r0, [pc, #96]	; (8000728 <MX_TIM4_Init+0xe4>)
 80006c8:	f003 ff90 	bl	80045ec <HAL_TIM_PWM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80006d2:	f000 f899 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <MX_TIM4_Init+0xe4>)
 80006e6:	f004 fdd7 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006f0:	f000 f88a 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f4:	2360      	movs	r3, #96	; 0x60
 80006f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2208      	movs	r2, #8
 8000708:	4619      	mov	r1, r3
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <MX_TIM4_Init+0xe4>)
 800070c:	f004 f970 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000716:	f000 f877 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <MX_TIM4_Init+0xe4>)
 800071c:	f000 fcd4 	bl	80010c8 <HAL_TIM_MspPostInit>

}
 8000720:	bf00      	nop
 8000722:	3738      	adds	r7, #56	; 0x38
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000250 	.word	0x20000250
 800072c:	40000800 	.word	0x40000800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <MX_GPIO_Init+0xcc>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_GPIO_Init+0xcc>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a26      	ldr	r2, [pc, #152]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_GPIO_Init+0xcc>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0320 	and.w	r3, r3, #32
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a20      	ldr	r2, [pc, #128]	; (80007fc <MX_GPIO_Init+0xcc>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_GPIO_Init+0xcc>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <MX_GPIO_Init+0xcc>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_GPIO_Init+0xcc>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007aa:	4815      	ldr	r0, [pc, #84]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007ac:	f001 fcb8 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O1__Pin|O1_A3_Pin|O2__Pin|O2_A5_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	213c      	movs	r1, #60	; 0x3c
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007b6:	f001 fcb3 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007d4:	f001 fb20 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : O1__Pin O1_A3_Pin O2__Pin O2_A5_Pin */
  GPIO_InitStruct.Pin = O1__Pin|O1_A3_Pin|O2__Pin|O2_A5_Pin;
 80007d8:	233c      	movs	r3, #60	; 0x3c
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007f0:	f001 fb12 	bl	8001e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	40011000 	.word	0x40011000
 8000804:	40010800 	.word	0x40010800

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>

08000812 <pcomm_init>:


/*
 * Inicializa el protocolo
 */
void pcomm_init(_pcomm *p, uint8_t mode, uint8_t *rx_buff, uint16_t rx_size, uint8_t *tx_buff, uint16_t tx_size, uint32_t tb){
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	461a      	mov	r2, r3
 800081e:	460b      	mov	r3, r1
 8000820:	72fb      	strb	r3, [r7, #11]
 8000822:	4613      	mov	r3, r2
 8000824:	813b      	strh	r3, [r7, #8]
    p->rx.buff = rx_buff;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	611a      	str	r2, [r3, #16]
    p->rx.iw = 0;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2200      	movs	r2, #0
 8000830:	82da      	strh	r2, [r3, #22]
    p->rx.ir = 0;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2200      	movs	r2, #0
 8000836:	829a      	strh	r2, [r3, #20]
    p->rx.imask = rx_size - 1;
 8000838:	893b      	ldrh	r3, [r7, #8]
 800083a:	3b01      	subs	r3, #1
 800083c:	b29a      	uxth	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	831a      	strh	r2, [r3, #24]
    p->rx.status = 0;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    p->rx.tout_base = tb;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6a3a      	ldr	r2, [r7, #32]
 800084e:	61da      	str	r2, [r3, #28]
    p->rx.tout_value = 0;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
    p->rx.dataready = 0;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p->rx.datastart = 0;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2200      	movs	r2, #0
 8000862:	859a      	strh	r2, [r3, #44]	; 0x2c
    p->rx.busy = 0;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    p->rx.chksum = 0;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    p->rx.checkframe_active = 0;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    p->rx.malformed_frame_errors= 0;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2200      	movs	r2, #0
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
    p->rx.chksum_errors = 0;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
    p->rx.timeout_errors = 0;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2200      	movs	r2, #0
 800088c:	639a      	str	r2, [r3, #56]	; 0x38
    p->tx.buff = tx_buff;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	601a      	str	r2, [r3, #0]
    p->tx.iw = 0;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2200      	movs	r2, #0
 8000898:	80da      	strh	r2, [r3, #6]
    p->tx.ir = 0;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2200      	movs	r2, #0
 800089e:	809a      	strh	r2, [r3, #4]
    p->tx.imask = tx_size - 1;
 80008a0:	8bbb      	ldrh	r3, [r7, #28]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	811a      	strh	r2, [r3, #8]
    p->tx.dataready = 0;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2200      	movs	r2, #0
 80008ae:	819a      	strh	r2, [r3, #12]
    p->tx.busy = 0;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2200      	movs	r2, #0
 80008b4:	739a      	strb	r2, [r3, #14]
    p->tx.chksum= 0;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2200      	movs	r2, #0
 80008ba:	729a      	strb	r2, [r3, #10]
    p->mode = mode;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	7afa      	ldrb	r2, [r7, #11]
 80008c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <pcomm_rx_receive_array>:
/*   -----------  ENTRADA  ---------------*/

/*
 * Ingreso de datos al buffer de entrada
 */
void pcomm_rx_receive_array(_pcomm *p, uint8_t *b, const uint32_t len){
 80008ce:	b490      	push	{r4, r7}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
    p->rx.tout_value = 0;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
    for(uint32_t i = 0; i < len; i++){
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e018      	b.n	8000918 <pcomm_rx_receive_array+0x4a>
        p->rx.buff[p->rx.iw++] = b[i];
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	441a      	add	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6919      	ldr	r1, [r3, #16]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	8adb      	ldrh	r3, [r3, #22]
 80008f4:	1c58      	adds	r0, r3, #1
 80008f6:	b284      	uxth	r4, r0
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	82c4      	strh	r4, [r0, #22]
 80008fc:	440b      	add	r3, r1
 80008fe:	7812      	ldrb	r2, [r2, #0]
 8000900:	701a      	strb	r2, [r3, #0]
        p->rx.iw &= p->rx.imask;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	8ada      	ldrh	r2, [r3, #22]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	8b1b      	ldrh	r3, [r3, #24]
 800090a:	4013      	ands	r3, r2
 800090c:	b29a      	uxth	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	82da      	strh	r2, [r3, #22]
    for(uint32_t i = 0; i < len; i++){
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3e2      	bcc.n	80008e6 <pcomm_rx_receive_array+0x18>
    }
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc90      	pop	{r4, r7}
 800092a:	4770      	bx	lr

0800092c <pcomm_rx_data_ready>:
/*
 * Retorna 1 si se recibió un frame de datos correcto, 0 en caso contrario
 * No procesa nuevos bytes hasta que no se ha leído el ultimo frame de datos
 * Tambien incrementa el timeout
 */
uint8_t pcomm_rx_data_ready(_pcomm *p){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    if(p->rx.dataready)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <pcomm_rx_data_ready+0x16>
        return 1;
 800093e:	2301      	movs	r3, #1
 8000940:	e008      	b.n	8000954 <pcomm_rx_data_ready+0x28>
    else{
        p->rx.tout_value++;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	621a      	str	r2, [r3, #32]
        return _checkframe(p);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f985 	bl	8000c5c <_checkframe>
 8000952:	4603      	mov	r3, r0
    }
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <pcomm_rx_data_flush>:


/*
 * Se termino de leer datos de entrada
 */
void pcomm_rx_data_flush(_pcomm *p){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    p->rx.dataready = 0;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    p->rx.busy = 0;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <pcomm_tx_put_header>:

/*
 * Ingreso de un header al buffer de salida
 * Tener en cuenta que p->tx.dataready solo se actualiza en pcomm_tx_put_chksum o pcomm_tx_put_data_frame
 */
void pcomm_tx_put_header(_pcomm *p, uint8_t size){
 8000980:	b490      	push	{r4, r7}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
    p->tx.chksum = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	729a      	strb	r2, [r3, #10]
    for(int i = 0; i < _header_size-2; i++){
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e022      	b.n	80009de <pcomm_tx_put_header+0x5e>
        p->tx.buff[p->tx.iw++] = _header[i];
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	88db      	ldrh	r3, [r3, #6]
 80009a0:	1c59      	adds	r1, r3, #1
 80009a2:	b288      	uxth	r0, r1
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	80c8      	strh	r0, [r1, #6]
 80009a8:	4413      	add	r3, r2
 80009aa:	492f      	ldr	r1, [pc, #188]	; (8000a68 <pcomm_tx_put_header+0xe8>)
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	440a      	add	r2, r1
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	701a      	strb	r2, [r3, #0]
        p->tx.iw &= p->tx.imask;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	88da      	ldrh	r2, [r3, #6]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	891b      	ldrh	r3, [r3, #8]
 80009bc:	4013      	ands	r3, r2
 80009be:	b29a      	uxth	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	80da      	strh	r2, [r3, #6]
        p->tx.chksum ^= _header[i];
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7a9a      	ldrb	r2, [r3, #10]
 80009c8:	4927      	ldr	r1, [pc, #156]	; (8000a68 <pcomm_tx_put_header+0xe8>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	440b      	add	r3, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4053      	eors	r3, r2
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	729a      	strb	r2, [r3, #10]
    for(int i = 0; i < _header_size-2; i++){
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	2306      	movs	r3, #6
 80009e0:	3b02      	subs	r3, #2
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbd7      	blt.n	8000998 <pcomm_tx_put_header+0x18>
    }
    p->tx.buff[p->tx.iw++] = size;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	88db      	ldrh	r3, [r3, #6]
 80009f0:	1c59      	adds	r1, r3, #1
 80009f2:	b288      	uxth	r0, r1
 80009f4:	6879      	ldr	r1, [r7, #4]
 80009f6:	80c8      	strh	r0, [r1, #6]
 80009f8:	4413      	add	r3, r2
 80009fa:	78fa      	ldrb	r2, [r7, #3]
 80009fc:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	88da      	ldrh	r2, [r3, #6]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	891b      	ldrh	r3, [r3, #8]
 8000a06:	4013      	ands	r3, r2
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	80da      	strh	r2, [r3, #6]
    p->tx.buff[p->tx.iw++] = _header[_header_size-1];
 8000a0e:	2306      	movs	r3, #6
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6819      	ldr	r1, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	88db      	ldrh	r3, [r3, #6]
 8000a1a:	1c58      	adds	r0, r3, #1
 8000a1c:	b284      	uxth	r4, r0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	80c4      	strh	r4, [r0, #6]
 8000a22:	440b      	add	r3, r1
 8000a24:	4910      	ldr	r1, [pc, #64]	; (8000a68 <pcomm_tx_put_header+0xe8>)
 8000a26:	5c8a      	ldrb	r2, [r1, r2]
 8000a28:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	88da      	ldrh	r2, [r3, #6]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	891b      	ldrh	r3, [r3, #8]
 8000a32:	4013      	ands	r3, r2
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	80da      	strh	r2, [r3, #6]
    p->tx.chksum ^= size;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7a9a      	ldrb	r2, [r3, #10]
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	4053      	eors	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	729a      	strb	r2, [r3, #10]
    p->tx.chksum ^= _header[_header_size-1];
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7a9a      	ldrb	r2, [r3, #10]
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	4905      	ldr	r1, [pc, #20]	; (8000a68 <pcomm_tx_put_header+0xe8>)
 8000a52:	5ccb      	ldrb	r3, [r1, r3]
 8000a54:	4053      	eors	r3, r2
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	729a      	strb	r2, [r3, #10]
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc90      	pop	{r4, r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	0800a050 	.word	0x0800a050

08000a6c <pcomm_tx_put_chksum>:


/*
 * Agrego checksum al buffer de salida, el frame está completo
 */
void pcomm_tx_put_chksum(_pcomm *p){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    p->tx.buff[p->tx.iw++] = p->tx.chksum;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	88db      	ldrh	r3, [r3, #6]
 8000a7c:	1c59      	adds	r1, r3, #1
 8000a7e:	b288      	uxth	r0, r1
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	80c8      	strh	r0, [r1, #6]
 8000a84:	4413      	add	r3, r2
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	7a92      	ldrb	r2, [r2, #10]
 8000a8a:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	88da      	ldrh	r2, [r3, #6]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	891b      	ldrh	r3, [r3, #8]
 8000a94:	4013      	ands	r3, r2
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	80da      	strh	r2, [r3, #6]
    if(p->tx.iw > p->tx.ir)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	88da      	ldrh	r2, [r3, #6]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d908      	bls.n	8000aba <pcomm_tx_put_chksum+0x4e>
        p->tx.dataready = p->tx.iw - p->tx.ir;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	88da      	ldrh	r2, [r3, #6]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	889b      	ldrh	r3, [r3, #4]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	819a      	strh	r2, [r3, #12]
    else
        p->tx.dataready = p->tx.imask - p->tx.ir + p->tx.iw + 1;
}
 8000ab8:	e00d      	b.n	8000ad6 <pcomm_tx_put_chksum+0x6a>
        p->tx.dataready = p->tx.imask - p->tx.ir + p->tx.iw + 1;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	891a      	ldrh	r2, [r3, #8]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	889b      	ldrh	r3, [r3, #4]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	88db      	ldrh	r3, [r3, #6]
 8000aca:	4413      	add	r3, r2
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	819a      	strh	r2, [r3, #12]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <pcomm_tx_put_data_frame>:


/*
 * Ingreso de un frame completo al buffer de salida, con *data datos de tamaño size
 */
void pcomm_tx_put_data_frame(_pcomm *p, const uint8_t *data, const uint8_t size){
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	4613      	mov	r3, r2
 8000aec:	71fb      	strb	r3, [r7, #7]
    pcomm_tx_put_header(p, size);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4619      	mov	r1, r3
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ff44 	bl	8000980 <pcomm_tx_put_header>
    for(uint8_t i = 0; i < size; i++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	75fb      	strb	r3, [r7, #23]
 8000afc:	e022      	b.n	8000b44 <pcomm_tx_put_data_frame+0x64>
        p->tx.buff[p->tx.iw++] = data[i];
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	441a      	add	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	88db      	ldrh	r3, [r3, #6]
 8000b0c:	1c58      	adds	r0, r3, #1
 8000b0e:	b284      	uxth	r4, r0
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	80c4      	strh	r4, [r0, #6]
 8000b14:	440b      	add	r3, r1
 8000b16:	7812      	ldrb	r2, [r2, #0]
 8000b18:	701a      	strb	r2, [r3, #0]
        p->tx.iw &= p->tx.imask;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	88da      	ldrh	r2, [r3, #6]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	891b      	ldrh	r3, [r3, #8]
 8000b22:	4013      	ands	r3, r2
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	80da      	strh	r2, [r3, #6]
        p->tx.chksum ^= data[i];
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	7a9a      	ldrb	r2, [r3, #10]
 8000b2e:	7dfb      	ldrb	r3, [r7, #23]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	440b      	add	r3, r1
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4053      	eors	r3, r2
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	729a      	strb	r2, [r3, #10]
    for(uint8_t i = 0; i < size; i++){
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	3301      	adds	r3, #1
 8000b42:	75fb      	strb	r3, [r7, #23]
 8000b44:	7dfa      	ldrb	r2, [r7, #23]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d3d8      	bcc.n	8000afe <pcomm_tx_put_data_frame+0x1e>
    }
    pcomm_tx_put_chksum(p);
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff ff8d 	bl	8000a6c <pcomm_tx_put_chksum>
}
 8000b52:	bf00      	nop
 8000b54:	371c      	adds	r7, #28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd90      	pop	{r4, r7, pc}

08000b5a <pcomm_tx_put_cmd_frame>:

/*
 * Ingreso de un frame de comando al buffer de salida, un comando de 1 byte al principio y *data datos de tamaño datasize
 */
void pcomm_tx_put_cmd_frame(_pcomm *p, const uint8_t cmd, const uint8_t *data, const uint8_t datasize){
 8000b5a:	b590      	push	{r4, r7, lr}
 8000b5c:	b087      	sub	sp, #28
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	461a      	mov	r2, r3
 8000b66:	460b      	mov	r3, r1
 8000b68:	72fb      	strb	r3, [r7, #11]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	72bb      	strb	r3, [r7, #10]
    pcomm_tx_put_header(p, datasize+1);
 8000b6e:	7abb      	ldrb	r3, [r7, #10]
 8000b70:	3301      	adds	r3, #1
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff ff02 	bl	8000980 <pcomm_tx_put_header>
    p->tx.buff[p->tx.iw++] = cmd;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	88db      	ldrh	r3, [r3, #6]
 8000b84:	1c59      	adds	r1, r3, #1
 8000b86:	b288      	uxth	r0, r1
 8000b88:	68f9      	ldr	r1, [r7, #12]
 8000b8a:	80c8      	strh	r0, [r1, #6]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	7afa      	ldrb	r2, [r7, #11]
 8000b90:	701a      	strb	r2, [r3, #0]
    p->tx.iw &= p->tx.imask;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	88da      	ldrh	r2, [r3, #6]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	891b      	ldrh	r3, [r3, #8]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	80da      	strh	r2, [r3, #6]
    p->tx.chksum ^= cmd;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	7a9a      	ldrb	r2, [r3, #10]
 8000ba6:	7afb      	ldrb	r3, [r7, #11]
 8000ba8:	4053      	eors	r3, r2
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	729a      	strb	r2, [r3, #10]
    for(uint8_t i = 0; i < datasize; i++){
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	75fb      	strb	r3, [r7, #23]
 8000bb4:	e022      	b.n	8000bfc <pcomm_tx_put_cmd_frame+0xa2>
        p->tx.buff[p->tx.iw++] = data[i];
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	441a      	add	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6819      	ldr	r1, [r3, #0]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	88db      	ldrh	r3, [r3, #6]
 8000bc4:	1c58      	adds	r0, r3, #1
 8000bc6:	b284      	uxth	r4, r0
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	80c4      	strh	r4, [r0, #6]
 8000bcc:	440b      	add	r3, r1
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	701a      	strb	r2, [r3, #0]
        p->tx.iw &= p->tx.imask;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	88da      	ldrh	r2, [r3, #6]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	891b      	ldrh	r3, [r3, #8]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	80da      	strh	r2, [r3, #6]
        p->tx.chksum ^= data[i];
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	7a9a      	ldrb	r2, [r3, #10]
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	440b      	add	r3, r1
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4053      	eors	r3, r2
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	729a      	strb	r2, [r3, #10]
    for(uint8_t i = 0; i < datasize; i++){
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	75fb      	strb	r3, [r7, #23]
 8000bfc:	7dfa      	ldrb	r2, [r7, #23]
 8000bfe:	7abb      	ldrb	r3, [r7, #10]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3d8      	bcc.n	8000bb6 <pcomm_tx_put_cmd_frame+0x5c>
    }
    pcomm_tx_put_chksum(p);
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f7ff ff31 	bl	8000a6c <pcomm_tx_put_chksum>
}
 8000c0a:	bf00      	nop
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}

08000c12 <pcomm_tx_data_ready>:


/*
 * Si hay un frame listo a ser enviado en el buffer de salida retorna su tamaño, 0 en caso contrario
 */
uint16_t pcomm_tx_data_ready(_pcomm *p){
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
    return p->tx.dataready;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	899b      	ldrh	r3, [r3, #12]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <pcomm_tx_data_flush>:

/*
 * Se termino de enviar datos en buffer de salida
 * Esta funcion solo tiene sentido para _PCOMM_TX_MODE_BATCH
 */
void pcomm_tx_data_flush(_pcomm *p){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    p->tx.dataready = 0;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	819a      	strh	r2, [r3, #12]
    p->tx.busy = 0;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	739a      	strb	r2, [r3, #14]
    if(p->mode == _PCOMM_TX_MODE_BATCH){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d105      	bne.n	8000c52 <pcomm_tx_data_flush+0x2a>
        p->tx.iw = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	80da      	strh	r2, [r3, #6]
        p->tx.ir = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	809a      	strh	r2, [r3, #4]
    }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <_checkframe>:
 * p->rx.status:
 * 		[0..5] : corresponde a cada campo del header, 4 es el tamaño del frame
 * 		6 : en bucle de lectura de datos
 * 		7 : esperando checksum, si checksum coincide hay un frame completo y listo
 */
static uint8_t _checkframe(_pcomm *p){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    if(p->rx.checkframe_active == 1) return 0;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d101      	bne.n	8000c72 <_checkframe+0x16>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e140      	b.n	8000ef4 <_checkframe+0x298>

    if(p->rx.ir == p->rx.iw){
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	8a9a      	ldrh	r2, [r3, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	8adb      	ldrh	r3, [r3, #22]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d117      	bne.n	8000cae <_checkframe+0x52>
        if(p->rx.tout_value > p->rx.tout_base){
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a1a      	ldr	r2, [r3, #32]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d90f      	bls.n	8000caa <_checkframe+0x4e>
            p->rx.tout_value = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
            p->rx.status = 0;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
            p->rx.chksum = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            p->rx.timeout_errors++;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38
        }
        return 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e122      	b.n	8000ef4 <_checkframe+0x298>
    }
    p->rx.tout_value = 0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
    p->rx.checkframe_active = 1;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    while(p->rx.ir != p->rx.iw && p->rx.dataready == 0){
 8000cbc:	bf00      	nop
 8000cbe:	e106      	b.n	8000ece <_checkframe+0x272>
        switch(p->rx.status){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cc6:	2b07      	cmp	r3, #7
 8000cc8:	f200 8101 	bhi.w	8000ece <_checkframe+0x272>
 8000ccc:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <_checkframe+0x78>)
 8000cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd2:	bf00      	nop
 8000cd4:	08000cf5 	.word	0x08000cf5
 8000cd8:	08000cf5 	.word	0x08000cf5
 8000cdc:	08000cf5 	.word	0x08000cf5
 8000ce0:	08000cf5 	.word	0x08000cf5
 8000ce4:	08000d9f 	.word	0x08000d9f
 8000ce8:	08000cf5 	.word	0x08000cf5
 8000cec:	08000e13 	.word	0x08000e13
 8000cf0:	08000e77 	.word	0x08000e77
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:{
                if(_header[p->rx.status] == p->rx.buff[p->rx.ir]){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <_checkframe+0x2a4>)
 8000cfe:	5c9a      	ldrb	r2, [r3, r2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	691b      	ldr	r3, [r3, #16]
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	8a89      	ldrh	r1, [r1, #20]
 8000d08:	440b      	add	r3, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d124      	bne.n	8000d5a <_checkframe+0xfe>
                    p->rx.chksum ^= p->rx.buff[p->rx.ir];
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	8a89      	ldrh	r1, [r1, #20]
 8000d1e:	440b      	add	r3, r1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4053      	eors	r3, r2
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                    p->rx.status++;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    p->rx.ir++;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	8a9b      	ldrh	r3, [r3, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	829a      	strh	r2, [r3, #20]
                    p->rx.ir &= p->rx.imask;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	8a9a      	ldrh	r2, [r3, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	8b1b      	ldrh	r3, [r3, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	829a      	strh	r2, [r3, #20]
 8000d58:	e0b9      	b.n	8000ece <_checkframe+0x272>
                }else{
                    if(p->rx.status == 0){ // Reproceso el byte actual a menos que sea estado 0, donde si no es una U se descarta
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10e      	bne.n	8000d82 <_checkframe+0x126>
                        p->rx.ir++;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	8a9b      	ldrh	r3, [r3, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	829a      	strh	r2, [r3, #20]
                        p->rx.ir &= p->rx.imask;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	8a9a      	ldrh	r2, [r3, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	8b1b      	ldrh	r3, [r3, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	829a      	strh	r2, [r3, #20]
 8000d80:	e004      	b.n	8000d8c <_checkframe+0x130>
                    }else{
                        p->rx.malformed_frame_errors++;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
                    }
                    p->rx.status = 0;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                    p->rx.chksum = 0;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                }
                break;
 8000d9c:	e097      	b.n	8000ece <_checkframe+0x272>
            }
            case 4:{
                p->rx.datasize = p->rx.buff[p->rx.ir];
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	8a92      	ldrh	r2, [r2, #20]
 8000da6:	4413      	add	r3, r2
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                p->rx.chksum ^= p->rx.buff[p->rx.ir];
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	8a89      	ldrh	r1, [r1, #20]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4053      	eors	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                p->rx.datasize_dec = p->rx.datasize;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                p->rx.datastart = p->rx.ir+2;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	8a9b      	ldrh	r3, [r3, #20]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	859a      	strh	r2, [r3, #44]	; 0x2c
                p->rx.ir++;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	8a9b      	ldrh	r3, [r3, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	829a      	strh	r2, [r3, #20]
                p->rx.ir &= p->rx.imask;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	8a9a      	ldrh	r2, [r3, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	8b1b      	ldrh	r3, [r3, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	829a      	strh	r2, [r3, #20]
                p->rx.status++;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                break;
 8000e10:	e05d      	b.n	8000ece <_checkframe+0x272>
            }
            case 6:{
                p->rx.datasize_dec--;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                p->rx.chksum ^= p->rx.buff[p->rx.ir];
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	8a89      	ldrh	r1, [r1, #20]
 8000e30:	440b      	add	r3, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4053      	eors	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                p->rx.ir++;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8a9b      	ldrh	r3, [r3, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	829a      	strh	r2, [r3, #20]
                p->rx.ir &= p->rx.imask;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	8a9a      	ldrh	r2, [r3, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	8b1b      	ldrh	r3, [r3, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	829a      	strh	r2, [r3, #20]
                if(p->rx.datasize_dec == 0){
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d134      	bne.n	8000ece <_checkframe+0x272>
                    p->rx.status++;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                break;
 8000e74:	e02b      	b.n	8000ece <_checkframe+0x272>
            }
            case 7:{
                if(p->rx.chksum == p->rx.buff[p->rx.ir]){ // Se recibió un frame correcto
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	8a89      	ldrh	r1, [r1, #20]
 8000e84:	440b      	add	r3, r1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d112      	bne.n	8000eb2 <_checkframe+0x256>
                    p->rx.ir++;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	8a9b      	ldrh	r3, [r3, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	829a      	strh	r2, [r3, #20]
                    p->rx.ir &= p->rx.imask;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	8a9a      	ldrh	r2, [r3, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	8b1b      	ldrh	r3, [r3, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	829a      	strh	r2, [r3, #20]
                    p->rx.dataready = 1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000eb0:	e004      	b.n	8000ebc <_checkframe+0x260>
                }else{
                    p->rx.chksum_errors++;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
                }
                // Si no está correcto se reprocesa el byte actual
                p->rx.status = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                p->rx.chksum = 0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                break;
 8000ecc:	bf00      	nop
    while(p->rx.ir != p->rx.iw && p->rx.dataready == 0){
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	8a9a      	ldrh	r2, [r3, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	8adb      	ldrh	r3, [r3, #22]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d005      	beq.n	8000ee6 <_checkframe+0x28a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f43f aeed 	beq.w	8000cc0 <_checkframe+0x64>
            }
        }
    }
    p->rx.checkframe_active = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    return p->rx.dataready;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	0800a050 	.word	0x0800a050

08000f04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_MspInit+0x60>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_MspInit+0x60>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000

08000f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a30      	ldr	r2, [pc, #192]	; (8001044 <HAL_ADC_MspInit+0xdc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d12a      	bne.n	8000fde <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a2e      	ldr	r2, [pc, #184]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a28      	ldr	r2, [pc, #160]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = A1_Pin;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A1_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4821      	ldr	r0, [pc, #132]	; (800104c <HAL_ADC_MspInit+0xe4>)
 8000fc8:	f000 ff26 	bl	8001e18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2012      	movs	r0, #18
 8000fd2:	f000 feea 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fd6:	2012      	movs	r0, #18
 8000fd8:	f000 ff03 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000fdc:	e02e      	b.n	800103c <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <HAL_ADC_MspInit+0xe8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d129      	bne.n	800103c <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_ADC_MspInit+0xe0>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = A2_Pin;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	4619      	mov	r1, r3
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_ADC_MspInit+0xe4>)
 8001028:	f000 fef6 	bl	8001e18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2012      	movs	r0, #18
 8001032:	f000 feba 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001036:	2012      	movs	r0, #18
 8001038:	f000 fed3 	bl	8001de2 <HAL_NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40012400 	.word	0x40012400
 8001048:	40021000 	.word	0x40021000
 800104c:	40010800 	.word	0x40010800
 8001050:	40012800 	.word	0x40012800

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a16      	ldr	r2, [pc, #88]	; (80010bc <HAL_TIM_Base_MspInit+0x68>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10c      	bne.n	8001080 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_TIM_Base_MspInit+0x6c>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <HAL_TIM_Base_MspInit+0x6c>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	61d3      	str	r3, [r2, #28]
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_TIM_Base_MspInit+0x6c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800107e:	e018      	b.n	80010b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_TIM_Base_MspInit+0x70>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d113      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_TIM_Base_MspInit+0x6c>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_TIM_Base_MspInit+0x6c>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_TIM_Base_MspInit+0x6c>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201e      	movs	r0, #30
 80010a8:	f000 fe7f 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010ac:	201e      	movs	r0, #30
 80010ae:	f000 fe98 	bl	8001de2 <HAL_NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40000400 	.word	0x40000400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40000800 	.word	0x40000800

080010c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_TIM_MspPostInit+0x5c>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d118      	bne.n	800111a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_TIM_MspPostInit+0x60>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_TIM_MspPostInit+0x60>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_TIM_MspPostInit+0x60>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_1_Pin;
 8001100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2302      	movs	r3, #2
 800110c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_1_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_TIM_MspPostInit+0x64>)
 8001116:	f000 fe7f 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40000800 	.word	0x40000800
 8001128:	40021000 	.word	0x40021000
 800112c:	40010c00 	.word	0x40010c00

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f9ed 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <ADC1_2_IRQHandler+0x14>)
 8001186:	f000 fad9 	bl	800173c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <ADC1_2_IRQHandler+0x18>)
 800118c:	f000 fad6 	bl	800173c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001a8 	.word	0x200001a8
 8001198:	200001d8 	.word	0x200001d8

0800119c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011a2:	f001 f906 	bl	80023b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20001500 	.word	0x20001500

080011b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM4_IRQHandler+0x10>)
 80011b6:	f003 fb13 	bl	80047e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000250 	.word	0x20000250

080011c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <usrtick_init>:
static inline uint32_t _usrtick_get_us();
static inline uint32_t _usrtick_get_us_since(uint32_t since);


/* Inicializa temporizadores */
void usrtick_init(_usrtick *utk, uint32_t p){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	utk->ltime = 0;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
	utk->ctime = 0;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
	utk->ptime = p;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	609a      	str	r2, [r3, #8]
#ifdef _UTIL_USE_USRTICK_STATISTICS
	utk->stime = 0;
	utk->uptime = 0;
#endif
	utk->cbcnt = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	731a      	strb	r2, [r3, #12]
	utk->cbpcs = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	735a      	strb	r2, [r3, #13]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <usrtick_attach>:


void usrtick_attach(_usrtick *utk, usrtick_attach_def f, uint32_t p){
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
	if(utk->cbcnt < _UTIL_USRTICK_CALLBACK_NUM){
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	7b1b      	ldrb	r3, [r3, #12]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d827      	bhi.n	8001266 <usrtick_attach+0x64>
		utk->proc[utk->cbcnt].period = p;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	7b1b      	ldrb	r3, [r3, #12]
 800121a:	4619      	mov	r1, r3
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	460b      	mov	r3, r1
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	440b      	add	r3, r1
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3314      	adds	r3, #20
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
		utk->proc[utk->cbcnt].curr = 0;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	7b1b      	ldrb	r3, [r3, #12]
 8001232:	4619      	mov	r1, r3
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	460b      	mov	r3, r1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	440b      	add	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3318      	adds	r3, #24
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
		utk->proc[utk->cbcnt++].usrtick_callback = f;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	7b1b      	ldrb	r3, [r3, #12]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	b2d1      	uxtb	r1, r2
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	7311      	strb	r1, [r2, #12]
 8001252:	4619      	mov	r1, r3
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	460b      	mov	r3, r1
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	440b      	add	r3, r1
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3310      	adds	r3, #16
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	601a      	str	r2, [r3, #0]
	}
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <usrtick_work>:


void usrtick_work(_usrtick *utk){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	if(utk->cbpcs != 0 || _usrtick_get_us_since(utk->ltime) >= utk->ptime){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7b5b      	ldrb	r3, [r3, #13]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <usrtick_work+0x24>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f889 	bl	800139c <_usrtick_get_us_since>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	429a      	cmp	r2, r3
 8001292:	d363      	bcc.n	800135c <usrtick_work+0xec>

		if(utk->cbpcs == 0){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7b5b      	ldrb	r3, [r3, #13]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d156      	bne.n	800134a <usrtick_work+0xda>
#ifdef _UTIL_USE_USRTICK_STATISTICS
			utk->stime += _usrtick_get_us_since(utk->ltime);
#endif
			utk->ltime = _usrtick_get_us();
 800129c:	f000 f862 	bl	8001364 <_usrtick_get_us>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
		}

		while(utk->cbpcs < utk->cbcnt){
 80012a6:	e050      	b.n	800134a <usrtick_work+0xda>
			utk->proc[utk->cbpcs].curr++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7b5b      	ldrb	r3, [r3, #13]
 80012ac:	461a      	mov	r2, r3
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	3318      	adds	r3, #24
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1c59      	adds	r1, r3, #1
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4403      	add	r3, r0
 80012cc:	3318      	adds	r3, #24
 80012ce:	6019      	str	r1, [r3, #0]
			if(utk->proc[utk->cbpcs].curr >= utk->proc[utk->cbpcs].period){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7b5b      	ldrb	r3, [r3, #13]
 80012d4:	4619      	mov	r1, r3
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	440b      	add	r3, r1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	3318      	adds	r3, #24
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7b5b      	ldrb	r3, [r3, #13]
 80012ea:	4618      	mov	r0, r3
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4603      	mov	r3, r0
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4403      	add	r3, r0
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	3314      	adds	r3, #20
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d31e      	bcc.n	800133e <usrtick_work+0xce>
				utk->proc[utk->cbpcs].curr = 0;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7b5b      	ldrb	r3, [r3, #13]
 8001304:	4619      	mov	r1, r3
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	440b      	add	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3318      	adds	r3, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
				tmptime = _usrtick_get_us_since(tmptime);
				utk->proc[utk->cbpcs].utimectr += tmptime;
				if(tmptime >= utk->proc[utk->cbpcs].mtime)
					utk->proc[utk->cbpcs].mtimectr = tmptime;
#else
				utk->proc[utk->cbpcs].usrtick_callback();
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7b5b      	ldrb	r3, [r3, #13]
 800131c:	4619      	mov	r1, r3
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	3310      	adds	r3, #16
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4798      	blx	r3
#endif

				utk->cbpcs++;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7b5b      	ldrb	r3, [r3, #13]
 8001334:	3301      	adds	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	735a      	strb	r2, [r3, #13]
				return;
 800133c:	e00e      	b.n	800135c <usrtick_work+0xec>
			}
			utk->cbpcs++;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7b5b      	ldrb	r3, [r3, #13]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	735a      	strb	r2, [r3, #13]
		while(utk->cbpcs < utk->cbcnt){
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7b5a      	ldrb	r2, [r3, #13]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7b1b      	ldrb	r3, [r3, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d3a8      	bcc.n	80012a8 <usrtick_work+0x38>
		}
		utk->cbpcs = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	735a      	strb	r2, [r3, #13]
			utk->uptime++;
			utk->stime -= 1000000;
		}
#endif
	}
}
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <_usrtick_get_us>:
//	PRIVADO

/*
 * Retorna la cantidad de us actual
 */
static inline uint32_t _usrtick_get_us(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	return (uwTick*1000)+((SysTick->LOAD - SysTick->VAL)/_UTIL_USRTICK_TICKS_ON_US);
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <_usrtick_get_us+0x2c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001370:	fb03 f202 	mul.w	r2, r3, r2
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_usrtick_get_us+0x30>)
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <_usrtick_get_us+0x30>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	1acb      	subs	r3, r1, r3
 800137e:	4906      	ldr	r1, [pc, #24]	; (8001398 <_usrtick_get_us+0x34>)
 8001380:	fba1 1303 	umull	r1, r3, r1, r3
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	4413      	add	r3, r2
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000830 	.word	0x20000830
 8001394:	e000e010 	.word	0xe000e010
 8001398:	38e38e39 	.word	0x38e38e39

0800139c <_usrtick_get_us_since>:

/*
 * Retorna la cantidad de us desde since
 */
static inline uint32_t _usrtick_get_us_since(uint32_t since){
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint32_t curr = (uwTick*1000)+((SysTick->LOAD - SysTick->VAL)/_UTIL_USRTICK_TICKS_ON_US);
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_usrtick_get_us_since+0x4c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ac:	fb03 f202 	mul.w	r2, r3, r2
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <_usrtick_get_us_since+0x50>)
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <_usrtick_get_us_since+0x50>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	1acb      	subs	r3, r1, r3
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <_usrtick_get_us_since+0x54>)
 80013bc:	fba1 1303 	umull	r1, r3, r1, r3
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
	if(since > curr)
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d904      	bls.n	80013d8 <_usrtick_get_us_since+0x3c>
		return 0xFFFFFFFF - since + curr;
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	3b01      	subs	r3, #1
 80013d6:	e002      	b.n	80013de <_usrtick_get_us_since+0x42>
	return curr - since;
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	1ad3      	subs	r3, r2, r3
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000830 	.word	0x20000830
 80013ec:	e000e010 	.word	0xe000e010
 80013f0:	38e38e39 	.word	0x38e38e39

080013f4 <heartbeat_init>:
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _UTIL_USE_HEARTBEAT_UTILITIES
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/* Inicializa hearbeat */
void heartbeat_init(_hb *hb){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	hb->state = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	801a      	strh	r2, [r3, #0]
	hb->dfmsk = 0b1010000000000000;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001408:	809a      	strh	r2, [r3, #4]
	hb->stmsk = 0b1010000000000000;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001410:	805a      	strh	r2, [r3, #2]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <heartbeat>:

void heartbeat(_hb *hb){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	hb->gpio_callback((hb->stmsk & (1 << hb->state)) == 0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	8852      	ldrh	r2, [r2, #2]
 800142c:	4611      	mov	r1, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	8812      	ldrh	r2, [r2, #0]
 8001432:	fa41 f202 	asr.w	r2, r1, r2
 8001436:	f002 0201 	and.w	r2, r2, #1
 800143a:	2a00      	cmp	r2, #0
 800143c:	bf0c      	ite	eq
 800143e:	2201      	moveq	r2, #1
 8001440:	2200      	movne	r2, #0
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	4610      	mov	r0, r2
 8001446:	4798      	blx	r3
	hb->state = (hb->state+1) & 15;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b29b      	uxth	r3, r3
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	b29a      	uxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	801a      	strh	r2, [r3, #0]
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <heartbeat_attach>:

void heartbeat_attach(_hb *hb, heartbeat_gpio_def f){
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
	hb->gpio_callback = f;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	609a      	str	r2, [r3, #8]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff fe8f 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f008 fd65 	bl	8009f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7fe ff1b 	bl	80002e4 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80014b8:	0800a070 	.word	0x0800a070
  ldr r2, =_sbss
 80014bc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80014c0:	20001a0c 	.word	0x20001a0c

080014c4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <CAN1_RX1_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 fc5b 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fd0e 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fc73 	bl	8001dfe <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001530:	f000 fc3b 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000004 	.word	0x20000004
 800154c:	2000000c 	.word	0x2000000c
 8001550:	20000008 	.word	0x20000008

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x20>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	2000000c 	.word	0x2000000c
 8001574:	20000830 	.word	0x20000830

08001578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000830 	.word	0x20000830

0800158c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0be      	b.n	800172c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d109      	bne.n	80015d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fccc 	bl	8000f68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fa77 	bl	8001ac4 <ADC_ConversionStop_Disable>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f040 8099 	bne.w	800171a <HAL_ADC_Init+0x18e>
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 8095 	bne.w	800171a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f8:	f023 0302 	bic.w	r3, r3, #2
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800160c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7b1b      	ldrb	r3, [r3, #12]
 8001612:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001614:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4313      	orrs	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001624:	d003      	beq.n	800162e <HAL_ADC_Init+0xa2>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <HAL_ADC_Init+0xa8>
 800162e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001632:	e000      	b.n	8001636 <HAL_ADC_Init+0xaa>
 8001634:	2300      	movs	r3, #0
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7d1b      	ldrb	r3, [r3, #20]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d119      	bne.n	8001678 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7b1b      	ldrb	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d109      	bne.n	8001660 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	3b01      	subs	r3, #1
 8001652:	035a      	lsls	r2, r3, #13
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	e00b      	b.n	8001678 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f043 0220 	orr.w	r2, r3, #32
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <HAL_ADC_Init+0x1a8>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	430b      	orrs	r3, r1
 800169e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a8:	d003      	beq.n	80016b2 <HAL_ADC_Init+0x126>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	051b      	lsls	r3, r3, #20
 80016ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_ADC_Init+0x1ac>)
 80016d8:	4013      	ands	r3, r2
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d10b      	bne.n	80016f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	f023 0303 	bic.w	r3, r3, #3
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016f6:	e018      	b.n	800172a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	f023 0312 	bic.w	r3, r3, #18
 8001700:	f043 0210 	orr.w	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	f043 0201 	orr.w	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001718:	e007      	b.n	800172a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f043 0210 	orr.w	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800172a:	7dfb      	ldrb	r3, [r7, #23]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	ffe1f7fd 	.word	0xffe1f7fd
 8001738:	ff1f0efe 	.word	0xff1f0efe

0800173c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b20      	cmp	r3, #32
 8001750:	d140      	bne.n	80017d4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b02      	cmp	r3, #2
 800175e:	d139      	bne.n	80017d4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d105      	bne.n	8001778 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001782:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001786:	d11d      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800178c:	2b00      	cmp	r3, #0
 800178e:	d119      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0220 	bic.w	r2, r2, #32
 800179e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe fd1d 	bl	8000204 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f06f 0212 	mvn.w	r2, #18
 80017d2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b80      	cmp	r3, #128	; 0x80
 80017e0:	d14f      	bne.n	8001882 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d148      	bne.n	8001882 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001812:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001816:	d012      	beq.n	800183e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001822:	2b00      	cmp	r3, #0
 8001824:	d125      	bne.n	8001872 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001830:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001834:	d11d      	bne.n	8001872 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800184c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f967 	bl	8001b46 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 020c 	mvn.w	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188c:	2b40      	cmp	r3, #64	; 0x40
 800188e:	d114      	bne.n	80018ba <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10d      	bne.n	80018ba <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f809 	bl	80018c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f06f 0201 	mvn.w	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x20>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e0dc      	b.n	8001aae <HAL_ADC_ConfigChannel+0x1da>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b06      	cmp	r3, #6
 8001902:	d81c      	bhi.n	800193e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b05      	subs	r3, #5
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b05      	subs	r3, #5
 8001930:	fa00 f203 	lsl.w	r2, r0, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	635a      	str	r2, [r3, #52]	; 0x34
 800193c:	e03c      	b.n	80019b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d81c      	bhi.n	8001980 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b23      	subs	r3, #35	; 0x23
 8001958:	221f      	movs	r2, #31
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	4019      	ands	r1, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b23      	subs	r3, #35	; 0x23
 8001972:	fa00 f203 	lsl.w	r2, r0, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
 800197e:	e01b      	b.n	80019b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	; 0x41
 8001992:	221f      	movs	r2, #31
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	4019      	ands	r1, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b41      	subs	r3, #65	; 0x41
 80019ac:	fa00 f203 	lsl.w	r2, r0, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b09      	cmp	r3, #9
 80019be:	d91c      	bls.n	80019fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68d9      	ldr	r1, [r3, #12]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	3b1e      	subs	r3, #30
 80019d2:	2207      	movs	r2, #7
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	4019      	ands	r1, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6898      	ldr	r0, [r3, #8]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	3b1e      	subs	r3, #30
 80019ec:	fa00 f203 	lsl.w	r2, r0, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	e019      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6919      	ldr	r1, [r3, #16]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4019      	ands	r1, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6898      	ldr	r0, [r3, #8]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	fa00 f203 	lsl.w	r2, r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d003      	beq.n	8001a3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a3a:	2b11      	cmp	r3, #17
 8001a3c:	d132      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d125      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d126      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d11a      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_ADC_ConfigChannel+0x1e8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9a      	lsrs	r2, r3, #18
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x1b2>
 8001a92:	e007      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40012400 	.word	0x40012400
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d12e      	bne.n	8001b3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aee:	f7ff fd43 	bl	8001578 <HAL_GetTick>
 8001af2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001af4:	e01b      	b.n	8001b2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001af6:	f7ff fd3f 	bl	8001578 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d914      	bls.n	8001b2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e007      	b.n	8001b3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d0dc      	beq.n	8001af6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b090      	sub	sp, #64	; 0x40
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2230      	movs	r2, #48	; 0x30
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f008 fa23 	bl	8009fbc <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e032      	b.n	8001bea <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8001b8e:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d016      	beq.n	8001bcc <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d010      	beq.n	8001bcc <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d10b      	bne.n	8001bcc <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	e008      	b.n	8001bde <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	f043 0220 	orr.w	r2, r3, #32
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8001bea:	4618      	mov	r0, r3
 8001bec:	3740      	adds	r7, #64	; 0x40
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40012800 	.word	0x40012800
 8001bf8:	40012400 	.word	0x40012400

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4906      	ldr	r1, [pc, #24]	; (8001c94 <__NVIC_EnableIRQ+0x34>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d74:	f7ff ff90 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff2d 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff42 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff90 	bl	8001cec <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5f 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff35 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffa2 	bl	8001d50 <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b08b      	sub	sp, #44	; 0x2c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e169      	b.n	8002100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8158 	bne.w	80020fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a9a      	ldr	r2, [pc, #616]	; (80020b8 <HAL_GPIO_Init+0x2a0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d05e      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e54:	4a98      	ldr	r2, [pc, #608]	; (80020b8 <HAL_GPIO_Init+0x2a0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d875      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e5a:	4a98      	ldr	r2, [pc, #608]	; (80020bc <HAL_GPIO_Init+0x2a4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d058      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e60:	4a96      	ldr	r2, [pc, #600]	; (80020bc <HAL_GPIO_Init+0x2a4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d86f      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e66:	4a96      	ldr	r2, [pc, #600]	; (80020c0 <HAL_GPIO_Init+0x2a8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d052      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e6c:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <HAL_GPIO_Init+0x2a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d869      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e72:	4a94      	ldr	r2, [pc, #592]	; (80020c4 <HAL_GPIO_Init+0x2ac>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d04c      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e78:	4a92      	ldr	r2, [pc, #584]	; (80020c4 <HAL_GPIO_Init+0x2ac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d863      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e7e:	4a92      	ldr	r2, [pc, #584]	; (80020c8 <HAL_GPIO_Init+0x2b0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d046      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e84:	4a90      	ldr	r2, [pc, #576]	; (80020c8 <HAL_GPIO_Init+0x2b0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d85d      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d82a      	bhi.n	8001ee4 <HAL_GPIO_Init+0xcc>
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d859      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e92:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <HAL_GPIO_Init+0x80>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001eed 	.word	0x08001eed
 8001ea0:	08001eff 	.word	0x08001eff
 8001ea4:	08001f41 	.word	0x08001f41
 8001ea8:	08001f47 	.word	0x08001f47
 8001eac:	08001f47 	.word	0x08001f47
 8001eb0:	08001f47 	.word	0x08001f47
 8001eb4:	08001f47 	.word	0x08001f47
 8001eb8:	08001f47 	.word	0x08001f47
 8001ebc:	08001f47 	.word	0x08001f47
 8001ec0:	08001f47 	.word	0x08001f47
 8001ec4:	08001f47 	.word	0x08001f47
 8001ec8:	08001f47 	.word	0x08001f47
 8001ecc:	08001f47 	.word	0x08001f47
 8001ed0:	08001f47 	.word	0x08001f47
 8001ed4:	08001f47 	.word	0x08001f47
 8001ed8:	08001f47 	.word	0x08001f47
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	4a79      	ldr	r2, [pc, #484]	; (80020cc <HAL_GPIO_Init+0x2b4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eea:	e02c      	b.n	8001f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e029      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e024      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	3308      	adds	r3, #8
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e01f      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e01a      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e013      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	611a      	str	r2, [r3, #16]
          break;
 8001f32:	e009      	b.n	8001f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	615a      	str	r2, [r3, #20]
          break;
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          break;
 8001f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2bff      	cmp	r3, #255	; 0xff
 8001f4c:	d801      	bhi.n	8001f52 <HAL_GPIO_Init+0x13a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_Init+0x13e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3304      	adds	r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2bff      	cmp	r3, #255	; 0xff
 8001f5c:	d802      	bhi.n	8001f64 <HAL_GPIO_Init+0x14c>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x152>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	3b08      	subs	r3, #8
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	210f      	movs	r1, #15
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	431a      	orrs	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80b1 	beq.w	80020fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f98:	4b4d      	ldr	r3, [pc, #308]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a4c      	ldr	r2, [pc, #304]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb0:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a40      	ldr	r2, [pc, #256]	; (80020d8 <HAL_GPIO_Init+0x2c0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_GPIO_Init+0x1ec>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3f      	ldr	r2, [pc, #252]	; (80020dc <HAL_GPIO_Init+0x2c4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00d      	beq.n	8002000 <HAL_GPIO_Init+0x1e8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3e      	ldr	r2, [pc, #248]	; (80020e0 <HAL_GPIO_Init+0x2c8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x1e4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3d      	ldr	r2, [pc, #244]	; (80020e4 <HAL_GPIO_Init+0x2cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_GPIO_Init+0x1e0>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e004      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8002004:	2300      	movs	r3, #0
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	f002 0203 	and.w	r2, r2, #3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4093      	lsls	r3, r2
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002016:	492f      	ldr	r1, [pc, #188]	; (80020d4 <HAL_GPIO_Init+0x2bc>)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002030:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	492c      	ldr	r1, [pc, #176]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	4928      	ldr	r1, [pc, #160]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	491e      	ldr	r1, [pc, #120]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4918      	ldr	r1, [pc, #96]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4914      	ldr	r1, [pc, #80]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002098:	4013      	ands	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d021      	beq.n	80020ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_GPIO_Init+0x2d0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
 80020b4:	e021      	b.n	80020fa <HAL_GPIO_Init+0x2e2>
 80020b6:	bf00      	nop
 80020b8:	10320000 	.word	0x10320000
 80020bc:	10310000 	.word	0x10310000
 80020c0:	10220000 	.word	0x10220000
 80020c4:	10210000 	.word	0x10210000
 80020c8:	10120000 	.word	0x10120000
 80020cc:	10110000 	.word	0x10110000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010800 	.word	0x40010800
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40011400 	.word	0x40011400
 80020e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_GPIO_Init+0x304>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4909      	ldr	r1, [pc, #36]	; (800211c <HAL_GPIO_Init+0x304>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f ae8e 	bne.w	8001e2c <HAL_GPIO_Init+0x14>
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	372c      	adds	r7, #44	; 0x2c
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40010400 	.word	0x40010400

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002152:	b08b      	sub	sp, #44	; 0x2c
 8002154:	af06      	add	r7, sp, #24
 8002156:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0fd      	b.n	800235e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f007 fc52 	bl	8009a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2203      	movs	r2, #3
 8002180:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 f91b 	bl	80053c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	687e      	ldr	r6, [r7, #4]
 8002196:	466d      	mov	r5, sp
 8002198:	f106 0410 	add.w	r4, r6, #16
 800219c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800219e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	602b      	str	r3, [r5, #0]
 80021a4:	1d33      	adds	r3, r6, #4
 80021a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f003 f8e5 	bl	8005378 <USB_CoreInit>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0ce      	b.n	800235e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f916 	bl	80053f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e04c      	b.n	800226c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	3301      	adds	r3, #1
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	b298      	uxth	r0, r3
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3336      	adds	r3, #54	; 0x36
 8002210:	4602      	mov	r2, r0
 8002212:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3303      	adds	r3, #3
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	3338      	adds	r3, #56	; 0x38
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800223e:	7bfa      	ldrb	r2, [r7, #15]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	333c      	adds	r3, #60	; 0x3c
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	3340      	adds	r3, #64	; 0x40
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	3301      	adds	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3ad      	bcc.n	80021d2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e044      	b.n	8002306 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	440b      	add	r3, r1
 80022cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	3301      	adds	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d3b5      	bcc.n	800227c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	687e      	ldr	r6, [r7, #4]
 8002318:	466d      	mov	r5, sp
 800231a:	f106 0410 	add.w	r4, r6, #16
 800231e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	602b      	str	r3, [r5, #0]
 8002326:	1d33      	adds	r3, r6, #4
 8002328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	f003 f870 	bl	8005410 <USB_DevInit>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e00d      	b.n	800235e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fd22 	bl	8007da0 <USB_DevDisconnect>

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002366 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_PCD_Start+0x16>
 8002378:	2302      	movs	r3, #2
 800237a:	e016      	b.n	80023aa <HAL_PCD_Start+0x44>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f003 f805 	bl	8005398 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800238e:	2101      	movs	r1, #1
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f007 fdb8 	bl	8009f06 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f005 fcf6 	bl	8007d8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 fcf8 	bl	8007db4 <USB_ReadInterrupts>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ce:	d102      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fb5f 	bl	8002a94 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 fcea 	bl	8007db4 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d112      	bne.n	8002412 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fe:	b292      	uxth	r2, r2
 8002400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f007 fb86 	bl	8009b16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800240a:	2100      	movs	r1, #0
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f923 	bl	8002658 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f005 fccc 	bl	8007db4 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002426:	d10b      	bne.n	8002440 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800243a:	b292      	uxth	r2, r2
 800243c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f005 fcb5 	bl	8007db4 <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002454:	d10b      	bne.n	800246e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002468:	b292      	uxth	r2, r2
 800246a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f005 fc9e 	bl	8007db4 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d126      	bne.n	80024d2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0204 	bic.w	r2, r2, #4
 8002496:	b292      	uxth	r2, r2
 8002498:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0208 	bic.w	r2, r2, #8
 80024ae:	b292      	uxth	r2, r2
 80024b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f007 fb67 	bl	8009b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024cc:	b292      	uxth	r2, r2
 80024ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f005 fc6c 	bl	8007db4 <USB_ReadInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e6:	f040 8082 	bne.w	80025ee <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	77fb      	strb	r3, [r7, #31]
 80024ee:	e010      	b.n	8002512 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	441a      	add	r2, r3
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	8812      	ldrh	r2, [r2, #0]
 8002500:	b292      	uxth	r2, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	3320      	adds	r3, #32
 8002506:	443b      	add	r3, r7
 8002508:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800250c:	7ffb      	ldrb	r3, [r7, #31]
 800250e:	3301      	adds	r3, #1
 8002510:	77fb      	strb	r3, [r7, #31]
 8002512:	7ffb      	ldrb	r3, [r7, #31]
 8002514:	2b07      	cmp	r3, #7
 8002516:	d9eb      	bls.n	80024f0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	b292      	uxth	r2, r2
 8002544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002548:	bf00      	nop
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002552:	b29b      	uxth	r3, r3
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f6      	beq.n	800254a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256e:	b292      	uxth	r2, r2
 8002570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	77fb      	strb	r3, [r7, #31]
 8002578:	e00f      	b.n	800259a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800257a:	7ffb      	ldrb	r3, [r7, #31]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	4611      	mov	r1, r2
 8002582:	7ffa      	ldrb	r2, [r7, #31]
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	440a      	add	r2, r1
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	3320      	adds	r3, #32
 800258c:	443b      	add	r3, r7
 800258e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002592:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002594:	7ffb      	ldrb	r3, [r7, #31]
 8002596:	3301      	adds	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	7ffb      	ldrb	r3, [r7, #31]
 800259c:	2b07      	cmp	r3, #7
 800259e:	d9ec      	bls.n	800257a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0208 	orr.w	r2, r2, #8
 80025b2:	b292      	uxth	r2, r2
 80025b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ca:	b292      	uxth	r2, r2
 80025cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0204 	orr.w	r2, r2, #4
 80025e2:	b292      	uxth	r2, r2
 80025e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f007 fab3 	bl	8009b54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fbde 	bl	8007db4 <USB_ReadInterrupts>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002602:	d10e      	bne.n	8002622 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800260c:	b29a      	uxth	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002616:	b292      	uxth	r2, r2
 8002618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f007 fa6c 	bl	8009afa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f005 fbc4 	bl	8007db4 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002636:	d10b      	bne.n	8002650 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264a:	b292      	uxth	r2, r2
 800264c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_PCD_SetAddress+0x1a>
 800266e:	2302      	movs	r3, #2
 8002670:	e013      	b.n	800269a <HAL_PCD_SetAddress+0x42>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f005 fb6b 	bl	8007d66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	4608      	mov	r0, r1
 80026ac:	4611      	mov	r1, r2
 80026ae:	461a      	mov	r2, r3
 80026b0:	4603      	mov	r3, r0
 80026b2:	70fb      	strb	r3, [r7, #3]
 80026b4:	460b      	mov	r3, r1
 80026b6:	803b      	strh	r3, [r7, #0]
 80026b8:	4613      	mov	r3, r2
 80026ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da0e      	bge.n	80026e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	705a      	strb	r2, [r3, #1]
 80026e4:	e00e      	b.n	8002704 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 0207 	and.w	r2, r3, #7
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002710:	883a      	ldrh	r2, [r7, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	78ba      	ldrb	r2, [r7, #2]
 800271a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800272e:	78bb      	ldrb	r3, [r7, #2]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d102      	bne.n	800273a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_PCD_EP_Open+0xa6>
 8002744:	2302      	movs	r3, #2
 8002746:	e00e      	b.n	8002766 <HAL_PCD_EP_Open+0xc4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fe7a 	bl	8005450 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002764:	7afb      	ldrb	r3, [r7, #11]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800277a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da0e      	bge.n	80027a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0207 	and.w	r2, r3, #7
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_PCD_EP_Close+0x6a>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e00e      	b.n	80027f6 <HAL_PCD_EP_Close+0x88>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68f9      	ldr	r1, [r7, #12]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 f99c 	bl	8005b24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	460b      	mov	r3, r1
 800280c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800280e:	7afb      	ldrb	r3, [r7, #11]
 8002810:	f003 0207 	and.w	r2, r3, #7
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2200      	movs	r2, #0
 8002836:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283e:	7afb      	ldrb	r3, [r7, #11]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	b2da      	uxtb	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6979      	ldr	r1, [r7, #20]
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fb4e 	bl	8005efc <USB_EPStartXfer>
 8002860:	e005      	b.n	800286e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6979      	ldr	r1, [r7, #20]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fb47 	bl	8005efc <USB_EPStartXfer>
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	f003 0207 	and.w	r2, r3, #7
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	460b      	mov	r3, r1
 80028b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2201      	movs	r2, #1
 80028f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f2:	7afb      	ldrb	r3, [r7, #11]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 faf4 	bl	8005efc <USB_EPStartXfer>
 8002914:	e005      	b.n	8002922 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6979      	ldr	r1, [r7, #20]
 800291c:	4618      	mov	r0, r3
 800291e:	f003 faed 	bl	8005efc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 0207 	and.w	r2, r3, #7
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	429a      	cmp	r2, r3
 8002944:	d901      	bls.n	800294a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e04c      	b.n	80029e4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800294a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da0e      	bge.n	8002970 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	705a      	strb	r2, [r3, #1]
 800296e:	e00c      	b.n	800298a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	b2da      	uxtb	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_PCD_EP_SetStall+0x7e>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e01c      	b.n	80029e4 <HAL_PCD_EP_SetStall+0xb8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f005 f8d7 	bl	8007b6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d108      	bne.n	80029da <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f005 f9fc 	bl	8007dd2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d901      	bls.n	8002a0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e040      	b.n	8002a8c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da0e      	bge.n	8002a30 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	705a      	strb	r2, [r3, #1]
 8002a2e:	e00e      	b.n	8002a4e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 0207 	and.w	r2, r3, #7
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_EP_ClrStall+0x82>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e00e      	b.n	8002a8c <HAL_PCD_EP_ClrStall+0xa0>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f005 f8c5 	bl	8007c0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a9c:	e2ec      	b.n	8003078 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002aa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002ab4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f040 8161 	bne.w	8002d80 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002abe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d152      	bne.n	8002b6e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad8:	81fb      	strh	r3, [r7, #14]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	89fb      	ldrh	r3, [r7, #14]
 8002ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3328      	adds	r3, #40	; 0x28
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	3302      	adds	r3, #2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	441a      	add	r2, r3
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f006 ffc9 	bl	8009ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 829b 	beq.w	8003078 <PCD_EP_ISR_Handler+0x5e4>
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 8296 	bne.w	8003078 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b6c:	e284      	b.n	8003078 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d034      	beq.n	8002bf2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3306      	adds	r3, #6
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f005 f953 	bl	8007e72 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bd8:	4013      	ands	r3, r2
 8002bda:	823b      	strh	r3, [r7, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	8a3a      	ldrh	r2, [r7, #16]
 8002be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be6:	b292      	uxth	r2, r2
 8002be8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f006 ff3e 	bl	8009a6c <HAL_PCD_SetupStageCallback>
 8002bf0:	e242      	b.n	8003078 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bf2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f280 823e 	bge.w	8003078 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c08:	4013      	ands	r3, r2
 8002c0a:	83bb      	strh	r3, [r7, #28]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	8bba      	ldrh	r2, [r7, #28]
 8002c12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c16:	b292      	uxth	r2, r2
 8002c18:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3306      	adds	r3, #6
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d019      	beq.n	8002c82 <PCD_EP_ISR_Handler+0x1ee>
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d015      	beq.n	8002c82 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	6959      	ldr	r1, [r3, #20]
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f005 f903 	bl	8007e72 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	441a      	add	r2, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f006 ff07 	bl	8009a90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 81f2 	bne.w	8003078 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4413      	add	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d112      	bne.n	8002ce2 <PCD_EP_ISR_Handler+0x24e>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	801a      	strh	r2, [r3, #0]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	e02f      	b.n	8002d42 <PCD_EP_ISR_Handler+0x2ae>
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ce8:	d813      	bhi.n	8002d12 <PCD_EP_ISR_Handler+0x27e>
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <PCD_EP_ISR_Handler+0x270>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	3301      	adds	r3, #1
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	029b      	lsls	r3, r3, #10
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	801a      	strh	r2, [r3, #0]
 8002d10:	e017      	b.n	8002d42 <PCD_EP_ISR_Handler+0x2ae>
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <PCD_EP_ISR_Handler+0x298>
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	029b      	lsls	r3, r3, #10
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	827b      	strh	r3, [r7, #18]
 8002d54:	8a7b      	ldrh	r3, [r7, #18]
 8002d56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d5a:	827b      	strh	r3, [r7, #18]
 8002d5c:	8a7b      	ldrh	r3, [r7, #18]
 8002d5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d62:	827b      	strh	r3, [r7, #18]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	8a7b      	ldrh	r3, [r7, #18]
 8002d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	8013      	strh	r3, [r2, #0]
 8002d7e:	e17b      	b.n	8003078 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d92:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f280 80ea 	bge.w	8002f70 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002db2:	4013      	ands	r3, r2
 8002db4:	853b      	strh	r3, [r7, #40]	; 0x28
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002dce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	7b1b      	ldrb	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d122      	bne.n	8002e32 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	3306      	adds	r3, #6
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e14:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002e16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8087 	beq.w	8002f2c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	6959      	ldr	r1, [r3, #20]
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	88da      	ldrh	r2, [r3, #6]
 8002e2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e2c:	f005 f821 	bl	8007e72 <USB_ReadPMA>
 8002e30:	e07c      	b.n	8002f2c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	78db      	ldrb	r3, [r3, #3]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d108      	bne.n	8002e4c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f927 	bl	8003094 <HAL_PCD_EP_DB_Receive>
 8002e46:	4603      	mov	r3, r0
 8002e48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e4a:	e06f      	b.n	8002f2c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e66:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	441a      	add	r2, r3
 8002e76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d021      	beq.n	8002eea <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ece:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02a      	beq.n	8002f2c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	6959      	ldr	r1, [r3, #20]
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	891a      	ldrh	r2, [r3, #8]
 8002ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ee4:	f004 ffc5 	bl	8007e72 <USB_ReadPMA>
 8002ee8:	e020      	b.n	8002f2c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	3306      	adds	r3, #6
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f12:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002f14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d008      	beq.n	8002f2c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	6959      	ldr	r1, [r3, #20]
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	895a      	ldrh	r2, [r3, #10]
 8002f26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f28:	f004 ffa3 	bl	8007e72 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f32:	441a      	add	r2, r3
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f3e:	441a      	add	r2, r3
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <PCD_EP_ISR_Handler+0x4c2>
 8002f4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d206      	bcs.n	8002f64 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f006 fd97 	bl	8009a90 <HAL_PCD_DataOutStageCallback>
 8002f62:	e005      	b.n	8002f70 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 ffc6 	bl	8005efc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d07e      	beq.n	8003078 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa8:	843b      	strh	r3, [r7, #32]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	8c3b      	ldrh	r3, [r7, #32]
 8002fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	78db      	ldrb	r3, [r3, #3]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d00c      	beq.n	8002fe8 <PCD_EP_ISR_Handler+0x554>
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d146      	bne.n	800306c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002fde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d141      	bne.n	800306c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003010:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	8bfb      	ldrh	r3, [r7, #30]
 8003018:	429a      	cmp	r2, r3
 800301a:	d906      	bls.n	800302a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	8bfb      	ldrh	r3, [r7, #30]
 8003022:	1ad2      	subs	r2, r2, r3
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	619a      	str	r2, [r3, #24]
 8003028:	e002      	b.n	8003030 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f006 fd41 	bl	8009ac6 <HAL_PCD_DataInStageCallback>
 8003044:	e018      	b.n	8003078 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	8bfb      	ldrh	r3, [r7, #30]
 800304c:	441a      	add	r2, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	8bfb      	ldrh	r3, [r7, #30]
 8003058:	441a      	add	r2, r3
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003064:	4618      	mov	r0, r3
 8003066:	f002 ff49 	bl	8005efc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800306a:	e005      	b.n	8003078 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800306c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800306e:	461a      	mov	r2, r3
 8003070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f91b 	bl	80032ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003080:	b29b      	uxth	r3, r3
 8003082:	b21b      	sxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	f6ff ad0a 	blt.w	8002a9e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3738      	adds	r7, #56	; 0x38
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d07e      	beq.n	80031aa <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	3302      	adds	r3, #2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	8b7b      	ldrh	r3, [r7, #26]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d306      	bcc.n	80030ee <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	8b7b      	ldrh	r3, [r7, #26]
 80030e6:	1ad2      	subs	r2, r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	619a      	str	r2, [r3, #24]
 80030ec:	e002      	b.n	80030f4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d123      	bne.n	8003144 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	833b      	strh	r3, [r7, #24]
 8003118:	8b3b      	ldrh	r3, [r7, #24]
 800311a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800311e:	833b      	strh	r3, [r7, #24]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	441a      	add	r2, r3
 800312e:	8b3b      	ldrh	r3, [r7, #24]
 8003130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003140:	b29b      	uxth	r3, r3
 8003142:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d01f      	beq.n	800318e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	82fb      	strh	r3, [r7, #22]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	8afb      	ldrh	r3, [r7, #22]
 800317a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003186:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800318e:	8b7b      	ldrh	r3, [r7, #26]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8087 	beq.w	80032a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6959      	ldr	r1, [r3, #20]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	891a      	ldrh	r2, [r3, #8]
 80031a2:	8b7b      	ldrh	r3, [r7, #26]
 80031a4:	f004 fe65 	bl	8007e72 <USB_ReadPMA>
 80031a8:	e07c      	b.n	80032a4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	3306      	adds	r3, #6
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	8b7b      	ldrh	r3, [r7, #26]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d306      	bcc.n	80031ec <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	8b7b      	ldrh	r3, [r7, #26]
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	619a      	str	r2, [r3, #24]
 80031ea:	e002      	b.n	80031f2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d123      	bne.n	8003242 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	83fb      	strh	r3, [r7, #30]
 8003216:	8bfb      	ldrh	r3, [r7, #30]
 8003218:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800321c:	83fb      	strh	r3, [r7, #30]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	8bfb      	ldrh	r3, [r7, #30]
 800322e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323e:	b29b      	uxth	r3, r3
 8003240:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11f      	bne.n	800328c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	83bb      	strh	r3, [r7, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	8bbb      	ldrh	r3, [r7, #28]
 8003278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003284:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003288:	b29b      	uxth	r3, r3
 800328a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800328c:	8b7b      	ldrh	r3, [r7, #26]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	895a      	ldrh	r2, [r3, #10]
 800329e:	8b7b      	ldrh	r3, [r7, #26]
 80032a0:	f004 fde7 	bl	8007e72 <USB_ReadPMA>
    }
  }

  return count;
 80032a4:	8b7b      	ldrh	r3, [r7, #26]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b0a2      	sub	sp, #136	; 0x88
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	4613      	mov	r3, r2
 80032ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 81c7 	beq.w	8003656 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	3302      	adds	r3, #2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d907      	bls.n	8003310 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003308:	1ad2      	subs	r2, r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	619a      	str	r2, [r3, #24]
 800330e:	e002      	b.n	8003316 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f040 80b9 	bne.w	8003492 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d126      	bne.n	8003376 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003336:	b29b      	uxth	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	4413      	add	r3, r2
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	011a      	lsls	r2, r3, #4
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	4413      	add	r3, r2
 800334a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800335a:	b29a      	uxth	r2, r3
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	801a      	strh	r2, [r3, #0]
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800336a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336e:	b29a      	uxth	r2, r3
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	e01a      	b.n	80033ac <HAL_PCD_EP_DB_Transmit+0xfe>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d116      	bne.n	80033ac <HAL_PCD_EP_DB_Transmit+0xfe>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338c:	b29b      	uxth	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	4413      	add	r3, r2
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	011a      	lsls	r2, r3, #4
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	4413      	add	r3, r2
 80033a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a8:	2200      	movs	r2, #0
 80033aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d126      	bne.n	8003408 <HAL_PCD_EP_DB_Transmit+0x15a>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4413      	add	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	011a      	lsls	r2, r3, #4
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003400:	b29a      	uxth	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	e017      	b.n	8003438 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d113      	bne.n	8003438 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003418:	b29b      	uxth	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	4413      	add	r3, r2
 8003420:	623b      	str	r3, [r7, #32]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	011a      	lsls	r2, r3, #4
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	4413      	add	r3, r2
 800342c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2200      	movs	r2, #0
 8003436:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f006 fb41 	bl	8009ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 82d4 	beq.w	80039f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	827b      	strh	r3, [r7, #18]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	8a7b      	ldrh	r3, [r7, #18]
 800347c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	b29b      	uxth	r3, r3
 800348e:	8013      	strh	r3, [r2, #0]
 8003490:	e2b2      	b.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d021      	beq.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 8286 	bne.w	80039f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034f4:	441a      	add	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003502:	441a      	add	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d309      	bcc.n	8003528 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003520:	1ad2      	subs	r2, r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	621a      	str	r2, [r3, #32]
 8003526:	e015      	b.n	8003554 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003534:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800353e:	e009      	b.n	8003554 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	785b      	ldrb	r3, [r3, #1]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d155      	bne.n	8003608 <HAL_PCD_EP_DB_Transmit+0x35a>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356a:	b29b      	uxth	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	4413      	add	r3, r2
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	011a      	lsls	r2, r3, #4
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	4413      	add	r3, r2
 800357e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003582:	637b      	str	r3, [r7, #52]	; 0x34
 8003584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003586:	2b00      	cmp	r3, #0
 8003588:	d112      	bne.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x302>
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003594:	b29a      	uxth	r2, r3
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	e047      	b.n	8003640 <HAL_PCD_EP_DB_Transmit+0x392>
 80035b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b2:	2b3e      	cmp	r3, #62	; 0x3e
 80035b4:	d811      	bhi.n	80035da <HAL_PCD_EP_DB_Transmit+0x32c>
 80035b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80035bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_PCD_EP_DB_Transmit+0x31e>
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c8:	3301      	adds	r3, #1
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80035cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	029b      	lsls	r3, r3, #10
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	e032      	b.n	8003640 <HAL_PCD_EP_DB_Transmit+0x392>
 80035da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <HAL_PCD_EP_DB_Transmit+0x342>
 80035ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ec:	3b01      	subs	r3, #1
 80035ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	029b      	lsls	r3, r3, #10
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003600:	b29a      	uxth	r2, r3
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	e01b      	b.n	8003640 <HAL_PCD_EP_DB_Transmit+0x392>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d117      	bne.n	8003640 <HAL_PCD_EP_DB_Transmit+0x392>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	643b      	str	r3, [r7, #64]	; 0x40
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361e:	b29b      	uxth	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003624:	4413      	add	r3, r2
 8003626:	643b      	str	r3, [r7, #64]	; 0x40
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	011a      	lsls	r2, r3, #4
 800362e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003630:	4413      	add	r3, r2
 8003632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363a:	b29a      	uxth	r2, r3
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6959      	ldr	r1, [r3, #20]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	891a      	ldrh	r2, [r3, #8]
 800364c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364e:	b29b      	uxth	r3, r3
 8003650:	f004 fbca 	bl	8007de8 <USB_WritePMA>
 8003654:	e1d0      	b.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	3306      	adds	r3, #6
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800367e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800368a:	429a      	cmp	r2, r3
 800368c:	d307      	bcc.n	800369e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003696:	1ad2      	subs	r2, r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	619a      	str	r2, [r3, #24]
 800369c:	e002      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 80c4 	bne.w	8003836 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d126      	bne.n	8003704 <HAL_PCD_EP_DB_Transmit+0x456>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ca:	4413      	add	r3, r2
 80036cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	011a      	lsls	r2, r3, #4
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	4413      	add	r3, r2
 80036d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	e01a      	b.n	800373a <HAL_PCD_EP_DB_Transmit+0x48c>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d116      	bne.n	800373a <HAL_PCD_EP_DB_Transmit+0x48c>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	677b      	str	r3, [r7, #116]	; 0x74
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003720:	4413      	add	r3, r2
 8003722:	677b      	str	r3, [r7, #116]	; 0x74
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	011a      	lsls	r2, r3, #4
 800372a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372c:	4413      	add	r3, r2
 800372e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003732:	673b      	str	r3, [r7, #112]	; 0x70
 8003734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003736:	2200      	movs	r2, #0
 8003738:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d12f      	bne.n	80037a8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003760:	4413      	add	r3, r2
 8003762:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	011a      	lsls	r2, r3, #4
 800376c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003770:	4413      	add	r3, r2
 8003772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800377a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003786:	b29a      	uxth	r2, r3
 8003788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800379a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379e:	b29a      	uxth	r2, r3
 80037a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e017      	b.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	785b      	ldrb	r3, [r3, #1]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d113      	bne.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x52a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037be:	4413      	add	r3, r2
 80037c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	011a      	lsls	r2, r3, #4
 80037c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ca:	4413      	add	r3, r2
 80037cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037d4:	2200      	movs	r2, #0
 80037d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f006 f971 	bl	8009ac6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 8104 	bne.w	80039f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	441a      	add	r2, r3
 800381c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800382c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003830:	b29b      	uxth	r3, r3
 8003832:	8013      	strh	r3, [r2, #0]
 8003834:	e0e0      	b.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d121      	bne.n	8003884 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	441a      	add	r2, r3
 800386c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003880:	b29b      	uxth	r3, r3
 8003882:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800388a:	2b01      	cmp	r3, #1
 800388c:	f040 80b4 	bne.w	80039f8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003898:	441a      	add	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038a6:	441a      	add	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d309      	bcc.n	80038cc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c4:	1ad2      	subs	r2, r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	621a      	str	r2, [r3, #32]
 80038ca:	e015      	b.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d107      	bne.n	80038e4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80038d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038e2:	e009      	b.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	667b      	str	r3, [r7, #100]	; 0x64
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d155      	bne.n	80039b2 <HAL_PCD_EP_DB_Transmit+0x704>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003914:	b29b      	uxth	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391a:	4413      	add	r3, r2
 800391c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	011a      	lsls	r2, r3, #4
 8003924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003926:	4413      	add	r3, r2
 8003928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800392c:	65bb      	str	r3, [r7, #88]	; 0x58
 800392e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003930:	2b00      	cmp	r3, #0
 8003932:	d112      	bne.n	800395a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800393e:	b29a      	uxth	r2, r3
 8003940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003942:	801a      	strh	r2, [r3, #0]
 8003944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800394e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003952:	b29a      	uxth	r2, r3
 8003954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003956:	801a      	strh	r2, [r3, #0]
 8003958:	e044      	b.n	80039e4 <HAL_PCD_EP_DB_Transmit+0x736>
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	2b3e      	cmp	r3, #62	; 0x3e
 800395e:	d811      	bhi.n	8003984 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	657b      	str	r3, [r7, #84]	; 0x54
 8003966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	3301      	adds	r3, #1
 8003974:	657b      	str	r3, [r7, #84]	; 0x54
 8003976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003978:	b29b      	uxth	r3, r3
 800397a:	029b      	lsls	r3, r3, #10
 800397c:	b29a      	uxth	r2, r3
 800397e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e02f      	b.n	80039e4 <HAL_PCD_EP_DB_Transmit+0x736>
 8003984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	657b      	str	r3, [r7, #84]	; 0x54
 800398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003996:	3b01      	subs	r3, #1
 8003998:	657b      	str	r3, [r7, #84]	; 0x54
 800399a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399c:	b29b      	uxth	r3, r3
 800399e:	029b      	lsls	r3, r3, #10
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	e018      	b.n	80039e4 <HAL_PCD_EP_DB_Transmit+0x736>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d114      	bne.n	80039e4 <HAL_PCD_EP_DB_Transmit+0x736>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c8:	4413      	add	r3, r2
 80039ca:	667b      	str	r3, [r7, #100]	; 0x64
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	011a      	lsls	r2, r3, #4
 80039d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d4:	4413      	add	r3, r2
 80039d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039da:	663b      	str	r3, [r7, #96]	; 0x60
 80039dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039de:	b29a      	uxth	r2, r3
 80039e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6959      	ldr	r1, [r3, #20]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	895a      	ldrh	r2, [r3, #10]
 80039f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f004 f9f8 	bl	8007de8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a12:	823b      	strh	r3, [r7, #16]
 8003a14:	8a3b      	ldrh	r3, [r7, #16]
 8003a16:	f083 0310 	eor.w	r3, r3, #16
 8003a1a:	823b      	strh	r3, [r7, #16]
 8003a1c:	8a3b      	ldrh	r3, [r7, #16]
 8003a1e:	f083 0320 	eor.w	r3, r3, #32
 8003a22:	823b      	strh	r3, [r7, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	8a3b      	ldrh	r3, [r7, #16]
 8003a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3788      	adds	r7, #136	; 0x88
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b087      	sub	sp, #28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	817b      	strh	r3, [r7, #10]
 8003a60:	4613      	mov	r3, r2
 8003a62:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a64:	897b      	ldrh	r3, [r7, #10]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	897b      	ldrh	r3, [r7, #10]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e009      	b.n	8003a9c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a88:	897a      	ldrh	r2, [r7, #10]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	80da      	strh	r2, [r3, #6]
 8003ab0:	e00b      	b.n	8003aca <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e272      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8087 	beq.w	8003c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af8:	4b92      	ldr	r3, [pc, #584]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b04:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d112      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e>
 8003b10:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1e:	4b89      	ldr	r3, [pc, #548]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d06c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x12c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d168      	bne.n	8003c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e24c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x76>
 8003b40:	4b80      	ldr	r3, [pc, #512]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7f      	ldr	r2, [pc, #508]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e02e      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x98>
 8003b56:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7a      	ldr	r2, [pc, #488]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b78      	ldr	r3, [pc, #480]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a77      	ldr	r2, [pc, #476]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0xbc>
 8003b7a:	4b72      	ldr	r3, [pc, #456]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a71      	ldr	r2, [pc, #452]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6e      	ldr	r2, [pc, #440]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b94:	4b6b      	ldr	r3, [pc, #428]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6a      	ldr	r2, [pc, #424]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fce0 	bl	8001578 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fd fcdc 	bl	8001578 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e200      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b5d      	ldr	r3, [pc, #372]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xe4>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd fccc 	bl	8001578 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd fcc8 	bl	8001578 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e1ec      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x10c>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d063      	beq.n	8003cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c12:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c1e:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x18c>
 8003c2a:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x176>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1c0      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4939      	ldr	r1, [pc, #228]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e03a      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fc81 	bl	8001578 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fc7d 	bl	8001578 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1a1      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4927      	ldr	r1, [pc, #156]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fc60 	bl	8001578 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fd fc5c 	bl	8001578 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e180      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03a      	beq.n	8003d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d019      	beq.n	8003d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <HAL_RCC_OscConfig+0x274>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fc40 	bl	8001578 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fc3c 	bl	8001578 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e160      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f000 faa6 	bl	800426c <RCC_Delay>
 8003d20:	e01c      	b.n	8003d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <HAL_RCC_OscConfig+0x274>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fd fc26 	bl	8001578 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2e:	e00f      	b.n	8003d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fd fc22 	bl	8001578 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d908      	bls.n	8003d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e146      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	42420000 	.word	0x42420000
 8003d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e9      	bne.n	8003d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a6 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4a87      	ldr	r2, [pc, #540]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	61d3      	str	r3, [r2, #28]
 8003d86:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b82      	ldr	r3, [pc, #520]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b7f      	ldr	r3, [pc, #508]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7e      	ldr	r2, [pc, #504]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fd fbe3 	bl	8001578 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fd fbdf 	bl	8001578 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	; 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e103      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_RCC_OscConfig+0x312>
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	e02d      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x334>
 8003df2:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a69      	ldr	r2, [pc, #420]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6213      	str	r3, [r2, #32]
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a66      	ldr	r2, [pc, #408]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	6213      	str	r3, [r2, #32]
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x356>
 8003e14:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4a60      	ldr	r2, [pc, #384]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6213      	str	r3, [r2, #32]
 8003e20:	4b5e      	ldr	r3, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4a5d      	ldr	r2, [pc, #372]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6213      	str	r3, [r2, #32]
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4a5a      	ldr	r2, [pc, #360]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6213      	str	r3, [r2, #32]
 8003e3a:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd fb93 	bl	8001578 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fb8f 	bl	8001578 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0b1      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x37e>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd fb7d 	bl	8001578 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd fb79 	bl	8001578 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e09b      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8087 	beq.w	8003fce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d061      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d146      	bne.n	8003f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd fb4d 	bl	8001578 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fd fb49 	bl	8001578 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e06d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	4921      	ldr	r1, [pc, #132]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a19      	ldr	r1, [r3, #32]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd fb1d 	bl	8001578 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fd fb19 	bl	8001578 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e03d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x46a>
 8003f60:	e035      	b.n	8003fce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd fb06 	bl	8001578 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd fb02 	bl	8001578 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e026      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x498>
 8003f8e:	e01e      	b.n	8003fce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e019      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_OscConfig+0x500>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000

08003fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0d0      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d910      	bls.n	8004020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b67      	ldr	r3, [pc, #412]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 0207 	bic.w	r2, r3, #7
 8004006:	4965      	ldr	r1, [pc, #404]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b63      	ldr	r3, [pc, #396]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004038:	4b59      	ldr	r3, [pc, #356]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a58      	ldr	r2, [pc, #352]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a52      	ldr	r2, [pc, #328]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800405a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b50      	ldr	r3, [pc, #320]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	494d      	ldr	r1, [pc, #308]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d040      	beq.n	80040fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e073      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06b      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4936      	ldr	r1, [pc, #216]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040cc:	f7fd fa54 	bl	8001578 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fd fa50 	bl	8001578 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e053      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d210      	bcs.n	800412c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4922      	ldr	r1, [pc, #136]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e032      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4916      	ldr	r1, [pc, #88]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490e      	ldr	r1, [pc, #56]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416a:	f000 f821 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490a      	ldr	r1, [pc, #40]	; (80041a4 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_ClockConfig+0x1d0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd f9b2 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40022000 	.word	0x40022000
 80041a0:	40021000 	.word	0x40021000
 80041a4:	0800a058 	.word	0x0800a058
 80041a8:	20000004 	.word	0x20000004
 80041ac:	20000008 	.word	0x20000008

080041b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	b490      	push	{r4, r7}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041b6:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCC_GetSysClockFreq+0xac>)
 80041b8:	1d3c      	adds	r4, r7, #4
 80041ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041c0:	f240 2301 	movw	r3, #513	; 0x201
 80041c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x40>
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x46>
 80041ee:	e02b      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041f2:	623b      	str	r3, [r7, #32]
      break;
 80041f4:	e02b      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	0c9b      	lsrs	r3, r3, #18
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3328      	adds	r3, #40	; 0x28
 8004200:	443b      	add	r3, r7
 8004202:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004206:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d012      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0c5b      	lsrs	r3, r3, #17
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	3328      	adds	r3, #40	; 0x28
 800421e:	443b      	add	r3, r7
 8004220:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004224:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb4>)
 800422a:	fb03 f202 	mul.w	r2, r3, r2
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	e004      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	623b      	str	r3, [r7, #32]
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb4>)
 800424a:	623b      	str	r3, [r7, #32]
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6a3b      	ldr	r3, [r7, #32]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3728      	adds	r7, #40	; 0x28
 8004254:	46bd      	mov	sp, r7
 8004256:	bc90      	pop	{r4, r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	08009fe8 	.word	0x08009fe8
 8004260:	40021000 	.word	0x40021000
 8004264:	007a1200 	.word	0x007a1200
 8004268:	003d0900 	.word	0x003d0900

0800426c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <RCC_Delay+0x34>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <RCC_Delay+0x38>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0a5b      	lsrs	r3, r3, #9
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004288:	bf00      	nop
  }
  while (Delay --);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1e5a      	subs	r2, r3, #1
 800428e:	60fa      	str	r2, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f9      	bne.n	8004288 <RCC_Delay+0x1c>
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	20000004 	.word	0x20000004
 80042a4:	10624dd3 	.word	0x10624dd3

080042a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d07d      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10d      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d4:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	4a4b      	ldr	r2, [pc, #300]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	61d3      	str	r3, [r2, #28]
 80042e0:	4b49      	ldr	r3, [pc, #292]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f0:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d118      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fc:	4b43      	ldr	r3, [pc, #268]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a42      	ldr	r2, [pc, #264]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004306:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004308:	f7fd f936 	bl	8001578 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	e008      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004310:	f7fd f932 	bl	8001578 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e06d      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b3a      	ldr	r3, [pc, #232]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d02e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	429a      	cmp	r2, r3
 800434a:	d027      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800434c:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004356:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d014      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fd f901 	bl	8001578 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004378:	e00a      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437a:	f7fd f8fd 	bl	8001578 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f241 3288 	movw	r2, #5000	; 0x1388
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e036      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ee      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4917      	ldr	r1, [pc, #92]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4a13      	ldr	r2, [pc, #76]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	490b      	ldr	r1, [pc, #44]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4904      	ldr	r1, [pc, #16]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	40007000 	.word	0x40007000
 8004410:	42420440 	.word	0x42420440

08004414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e041      	b.n	80044aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fe0a 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f000 fc7c 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d001      	beq.n	80044cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e032      	b.n	8004532 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_TIM_Base_Start+0x88>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_TIM_Base_Start+0x48>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d009      	beq.n	80044fc <HAL_TIM_Base_Start+0x48>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <HAL_TIM_Base_Start+0x8c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIM_Base_Start+0x48>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <HAL_TIM_Base_Start+0x90>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d111      	bne.n	8004520 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d010      	beq.n	8004530 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	e007      	b.n	8004530 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800

08004548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e03a      	b.n	80045d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_TIM_Base_Start_IT+0x98>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x58>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x58>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x58>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d111      	bne.n	80045c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d010      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	e007      	b.n	80045d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800

080045ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e041      	b.n	8004682 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f839 	bl	800468a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f000 fb90 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_TIM_PWM_Start+0x24>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e022      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d109      	bne.n	80046da <HAL_TIM_PWM_Start+0x3e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	e015      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d109      	bne.n	80046f4 <HAL_TIM_PWM_Start+0x58>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e008      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e05e      	b.n	80047cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0x82>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800471c:	e013      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0x92>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800472c:	e00b      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xa2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473c:	e003      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fd7e 	bl	8005250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_TIM_PWM_Start+0x138>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d107      	bne.n	800476e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_TIM_PWM_Start+0x138>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_TIM_PWM_Start+0xfa>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004780:	d009      	beq.n	8004796 <HAL_TIM_PWM_Start+0xfa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <HAL_TIM_PWM_Start+0x13c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_TIM_PWM_Start+0xfa>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a12      	ldr	r2, [pc, #72]	; (80047dc <HAL_TIM_PWM_Start+0x140>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d111      	bne.n	80047ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b06      	cmp	r3, #6
 80047a6:	d010      	beq.n	80047ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	e007      	b.n	80047ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800

080047e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d122      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11b      	bne.n	800483c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0202 	mvn.w	r2, #2
 800480c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa78 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004828:	e005      	b.n	8004836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fa6b 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa7a 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d122      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b04      	cmp	r3, #4
 8004856:	d11b      	bne.n	8004890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0204 	mvn.w	r2, #4
 8004860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2202      	movs	r2, #2
 8004866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa4e 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 800487c:	e005      	b.n	800488a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa41 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fa50 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b08      	cmp	r3, #8
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0208 	mvn.w	r2, #8
 80048b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa24 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa17 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fa26 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0210 	mvn.w	r2, #16
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2208      	movs	r2, #8
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9fa 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f9ed 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9fc 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b01      	cmp	r3, #1
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0201 	mvn.w	r2, #1
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f9c8 	bl	8004cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fceb 	bl	8005366 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9c0 	bl	8004d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0220 	mvn.w	r2, #32
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fcb6 	bl	8005354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e0ac      	b.n	8004b64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	f200 809f 	bhi.w	8004b58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004b59 	.word	0x08004b59
 8004a28:	08004b59 	.word	0x08004b59
 8004a2c:	08004b59 	.word	0x08004b59
 8004a30:	08004a95 	.word	0x08004a95
 8004a34:	08004b59 	.word	0x08004b59
 8004a38:	08004b59 	.word	0x08004b59
 8004a3c:	08004b59 	.word	0x08004b59
 8004a40:	08004ad7 	.word	0x08004ad7
 8004a44:	08004b59 	.word	0x08004b59
 8004a48:	08004b59 	.word	0x08004b59
 8004a4c:	08004b59 	.word	0x08004b59
 8004a50:	08004b17 	.word	0x08004b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f9da 	bl	8004e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0208 	orr.w	r2, r2, #8
 8004a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6999      	ldr	r1, [r3, #24]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	619a      	str	r2, [r3, #24]
      break;
 8004a92:	e062      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa20 	bl	8004ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	619a      	str	r2, [r3, #24]
      break;
 8004ad4:	e041      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fa69 	bl	8004fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0208 	orr.w	r2, r2, #8
 8004af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0204 	bic.w	r2, r2, #4
 8004b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69d9      	ldr	r1, [r3, #28]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	61da      	str	r2, [r3, #28]
      break;
 8004b14:	e021      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fab3 	bl	8005088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	61da      	str	r2, [r3, #28]
      break;
 8004b56:	e000      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_ConfigClockSource+0x18>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0b3      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x180>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004baa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d03e      	beq.n	8004c3c <HAL_TIM_ConfigClockSource+0xd0>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	f200 8087 	bhi.w	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	f000 8085 	beq.w	8004cd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d87f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d01a      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xa2>
 8004bd8:	2b70      	cmp	r3, #112	; 0x70
 8004bda:	d87b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d050      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x116>
 8004be0:	2b60      	cmp	r3, #96	; 0x60
 8004be2:	d877      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d03c      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xf6>
 8004be8:	2b50      	cmp	r3, #80	; 0x50
 8004bea:	d873      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d058      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x136>
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d86f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d064      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	d86b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d060      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d867      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05c      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d05a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c0c:	e062      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6899      	ldr	r1, [r3, #8]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f000 faf8 	bl	8005212 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	609a      	str	r2, [r3, #8]
      break;
 8004c3a:	e04e      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6899      	ldr	r1, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f000 fae1 	bl	8005212 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5e:	609a      	str	r2, [r3, #8]
      break;
 8004c60:	e03b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f000 fa58 	bl	8005124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2150      	movs	r1, #80	; 0x50
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 faaf 	bl	80051de <TIM_ITRx_SetConfig>
      break;
 8004c80:	e02b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fa76 	bl	8005180 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2160      	movs	r1, #96	; 0x60
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fa9f 	bl	80051de <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e01b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fa38 	bl	8005124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa8f 	bl	80051de <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e00b      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f000 fa86 	bl	80051de <TIM_ITRx_SetConfig>
        break;
 8004cd2:	e002      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cd4:	bf00      	nop
 8004cd6:	e000      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr

08004d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr

08004d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr
	...

08004d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <TIM_Base_SetConfig+0xb8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0x30>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0x30>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <TIM_Base_SetConfig+0xbc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0x30>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a25      	ldr	r2, [pc, #148]	; (8004e10 <TIM_Base_SetConfig+0xc0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d108      	bne.n	8004d92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	; (8004e08 <TIM_Base_SetConfig+0xb8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <TIM_Base_SetConfig+0x62>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d007      	beq.n	8004db2 <TIM_Base_SetConfig+0x62>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <TIM_Base_SetConfig+0xbc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_Base_SetConfig+0x62>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <TIM_Base_SetConfig+0xc0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d108      	bne.n	8004dc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <TIM_Base_SetConfig+0xb8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d103      	bne.n	8004df8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800

08004e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 0302 	bic.w	r3, r3, #2
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <TIM_OC1_SetConfig+0xc8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10c      	bne.n	8004e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0308 	bic.w	r3, r3, #8
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a13      	ldr	r2, [pc, #76]	; (8004edc <TIM_OC1_SetConfig+0xc8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d111      	bne.n	8004eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40012c00 	.word	0x40012c00

08004ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f023 0210 	bic.w	r2, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0320 	bic.w	r3, r3, #32
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <TIM_OC2_SetConfig+0xd0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10d      	bne.n	8004f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <TIM_OC2_SetConfig+0xd0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d113      	bne.n	8004f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00

08004fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <TIM_OC3_SetConfig+0xd0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10d      	bne.n	800502e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a14      	ldr	r2, [pc, #80]	; (8005084 <TIM_OC3_SetConfig+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d113      	bne.n	800505e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800503c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	621a      	str	r2, [r3, #32]
}
 8005078:	bf00      	nop
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00

08005088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	031b      	lsls	r3, r3, #12
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0f      	ldr	r2, [pc, #60]	; (8005120 <TIM_OC4_SetConfig+0x98>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d109      	bne.n	80050fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	019b      	lsls	r3, r3, #6
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00

08005124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800514e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f023 030a 	bic.w	r3, r3, #10
 8005160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	031b      	lsls	r3, r3, #12
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f043 0307 	orr.w	r3, r3, #7
 8005200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005212:	b480      	push	{r7}
 8005214:	b087      	sub	sp, #28
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	021a      	lsls	r2, r3, #8
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	431a      	orrs	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	4313      	orrs	r3, r2
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	609a      	str	r2, [r3, #8]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2201      	movs	r2, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	431a      	orrs	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e046      	b.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a16      	ldr	r2, [pc, #88]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d009      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a10      	ldr	r2, [pc, #64]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10c      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4313      	orrs	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800

08005354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005378:	b084      	sub	sp, #16
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	f107 0014 	add.w	r0, r7, #20
 8005386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	b004      	add	sp, #16
 8005396:	4770      	bx	lr

08005398 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80053d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	4013      	ands	r3, r2
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005410:	b084      	sub	sp, #16
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	f107 0014 	add.w	r0, r7, #20
 800541e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	b004      	add	sp, #16
 800544e:	4770      	bx	lr

08005450 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005450:	b480      	push	{r7}
 8005452:	b09b      	sub	sp, #108	; 0x6c
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d81f      	bhi.n	80054c2 <USB_ActivateEndpoint+0x72>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <USB_ActivateEndpoint+0x38>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054cb 	.word	0x080054cb
 8005494:	080054a7 	.word	0x080054a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005498:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800549c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054a4:	e012      	b.n	80054cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80054ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054b2:	e00b      	b.n	80054cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80054c0:	e004      	b.n	80054cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80054c8:	e000      	b.n	80054cc <USB_ActivateEndpoint+0x7c>
      break;
 80054ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005504:	b29a      	uxth	r2, r3
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	4313      	orrs	r3, r2
 800550e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	441a      	add	r2, r3
 800551c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	7b1b      	ldrb	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 8149 	bne.w	80057d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8084 	beq.w	8005650 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	011a      	lsls	r2, r3, #4
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	88db      	ldrh	r3, [r3, #6]
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	b29b      	uxth	r3, r3
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	81fb      	strh	r3, [r7, #14]
 800558a:	89fb      	ldrh	r3, [r7, #14]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01b      	beq.n	80055cc <USB_ActivateEndpoint+0x17c>
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	81bb      	strh	r3, [r7, #12]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	89bb      	ldrh	r3, [r7, #12]
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	78db      	ldrb	r3, [r3, #3]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d020      	beq.n	8005616 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ea:	813b      	strh	r3, [r7, #8]
 80055ec:	893b      	ldrh	r3, [r7, #8]
 80055ee:	f083 0320 	eor.w	r3, r3, #32
 80055f2:	813b      	strh	r3, [r7, #8]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	893b      	ldrh	r3, [r7, #8]
 8005600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800560c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005610:	b29b      	uxth	r3, r3
 8005612:	8013      	strh	r3, [r2, #0]
 8005614:	e27f      	b.n	8005b16 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562c:	817b      	strh	r3, [r7, #10]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	897b      	ldrh	r3, [r7, #10]
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]
 800564e:	e262      	b.n	8005b16 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	4413      	add	r3, r2
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	4413      	add	r3, r2
 800566e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	88db      	ldrh	r3, [r3, #6]
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	b29b      	uxth	r3, r3
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	4413      	add	r3, r2
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	011a      	lsls	r2, r3, #4
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	4413      	add	r3, r2
 80056a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056a6:	623b      	str	r3, [r7, #32]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d112      	bne.n	80056d6 <USB_ActivateEndpoint+0x286>
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	e02f      	b.n	8005736 <USB_ActivateEndpoint+0x2e6>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b3e      	cmp	r3, #62	; 0x3e
 80056dc:	d813      	bhi.n	8005706 <USB_ActivateEndpoint+0x2b6>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <USB_ActivateEndpoint+0x2a8>
 80056f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056f4:	3301      	adds	r3, #1
 80056f6:	663b      	str	r3, [r7, #96]	; 0x60
 80056f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	029b      	lsls	r3, r3, #10
 80056fe:	b29a      	uxth	r2, r3
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	e017      	b.n	8005736 <USB_ActivateEndpoint+0x2e6>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	663b      	str	r3, [r7, #96]	; 0x60
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <USB_ActivateEndpoint+0x2d0>
 800571a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800571c:	3b01      	subs	r3, #1
 800571e:	663b      	str	r3, [r7, #96]	; 0x60
 8005720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005722:	b29b      	uxth	r3, r3
 8005724:	029b      	lsls	r3, r3, #10
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	83fb      	strh	r3, [r7, #30]
 8005744:	8bfb      	ldrh	r3, [r7, #30]
 8005746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01b      	beq.n	8005786 <USB_ActivateEndpoint+0x336>
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	83bb      	strh	r3, [r7, #28]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	8bbb      	ldrh	r3, [r7, #28]
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579c:	837b      	strh	r3, [r7, #26]
 800579e:	8b7b      	ldrh	r3, [r7, #26]
 80057a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057a4:	837b      	strh	r3, [r7, #26]
 80057a6:	8b7b      	ldrh	r3, [r7, #26]
 80057a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057ac:	837b      	strh	r3, [r7, #26]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	8b7b      	ldrh	r3, [r7, #26]
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]
 80057ce:	e1a2      	b.n	8005b16 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80057f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005800:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005808:	b29b      	uxth	r3, r3
 800580a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005816:	b29b      	uxth	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800581c:	4413      	add	r3, r2
 800581e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	011a      	lsls	r2, r3, #4
 8005826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005828:	4413      	add	r3, r2
 800582a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800582e:	657b      	str	r3, [r7, #84]	; 0x54
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	891b      	ldrh	r3, [r3, #8]
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	b29b      	uxth	r3, r3
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	653b      	str	r3, [r7, #80]	; 0x50
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584a:	b29b      	uxth	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005850:	4413      	add	r3, r2
 8005852:	653b      	str	r3, [r7, #80]	; 0x50
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	011a      	lsls	r2, r3, #4
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	4413      	add	r3, r2
 800585e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	895b      	ldrh	r3, [r3, #10]
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	b29b      	uxth	r3, r3
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005872:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 8091 	bne.w	80059a0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800588c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800588e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01b      	beq.n	80058ce <USB_ActivateEndpoint+0x47e>
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	441a      	add	r2, r3
 80058b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	873b      	strh	r3, [r7, #56]	; 0x38
 80058dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01b      	beq.n	800591e <USB_ActivateEndpoint+0x4ce>
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800590a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005916:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800591a:	b29b      	uxth	r3, r3
 800591c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005936:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005938:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800593c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800593e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005940:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005944:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	441a      	add	r2, r3
 8005950:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	867b      	strh	r3, [r7, #50]	; 0x32
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800598a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599a:	b29b      	uxth	r3, r3
 800599c:	8013      	strh	r3, [r2, #0]
 800599e:	e0ba      	b.n	8005b16 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80059b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80059b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01d      	beq.n	80059f8 <USB_ActivateEndpoint+0x5a8>
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	441a      	add	r2, r3
 80059e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01d      	beq.n	8005a50 <USB_ActivateEndpoint+0x600>
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d024      	beq.n	8005aa2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a76:	f083 0320 	eor.w	r3, r3, #32
 8005a7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	441a      	add	r2, r3
 8005a88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]
 8005aa0:	e01d      	b.n	8005ade <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005b16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	376c      	adds	r7, #108	; 0x6c
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b08d      	sub	sp, #52	; 0x34
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	7b1b      	ldrb	r3, [r3, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 808e 	bne.w	8005c54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d044      	beq.n	8005bca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	81bb      	strh	r3, [r7, #12]
 8005b4e:	89bb      	ldrh	r3, [r7, #12]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <USB_DeactivateEndpoint+0x6c>
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	817b      	strh	r3, [r7, #10]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	897b      	ldrh	r3, [r7, #10]
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba6:	813b      	strh	r3, [r7, #8]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	893b      	ldrh	r3, [r7, #8]
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]
 8005bc8:	e192      	b.n	8005ef0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	827b      	strh	r3, [r7, #18]
 8005bd8:	8a7b      	ldrh	r3, [r7, #18]
 8005bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01b      	beq.n	8005c1a <USB_DeactivateEndpoint+0xf6>
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	823b      	strh	r3, [r7, #16]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	441a      	add	r2, r3
 8005c04:	8a3b      	ldrh	r3, [r7, #16]
 8005c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c30:	81fb      	strh	r3, [r7, #14]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	89fb      	ldrh	r3, [r7, #14]
 8005c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]
 8005c52:	e14d      	b.n	8005ef0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 80a5 	bne.w	8005da8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	843b      	strh	r3, [r7, #32]
 8005c6c:	8c3b      	ldrh	r3, [r7, #32]
 8005c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01b      	beq.n	8005cae <USB_DeactivateEndpoint+0x18a>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	83fb      	strh	r3, [r7, #30]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	8bfb      	ldrh	r3, [r7, #30]
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	83bb      	strh	r3, [r7, #28]
 8005cbc:	8bbb      	ldrh	r3, [r7, #28]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d01b      	beq.n	8005cfe <USB_DeactivateEndpoint+0x1da>
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	837b      	strh	r3, [r7, #26]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	8b7b      	ldrh	r3, [r7, #26]
 8005cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d14:	833b      	strh	r3, [r7, #24]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	8b3b      	ldrh	r3, [r7, #24]
 8005d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	82fb      	strh	r3, [r7, #22]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	8afb      	ldrh	r3, [r7, #22]
 8005d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d84:	82bb      	strh	r3, [r7, #20]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	8abb      	ldrh	r3, [r7, #20]
 8005d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	8013      	strh	r3, [r2, #0]
 8005da6:	e0a3      	b.n	8005ef0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005db6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01b      	beq.n	8005df8 <USB_DeactivateEndpoint+0x2d4>
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01b      	beq.n	8005e48 <USB_DeactivateEndpoint+0x324>
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	441a      	add	r2, r3
 8005e32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	441a      	add	r2, r3
 8005eda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3734      	adds	r7, #52	; 0x34
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b0cc      	sub	sp, #304	; 0x130
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0a:	6018      	str	r0, [r3, #0]
 8005f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f14:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f041 817d 	bne.w	8007222 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d908      	bls.n	8005f56 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005f54:	e007      	b.n	8005f66 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	7b1b      	ldrb	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d152      	bne.n	800601c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6959      	ldr	r1, [r3, #20]
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	88da      	ldrh	r2, [r3, #6]
 8005f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f9c:	6800      	ldr	r0, [r0, #0]
 8005f9e:	f001 ff23 	bl	8007de8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005faa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005fd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fd4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	440a      	add	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	011a      	lsls	r2, r3, #4
 8005fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006000:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	b29a      	uxth	r2, r3
 800600c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006010:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	f001 b8b5 	b.w	8007186 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	78db      	ldrb	r3, [r3, #3]
 8006028:	2b02      	cmp	r3, #2
 800602a:	f040 84c6 	bne.w	80069ba <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	429a      	cmp	r2, r3
 8006048:	f240 8443 	bls.w	80068d2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 823e 	beq.w	800656a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80060f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060fa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f040 809a 	bne.w	8006248 <USB_EPStartXfer+0x34c>
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006120:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	4619      	mov	r1, r3
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006142:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006146:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	440a      	add	r2, r1
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	011a      	lsls	r2, r3, #4
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4413      	add	r3, r2
 800616a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800616e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006172:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d122      	bne.n	80061c6 <USB_EPStartXfer+0x2ca>
 8006180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006184:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006192:	b29a      	uxth	r2, r3
 8006194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006198:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e079      	b.n	80062ba <USB_EPStartXfer+0x3be>
 80061c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ca:	2b3e      	cmp	r3, #62	; 0x3e
 80061cc:	d81b      	bhi.n	8006206 <USB_EPStartXfer+0x30a>
 80061ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <USB_EPStartXfer+0x2f2>
 80061e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061e8:	3301      	adds	r3, #1
 80061ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	029b      	lsls	r3, r3, #10
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	e059      	b.n	80062ba <USB_EPStartXfer+0x3be>
 8006206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <USB_EPStartXfer+0x32a>
 800621c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006220:	3b01      	subs	r3, #1
 8006222:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006226:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29b      	uxth	r3, r3
 8006230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006238:	b29a      	uxth	r2, r3
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e038      	b.n	80062ba <USB_EPStartXfer+0x3be>
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d130      	bne.n	80062ba <USB_EPStartXfer+0x3be>
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006272:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006276:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	440a      	add	r2, r1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	011a      	lsls	r2, r3, #4
 800628e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006292:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4413      	add	r3, r2
 800629a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	895b      	ldrh	r3, [r3, #10]
 80062c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6959      	ldr	r1, [r3, #20]
 80062d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80062e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062e8:	6800      	ldr	r0, [r0, #0]
 80062ea:	f001 fd7d 	bl	8007de8 <USB_WritePMA>
            ep->xfer_buff += len;
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062fe:	441a      	add	r2, r3
 8006300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800630c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	429a      	cmp	r2, r3
 8006326:	d90f      	bls.n	8006348 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a1a      	ldr	r2, [r3, #32]
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	1ad2      	subs	r2, r2, r3
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	621a      	str	r2, [r3, #32]
 8006346:	e00e      	b.n	8006366 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2200      	movs	r2, #0
 8006364:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 809a 	bne.w	80064ac <USB_EPStartXfer+0x5b0>
 8006378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006380:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006384:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006390:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639a:	b29b      	uxth	r3, r3
 800639c:	4619      	mov	r1, r3
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063aa:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	440a      	add	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	011a      	lsls	r2, r3, #4
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80063d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d122      	bne.n	800642a <USB_EPStartXfer+0x52e>
 80063e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641a:	b29a      	uxth	r2, r3
 800641c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006420:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	e083      	b.n	8006532 <USB_EPStartXfer+0x636>
 800642a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800642e:	2b3e      	cmp	r3, #62	; 0x3e
 8006430:	d81b      	bhi.n	800646a <USB_EPStartXfer+0x56e>
 8006432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800643c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <USB_EPStartXfer+0x556>
 8006448:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800644c:	3301      	adds	r3, #1
 800644e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006452:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006456:	b29b      	uxth	r3, r3
 8006458:	029b      	lsls	r3, r3, #10
 800645a:	b29a      	uxth	r2, r3
 800645c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006460:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e063      	b.n	8006532 <USB_EPStartXfer+0x636>
 800646a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <USB_EPStartXfer+0x58e>
 8006480:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006484:	3b01      	subs	r3, #1
 8006486:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800648a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	e042      	b.n	8006532 <USB_EPStartXfer+0x636>
 80064ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d13a      	bne.n	8006532 <USB_EPStartXfer+0x636>
 80064bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064c8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064cc:	6812      	ldr	r2, [r2, #0]
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4619      	mov	r1, r3
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064ee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	440a      	add	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	011a      	lsls	r2, r3, #4
 8006506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4413      	add	r3, r2
 8006512:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006524:	b29a      	uxth	r2, r3
 8006526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	891b      	ldrh	r3, [r3, #8]
 800653e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006552:	b29b      	uxth	r3, r3
 8006554:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006558:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800655c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006560:	6800      	ldr	r0, [r0, #0]
 8006562:	f001 fc41 	bl	8007de8 <USB_WritePMA>
 8006566:	f000 be0e 	b.w	8007186 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d16d      	bne.n	8006656 <USB_EPStartXfer+0x75a>
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	64bb      	str	r3, [r7, #72]	; 0x48
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800659a:	4413      	add	r3, r2
 800659c:	64bb      	str	r3, [r7, #72]	; 0x48
 800659e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	011a      	lsls	r2, r3, #4
 80065ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ae:	4413      	add	r3, r2
 80065b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065b4:	647b      	str	r3, [r7, #68]	; 0x44
 80065b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d112      	bne.n	80065e4 <USB_EPStartXfer+0x6e8>
 80065be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065dc:	b29a      	uxth	r2, r3
 80065de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e063      	b.n	80066ac <USB_EPStartXfer+0x7b0>
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	2b3e      	cmp	r3, #62	; 0x3e
 80065ea:	d817      	bhi.n	800661c <USB_EPStartXfer+0x720>
 80065ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80065f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d004      	beq.n	800660c <USB_EPStartXfer+0x710>
 8006602:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006606:	3301      	adds	r3, #1
 8006608:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800660c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29a      	uxth	r2, r3
 8006616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	e047      	b.n	80066ac <USB_EPStartXfer+0x7b0>
 800661c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <USB_EPStartXfer+0x740>
 8006632:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006636:	3b01      	subs	r3, #1
 8006638:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800663c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006640:	b29b      	uxth	r3, r3
 8006642:	029b      	lsls	r3, r3, #10
 8006644:	b29b      	uxth	r3, r3
 8006646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664e:	b29a      	uxth	r2, r3
 8006650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e02a      	b.n	80066ac <USB_EPStartXfer+0x7b0>
 8006656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d122      	bne.n	80066ac <USB_EPStartXfer+0x7b0>
 8006666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	653b      	str	r3, [r7, #80]	; 0x50
 8006672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006686:	4413      	add	r3, r2
 8006688:	653b      	str	r3, [r7, #80]	; 0x50
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	011a      	lsls	r2, r3, #4
 8006698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669a:	4413      	add	r3, r2
 800669c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	891b      	ldrh	r3, [r3, #8]
 80066b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6959      	ldr	r1, [r3, #20]
 80066c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066d2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066da:	6800      	ldr	r0, [r0, #0]
 80066dc:	f001 fb84 	bl	8007de8 <USB_WritePMA>
            ep->xfer_buff += len;
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695a      	ldr	r2, [r3, #20]
 80066ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f0:	441a      	add	r2, r3
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	429a      	cmp	r2, r3
 8006718:	d90f      	bls.n	800673a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800671a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	621a      	str	r2, [r3, #32]
 8006738:	e00e      	b.n	8006758 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800673a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	643b      	str	r3, [r7, #64]	; 0x40
 8006764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d16d      	bne.n	8006850 <USB_EPStartXfer+0x954>
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678e:	b29b      	uxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	4413      	add	r3, r2
 8006796:	63bb      	str	r3, [r7, #56]	; 0x38
 8006798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	4413      	add	r3, r2
 80067aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
 80067b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d112      	bne.n	80067de <USB_EPStartXfer+0x8e2>
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	801a      	strh	r2, [r3, #0]
 80067dc:	e05d      	b.n	800689a <USB_EPStartXfer+0x99e>
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	2b3e      	cmp	r3, #62	; 0x3e
 80067e4:	d817      	bhi.n	8006816 <USB_EPStartXfer+0x91a>
 80067e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <USB_EPStartXfer+0x90a>
 80067fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006800:	3301      	adds	r3, #1
 8006802:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006806:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800680a:	b29b      	uxth	r3, r3
 800680c:	029b      	lsls	r3, r3, #10
 800680e:	b29a      	uxth	r2, r3
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e041      	b.n	800689a <USB_EPStartXfer+0x99e>
 8006816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <USB_EPStartXfer+0x93a>
 800682c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006830:	3b01      	subs	r3, #1
 8006832:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800683a:	b29b      	uxth	r3, r3
 800683c:	029b      	lsls	r3, r3, #10
 800683e:	b29b      	uxth	r3, r3
 8006840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006848:	b29a      	uxth	r2, r3
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	801a      	strh	r2, [r3, #0]
 800684e:	e024      	b.n	800689a <USB_EPStartXfer+0x99e>
 8006850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d11c      	bne.n	800689a <USB_EPStartXfer+0x99e>
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686e:	b29b      	uxth	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006874:	4413      	add	r3, r2
 8006876:	643b      	str	r3, [r7, #64]	; 0x40
 8006878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006888:	4413      	add	r3, r2
 800688a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006894:	b29a      	uxth	r2, r3
 8006896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006898:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800689a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	895b      	ldrh	r3, [r3, #10]
 80068a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6959      	ldr	r1, [r3, #20]
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068c8:	6800      	ldr	r0, [r0, #0]
 80068ca:	f001 fa8d 	bl	8007de8 <USB_WritePMA>
 80068ce:	f000 bc5a 	b.w	8007186 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80068d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80068e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006958:	b29b      	uxth	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800695e:	4413      	add	r3, r2
 8006960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	011a      	lsls	r2, r3, #4
 8006970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006972:	4413      	add	r3, r2
 8006974:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006978:	65bb      	str	r3, [r7, #88]	; 0x58
 800697a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800697e:	b29a      	uxth	r2, r3
 8006980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006982:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	891b      	ldrh	r3, [r3, #8]
 8006990:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6959      	ldr	r1, [r3, #20]
 80069a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069aa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069ae:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069b2:	6800      	ldr	r0, [r0, #0]
 80069b4:	f001 fa18 	bl	8007de8 <USB_WritePMA>
 80069b8:	e3e5      	b.n	8007186 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80069e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a1a      	ldr	r2, [r3, #32]
 8006a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 81bc 	beq.w	8006dd4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d16d      	bne.n	8006b56 <USB_EPStartXfer+0xc5a>
 8006a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a9a:	4413      	add	r3, r2
 8006a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	011a      	lsls	r2, r3, #4
 8006aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aae:	4413      	add	r3, r2
 8006ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ab4:	677b      	str	r3, [r7, #116]	; 0x74
 8006ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d112      	bne.n	8006ae4 <USB_EPStartXfer+0xbe8>
 8006abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e060      	b.n	8006ba6 <USB_EPStartXfer+0xcaa>
 8006ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae8:	2b3e      	cmp	r3, #62	; 0x3e
 8006aea:	d817      	bhi.n	8006b1c <USB_EPStartXfer+0xc20>
 8006aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <USB_EPStartXfer+0xc10>
 8006b02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b06:	3301      	adds	r3, #1
 8006b08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	029b      	lsls	r3, r3, #10
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b18:	801a      	strh	r2, [r3, #0]
 8006b1a:	e044      	b.n	8006ba6 <USB_EPStartXfer+0xcaa>
 8006b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <USB_EPStartXfer+0xc40>
 8006b32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b36:	3b01      	subs	r3, #1
 8006b38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	029b      	lsls	r3, r3, #10
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	e027      	b.n	8006ba6 <USB_EPStartXfer+0xcaa>
 8006b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d11f      	bne.n	8006ba6 <USB_EPStartXfer+0xcaa>
 8006b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	011a      	lsls	r2, r3, #4
 8006b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ba4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	895b      	ldrh	r3, [r3, #10]
 8006bb2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6959      	ldr	r1, [r3, #20]
 8006bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bcc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bd0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bd4:	6800      	ldr	r0, [r0, #0]
 8006bd6:	f001 f907 	bl	8007de8 <USB_WritePMA>
          ep->xfer_buff += len;
 8006bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bea:	441a      	add	r2, r3
 8006bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6a1a      	ldr	r2, [r3, #32]
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d90f      	bls.n	8006c34 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c24:	1ad2      	subs	r2, r2, r3
 8006c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	621a      	str	r2, [r3, #32]
 8006c32:	e00e      	b.n	8006c52 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8295 	beq.w	8007186 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d16d      	bne.n	8006d48 <USB_EPStartXfer+0xe4c>
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c8c:	4413      	add	r3, r2
 8006c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	011a      	lsls	r2, r3, #4
 8006c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ca6:	667b      	str	r3, [r7, #100]	; 0x64
 8006ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d112      	bne.n	8006cd6 <USB_EPStartXfer+0xdda>
 8006cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cbe:	801a      	strh	r2, [r3, #0]
 8006cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cd2:	801a      	strh	r2, [r3, #0]
 8006cd4:	e063      	b.n	8006d9e <USB_EPStartXfer+0xea2>
 8006cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cda:	2b3e      	cmp	r3, #62	; 0x3e
 8006cdc:	d817      	bhi.n	8006d0e <USB_EPStartXfer+0xe12>
 8006cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <USB_EPStartXfer+0xe02>
 8006cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	029b      	lsls	r3, r3, #10
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e047      	b.n	8006d9e <USB_EPStartXfer+0xea2>
 8006d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <USB_EPStartXfer+0xe32>
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	029b      	lsls	r3, r3, #10
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d44:	801a      	strh	r2, [r3, #0]
 8006d46:	e02a      	b.n	8006d9e <USB_EPStartXfer+0xea2>
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	785b      	ldrb	r3, [r3, #1]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d122      	bne.n	8006d9e <USB_EPStartXfer+0xea2>
 8006d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	673b      	str	r3, [r7, #112]	; 0x70
 8006d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d78:	4413      	add	r3, r2
 8006d7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	011a      	lsls	r2, r3, #4
 8006d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	891b      	ldrh	r3, [r3, #8]
 8006daa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6959      	ldr	r1, [r3, #20]
 8006dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dc4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006dc8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006dcc:	6800      	ldr	r0, [r0, #0]
 8006dce:	f001 f80b 	bl	8007de8 <USB_WritePMA>
 8006dd2:	e1d8      	b.n	8007186 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d178      	bne.n	8006ed6 <USB_EPStartXfer+0xfda>
 8006de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e08:	4413      	add	r3, r2
 8006e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	011a      	lsls	r2, r3, #4
 8006e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e20:	4413      	add	r3, r2
 8006e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d116      	bne.n	8006e60 <USB_EPStartXfer+0xf64>
 8006e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e44:	801a      	strh	r2, [r3, #0]
 8006e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	e06b      	b.n	8006f38 <USB_EPStartXfer+0x103c>
 8006e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e64:	2b3e      	cmp	r3, #62	; 0x3e
 8006e66:	d818      	bhi.n	8006e9a <USB_EPStartXfer+0xf9e>
 8006e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <USB_EPStartXfer+0xf8c>
 8006e7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e82:	3301      	adds	r3, #1
 8006e84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006e88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	029b      	lsls	r3, r3, #10
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	e04e      	b.n	8006f38 <USB_EPStartXfer+0x103c>
 8006e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <USB_EPStartXfer+0xfbe>
 8006eb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e030      	b.n	8006f38 <USB_EPStartXfer+0x103c>
 8006ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	785b      	ldrb	r3, [r3, #1]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d128      	bne.n	8006f38 <USB_EPStartXfer+0x103c>
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	011a      	lsls	r2, r3, #4
 8006f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f22:	4413      	add	r3, r2
 8006f24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	891b      	ldrh	r3, [r3, #8]
 8006f44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6959      	ldr	r1, [r3, #20]
 8006f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f5e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f62:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	f000 ff3e 	bl	8007de8 <USB_WritePMA>
          ep->xfer_buff += len;
 8006f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695a      	ldr	r2, [r3, #20]
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	441a      	add	r2, r3
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d90f      	bls.n	8006fc6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6a1a      	ldr	r2, [r3, #32]
 8006fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	621a      	str	r2, [r3, #32]
 8006fc4:	e00e      	b.n	8006fe4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80cc 	beq.w	8007186 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d178      	bne.n	80070fe <USB_EPStartXfer+0x1202>
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800701a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007028:	b29b      	uxth	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007030:	4413      	add	r3, r2
 8007032:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	011a      	lsls	r2, r3, #4
 8007044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007048:	4413      	add	r3, r2
 800704a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800704e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d116      	bne.n	8007088 <USB_EPStartXfer+0x118c>
 800705a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	b29b      	uxth	r3, r3
 8007062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707e:	b29a      	uxth	r2, r3
 8007080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	e064      	b.n	8007152 <USB_EPStartXfer+0x1256>
 8007088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708c:	2b3e      	cmp	r3, #62	; 0x3e
 800708e:	d818      	bhi.n	80070c2 <USB_EPStartXfer+0x11c6>
 8007090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800709a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <USB_EPStartXfer+0x11b4>
 80070a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070aa:	3301      	adds	r3, #1
 80070ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80070b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	029b      	lsls	r3, r3, #10
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e047      	b.n	8007152 <USB_EPStartXfer+0x1256>
 80070c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80070cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d0:	f003 031f 	and.w	r3, r3, #31
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <USB_EPStartXfer+0x11e6>
 80070d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070dc:	3b01      	subs	r3, #1
 80070de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80070e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	029b      	lsls	r3, r3, #10
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	e029      	b.n	8007152 <USB_EPStartXfer+0x1256>
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	785b      	ldrb	r3, [r3, #1]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d121      	bne.n	8007152 <USB_EPStartXfer+0x1256>
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800711c:	b29b      	uxth	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007124:	4413      	add	r3, r2
 8007126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	011a      	lsls	r2, r3, #4
 8007138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800713c:	4413      	add	r3, r2
 800713e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714a:	b29a      	uxth	r2, r3
 800714c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007150:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	895b      	ldrh	r3, [r3, #10]
 800715e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6959      	ldr	r1, [r3, #20]
 800716e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007172:	b29b      	uxth	r3, r3
 8007174:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007178:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800717c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007180:	6800      	ldr	r0, [r0, #0]
 8007182:	f000 fe31 	bl	8007de8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071a8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80071ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b4:	8013      	strh	r3, [r2, #0]
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80071be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071c2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80071c6:	8812      	ldrh	r2, [r2, #0]
 80071c8:	f082 0210 	eor.w	r2, r2, #16
 80071cc:	801a      	strh	r2, [r3, #0]
 80071ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80071d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071da:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80071de:	8812      	ldrh	r2, [r2, #0]
 80071e0:	f082 0220 	eor.w	r2, r2, #32
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007204:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721a:	b29b      	uxth	r3, r3
 800721c:	8013      	strh	r3, [r2, #0]
 800721e:	f000 bc9f 	b.w	8007b60 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	7b1b      	ldrb	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f040 80ae 	bne.w	8007390 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	429a      	cmp	r2, r3
 800724e:	d917      	bls.n	8007280 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	619a      	str	r2, [r3, #24]
 800727e:	e00e      	b.n	800729e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800729e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072c2:	4413      	add	r3, r2
 80072c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	011a      	lsls	r2, r3, #4
 80072d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072da:	4413      	add	r3, r2
 80072dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d116      	bne.n	800731a <USB_EPStartXfer+0x141e>
 80072ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e3e8      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
 800731a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731e:	2b3e      	cmp	r3, #62	; 0x3e
 8007320:	d818      	bhi.n	8007354 <USB_EPStartXfer+0x1458>
 8007322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800732c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <USB_EPStartXfer+0x1446>
 8007338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800733c:	3301      	adds	r3, #1
 800733e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007342:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007346:	b29b      	uxth	r3, r3
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	b29a      	uxth	r2, r3
 800734c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	e3cb      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
 8007354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800735e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <USB_EPStartXfer+0x1478>
 800736a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800736e:	3b01      	subs	r3, #1
 8007370:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007378:	b29b      	uxth	r3, r3
 800737a:	029b      	lsls	r3, r3, #10
 800737c:	b29b      	uxth	r3, r3
 800737e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007386:	b29a      	uxth	r2, r3
 8007388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800738c:	801a      	strh	r2, [r3, #0]
 800738e:	e3ad      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	78db      	ldrb	r3, [r3, #3]
 800739c:	2b02      	cmp	r3, #2
 800739e:	f040 8200 	bne.w	80077a2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80073a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 8091 	bne.w	80074d6 <USB_EPStartXfer+0x15da>
 80073b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073d8:	4413      	add	r3, r2
 80073da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	011a      	lsls	r2, r3, #4
 80073ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073f0:	4413      	add	r3, r2
 80073f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d116      	bne.n	8007438 <USB_EPStartXfer+0x153c>
 800740a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29b      	uxth	r3, r3
 8007412:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007416:	b29a      	uxth	r2, r3
 8007418:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800741c:	801a      	strh	r2, [r3, #0]
 800741e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	e083      	b.n	8007540 <USB_EPStartXfer+0x1644>
 8007438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b3e      	cmp	r3, #62	; 0x3e
 8007446:	d820      	bhi.n	800748a <USB_EPStartXfer+0x158e>
 8007448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d004      	beq.n	8007478 <USB_EPStartXfer+0x157c>
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007472:	3301      	adds	r3, #1
 8007474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747c:	b29b      	uxth	r3, r3
 800747e:	029b      	lsls	r3, r3, #10
 8007480:	b29a      	uxth	r2, r3
 8007482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	e05a      	b.n	8007540 <USB_EPStartXfer+0x1644>
 800748a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800749c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <USB_EPStartXfer+0x15be>
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b4:	3b01      	subs	r3, #1
 80074b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074be:	b29b      	uxth	r3, r3
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e034      	b.n	8007540 <USB_EPStartXfer+0x1644>
 80074d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d12c      	bne.n	8007540 <USB_EPStartXfer+0x1644>
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80074f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007502:	b29b      	uxth	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800750a:	4413      	add	r3, r2
 800750c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	011a      	lsls	r2, r3, #4
 800751e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007522:	4413      	add	r3, r2
 8007524:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800752c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	b29a      	uxth	r2, r3
 800753a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800753e:	801a      	strh	r2, [r3, #0]
 8007540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f040 8091 	bne.w	8007682 <USB_EPStartXfer+0x1786>
 8007560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800756e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800757c:	b29b      	uxth	r3, r3
 800757e:	461a      	mov	r2, r3
 8007580:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007584:	4413      	add	r3, r2
 8007586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800758a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	011a      	lsls	r2, r3, #4
 8007598:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800759c:	4413      	add	r3, r2
 800759e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d116      	bne.n	80075e4 <USB_EPStartXfer+0x16e8>
 80075b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075c8:	801a      	strh	r2, [r3, #0]
 80075ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e07c      	b.n	80076de <USB_EPStartXfer+0x17e2>
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b3e      	cmp	r3, #62	; 0x3e
 80075f2:	d820      	bhi.n	8007636 <USB_EPStartXfer+0x173a>
 80075f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	085b      	lsrs	r3, r3, #1
 8007602:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <USB_EPStartXfer+0x1728>
 800761a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800761e:	3301      	adds	r3, #1
 8007620:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007624:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007628:	b29b      	uxth	r3, r3
 800762a:	029b      	lsls	r3, r3, #10
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	e053      	b.n	80076de <USB_EPStartXfer+0x17e2>
 8007636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f003 031f 	and.w	r3, r3, #31
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <USB_EPStartXfer+0x176a>
 800765c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007660:	3b01      	subs	r3, #1
 8007662:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800766a:	b29b      	uxth	r3, r3
 800766c:	029b      	lsls	r3, r3, #10
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e02d      	b.n	80076de <USB_EPStartXfer+0x17e2>
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d125      	bne.n	80076de <USB_EPStartXfer+0x17e2>
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076a8:	4413      	add	r3, r2
 80076aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	011a      	lsls	r2, r3, #4
 80076bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076c0:	4413      	add	r3, r2
 80076c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 81fe 	beq.w	8007aec <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007710:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <USB_EPStartXfer+0x182c>
 800771c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10d      	bne.n	8007744 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007728:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800772c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 81db 	bne.w	8007aec <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007736:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800773a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	f040 81d4 	bne.w	8007aec <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800776e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	441a      	add	r2, r3
 8007788:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800778c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007798:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800779c:	b29b      	uxth	r3, r3
 800779e:	8013      	strh	r3, [r2, #0]
 80077a0:	e1a4      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	78db      	ldrb	r3, [r3, #3]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	f040 819a 	bne.w	8007ae8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699a      	ldr	r2, [r3, #24]
 80077c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d917      	bls.n	8007800 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80077d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80077e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f0:	1ad2      	subs	r2, r2, r3
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	619a      	str	r2, [r3, #24]
 80077fe:	e00e      	b.n	800781e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	785b      	ldrb	r3, [r3, #1]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d178      	bne.n	8007920 <USB_EPStartXfer+0x1a24>
 800782e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800783c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007852:	4413      	add	r3, r2
 8007854:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	011a      	lsls	r2, r3, #4
 8007866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800786a:	4413      	add	r3, r2
 800786c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d116      	bne.n	80078aa <USB_EPStartXfer+0x19ae>
 800787c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007888:	b29a      	uxth	r2, r3
 800788a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800788e:	801a      	strh	r2, [r3, #0]
 8007890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800789c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	e06b      	b.n	8007982 <USB_EPStartXfer+0x1a86>
 80078aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ae:	2b3e      	cmp	r3, #62	; 0x3e
 80078b0:	d818      	bhi.n	80078e4 <USB_EPStartXfer+0x19e8>
 80078b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d004      	beq.n	80078d2 <USB_EPStartXfer+0x19d6>
 80078c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078cc:	3301      	adds	r3, #1
 80078ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	029b      	lsls	r3, r3, #10
 80078da:	b29a      	uxth	r2, r3
 80078dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	e04e      	b.n	8007982 <USB_EPStartXfer+0x1a86>
 80078e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <USB_EPStartXfer+0x1a08>
 80078fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078fe:	3b01      	subs	r3, #1
 8007900:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007908:	b29b      	uxth	r3, r3
 800790a:	029b      	lsls	r3, r3, #10
 800790c:	b29b      	uxth	r3, r3
 800790e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007916:	b29a      	uxth	r2, r3
 8007918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	e030      	b.n	8007982 <USB_EPStartXfer+0x1a86>
 8007920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d128      	bne.n	8007982 <USB_EPStartXfer+0x1a86>
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800793e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007942:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794c:	b29b      	uxth	r3, r3
 800794e:	461a      	mov	r2, r3
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	4413      	add	r3, r2
 8007956:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	011a      	lsls	r2, r3, #4
 8007968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796c:	4413      	add	r3, r2
 800796e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007972:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007980:	801a      	strh	r2, [r3, #0]
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d178      	bne.n	8007a92 <USB_EPStartXfer+0x1b96>
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079bc:	b29b      	uxth	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c4:	4413      	add	r3, r2
 80079c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	011a      	lsls	r2, r3, #4
 80079d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079dc:	4413      	add	r3, r2
 80079de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d116      	bne.n	8007a1c <USB_EPStartXfer+0x1b20>
 80079ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e067      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	2b3e      	cmp	r3, #62	; 0x3e
 8007a22:	d818      	bhi.n	8007a56 <USB_EPStartXfer+0x1b5a>
 8007a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <USB_EPStartXfer+0x1b48>
 8007a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a3e:	3301      	adds	r3, #1
 8007a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	029b      	lsls	r3, r3, #10
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	e04a      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
 8007a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <USB_EPStartXfer+0x1b7a>
 8007a6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a70:	3b01      	subs	r3, #1
 8007a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e02c      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d124      	bne.n	8007aec <USB_EPStartXfer+0x1bf0>
 8007aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab8:	4413      	add	r3, r2
 8007aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	011a      	lsls	r2, r3, #4
 8007acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ad6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae4:	801a      	strh	r2, [r3, #0]
 8007ae6:	e001      	b.n	8007aec <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e03a      	b.n	8007b62 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007b16:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007b22:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	441a      	add	r2, r3
 8007b48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d020      	beq.n	8007bc0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b94:	81bb      	strh	r3, [r7, #12]
 8007b96:	89bb      	ldrh	r3, [r7, #12]
 8007b98:	f083 0310 	eor.w	r3, r3, #16
 8007b9c:	81bb      	strh	r3, [r7, #12]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	441a      	add	r2, r3
 8007ba8:	89bb      	ldrh	r3, [r7, #12]
 8007baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	8013      	strh	r3, [r2, #0]
 8007bbe:	e01f      	b.n	8007c00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd6:	81fb      	strh	r3, [r7, #14]
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bde:	81fb      	strh	r3, [r7, #14]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	89fb      	ldrh	r3, [r7, #14]
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	7b1b      	ldrb	r3, [r3, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f040 809d 	bne.w	8007d5a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d04c      	beq.n	8007cc2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	823b      	strh	r3, [r7, #16]
 8007c36:	8a3b      	ldrh	r3, [r7, #16]
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01b      	beq.n	8007c78 <USB_EPClearStall+0x6c>
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	81fb      	strh	r3, [r7, #14]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	89fb      	ldrh	r3, [r7, #14]
 8007c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	78db      	ldrb	r3, [r3, #3]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d06c      	beq.n	8007d5a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c96:	81bb      	strh	r3, [r7, #12]
 8007c98:	89bb      	ldrh	r3, [r7, #12]
 8007c9a:	f083 0320 	eor.w	r3, r3, #32
 8007c9e:	81bb      	strh	r3, [r7, #12]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	441a      	add	r2, r3
 8007caa:	89bb      	ldrh	r3, [r7, #12]
 8007cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	8013      	strh	r3, [r2, #0]
 8007cc0:	e04b      	b.n	8007d5a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	82fb      	strh	r3, [r7, #22]
 8007cd0:	8afb      	ldrh	r3, [r7, #22]
 8007cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01b      	beq.n	8007d12 <USB_EPClearStall+0x106>
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf0:	82bb      	strh	r3, [r7, #20]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	441a      	add	r2, r3
 8007cfc:	8abb      	ldrh	r3, [r7, #20]
 8007cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d28:	827b      	strh	r3, [r7, #18]
 8007d2a:	8a7b      	ldrh	r3, [r7, #18]
 8007d2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d30:	827b      	strh	r3, [r7, #18]
 8007d32:	8a7b      	ldrh	r3, [r7, #18]
 8007d34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d38:	827b      	strh	r3, [r7, #18]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	441a      	add	r2, r3
 8007d44:	8a7b      	ldrh	r3, [r7, #18]
 8007d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	371c      	adds	r7, #28
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr

08007d66 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr

08007d8c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr

08007da0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bc80      	pop	{r7}
 8007dd0:	4770      	bx	lr

08007dd2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr

08007de8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b08d      	sub	sp, #52	; 0x34
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4611      	mov	r1, r2
 8007df4:	461a      	mov	r2, r3
 8007df6:	460b      	mov	r3, r1
 8007df8:	80fb      	strh	r3, [r7, #6]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007dfe:	88bb      	ldrh	r3, [r7, #4]
 8007e00:	3301      	adds	r3, #1
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	005a      	lsls	r2, r3, #1
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e20:	e01e      	b.n	8007e60 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	3302      	adds	r3, #2
 8007e4c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	3302      	adds	r3, #2
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	3301      	adds	r3, #1
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1dd      	bne.n	8007e22 <USB_WritePMA+0x3a>
  }
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	3734      	adds	r7, #52	; 0x34
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr

08007e72 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b08b      	sub	sp, #44	; 0x2c
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	461a      	mov	r2, r3
 8007e80:	460b      	mov	r3, r1
 8007e82:	80fb      	strh	r3, [r7, #6]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e88:	88bb      	ldrh	r3, [r7, #4]
 8007e8a:	085b      	lsrs	r3, r3, #1
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	005a      	lsls	r2, r3, #1
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ea4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eaa:	e01b      	b.n	8007ee4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	0a1b      	lsrs	r3, r3, #8
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	3302      	adds	r3, #2
 8007edc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e0      	bne.n	8007eac <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007eea:	88bb      	ldrh	r3, [r7, #4]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	701a      	strb	r2, [r3, #0]
  }
}
 8007f06:	bf00      	nop
 8007f08:	372c      	adds	r7, #44	; 0x2c
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7c1b      	ldrb	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d115      	bne.n	8007f54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	2181      	movs	r1, #129	; 0x81
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 feac 	bl	8009c8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f40:	2202      	movs	r2, #2
 8007f42:	2101      	movs	r1, #1
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fea2 	bl	8009c8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007f52:	e012      	b.n	8007f7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f54:	2340      	movs	r3, #64	; 0x40
 8007f56:	2202      	movs	r2, #2
 8007f58:	2181      	movs	r1, #129	; 0x81
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fe97 	bl	8009c8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f66:	2340      	movs	r3, #64	; 0x40
 8007f68:	2202      	movs	r2, #2
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 fe8e 	bl	8009c8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f7a:	2308      	movs	r3, #8
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	2182      	movs	r1, #130	; 0x82
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fe84 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f90:	f001 ffa4 	bl	8009edc <USBD_static_malloc>
 8007f94:	4602      	mov	r2, r0
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	73fb      	strb	r3, [r7, #15]
 8007faa:	e026      	b.n	8007ffa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	7c1b      	ldrb	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d109      	bne.n	8007fea <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 ff44 	bl	8009e70 <USBD_LL_PrepareReceive>
 8007fe8:	e007      	b.n	8007ffa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ff0:	2340      	movs	r3, #64	; 0x40
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 ff3b 	bl	8009e70 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008014:	2181      	movs	r1, #129	; 0x81
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fe5f 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008022:	2101      	movs	r1, #1
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 fe58 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008032:	2182      	movs	r1, #130	; 0x82
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fe50 	bl	8009cda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00e      	beq.n	8008068 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800805a:	4618      	mov	r0, r3
 800805c:	f001 ff4a 	bl	8009ef4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b086      	sub	sp, #24
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008082:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008098:	2b00      	cmp	r3, #0
 800809a:	d039      	beq.n	8008110 <USBD_CDC_Setup+0x9e>
 800809c:	2b20      	cmp	r3, #32
 800809e:	d17f      	bne.n	80081a0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	88db      	ldrh	r3, [r3, #6]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d029      	beq.n	80080fc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	da11      	bge.n	80080d6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80080be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	88d2      	ldrh	r2, [r2, #6]
 80080c4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080c6:	6939      	ldr	r1, [r7, #16]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	88db      	ldrh	r3, [r3, #6]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fa09 	bl	80094e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80080d4:	e06b      	b.n	80081ae <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	785a      	ldrb	r2, [r3, #1]
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	88db      	ldrh	r3, [r3, #6]
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080ec:	6939      	ldr	r1, [r7, #16]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	88db      	ldrh	r3, [r3, #6]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 fa24 	bl	8009542 <USBD_CtlPrepareRx>
      break;
 80080fa:	e058      	b.n	80081ae <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	7850      	ldrb	r0, [r2, #1]
 8008108:	2200      	movs	r2, #0
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	4798      	blx	r3
      break;
 800810e:	e04e      	b.n	80081ae <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b0b      	cmp	r3, #11
 8008116:	d02e      	beq.n	8008176 <USBD_CDC_Setup+0x104>
 8008118:	2b0b      	cmp	r3, #11
 800811a:	dc38      	bgt.n	800818e <USBD_CDC_Setup+0x11c>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <USBD_CDC_Setup+0xb4>
 8008120:	2b0a      	cmp	r3, #10
 8008122:	d014      	beq.n	800814e <USBD_CDC_Setup+0xdc>
 8008124:	e033      	b.n	800818e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800812c:	2b03      	cmp	r3, #3
 800812e:	d107      	bne.n	8008140 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008130:	f107 030c 	add.w	r3, r7, #12
 8008134:	2202      	movs	r2, #2
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f9d4 	bl	80094e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800813e:	e02e      	b.n	800819e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 f965 	bl	8009412 <USBD_CtlError>
            ret = USBD_FAIL;
 8008148:	2302      	movs	r3, #2
 800814a:	75fb      	strb	r3, [r7, #23]
          break;
 800814c:	e027      	b.n	800819e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	2b03      	cmp	r3, #3
 8008156:	d107      	bne.n	8008168 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008158:	f107 030f 	add.w	r3, r7, #15
 800815c:	2201      	movs	r2, #1
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f9c0 	bl	80094e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008166:	e01a      	b.n	800819e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 f951 	bl	8009412 <USBD_CtlError>
            ret = USBD_FAIL;
 8008170:	2302      	movs	r3, #2
 8008172:	75fb      	strb	r3, [r7, #23]
          break;
 8008174:	e013      	b.n	800819e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	2b03      	cmp	r3, #3
 800817e:	d00d      	beq.n	800819c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 f945 	bl	8009412 <USBD_CtlError>
            ret = USBD_FAIL;
 8008188:	2302      	movs	r3, #2
 800818a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800818c:	e006      	b.n	800819c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f93e 	bl	8009412 <USBD_CtlError>
          ret = USBD_FAIL;
 8008196:	2302      	movs	r3, #2
 8008198:	75fb      	strb	r3, [r7, #23]
          break;
 800819a:	e000      	b.n	800819e <USBD_CDC_Setup+0x12c>
          break;
 800819c:	bf00      	nop
      }
      break;
 800819e:	e006      	b.n	80081ae <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 f935 	bl	8009412 <USBD_CtlError>
      ret = USBD_FAIL;
 80081a8:	2302      	movs	r3, #2
 80081aa:	75fb      	strb	r3, [r7, #23]
      break;
 80081ac:	bf00      	nop
  }

  return ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081d2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d03a      	beq.n	8008254 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	331c      	adds	r3, #28
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d029      	beq.n	8008248 <USBD_CDC_DataIn+0x90>
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	331c      	adds	r3, #28
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	78f9      	ldrb	r1, [r7, #3]
 8008208:	68b8      	ldr	r0, [r7, #8]
 800820a:	460b      	mov	r3, r1
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	4403      	add	r3, r0
 8008214:	3338      	adds	r3, #56	; 0x38
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	fbb2 f1f3 	udiv	r1, r2, r3
 800821c:	fb01 f303 	mul.w	r3, r1, r3
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d110      	bne.n	8008248 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	331c      	adds	r3, #28
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800823a:	78f9      	ldrb	r1, [r7, #3]
 800823c:	2300      	movs	r3, #0
 800823e:	2200      	movs	r2, #0
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 fdf2 	bl	8009e2a <USBD_LL_Transmit>
 8008246:	e003      	b.n	8008250 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	e000      	b.n	8008256 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008254:	2302      	movs	r3, #2
  }
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fe1d 	bl	8009eb6 <USBD_LL_GetRxDataSize>
 800827c:	4602      	mov	r2, r0
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00d      	beq.n	80082aa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082a2:	4611      	mov	r1, r2
 80082a4:	4798      	blx	r3

    return USBD_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e000      	b.n	80082ac <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80082aa:	2302      	movs	r3, #2
  }
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d015      	beq.n	80082fa <USBD_CDC_EP0_RxReady+0x46>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082d4:	2bff      	cmp	r3, #255	; 0xff
 80082d6:	d010      	beq.n	80082fa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80082e6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082ee:	b292      	uxth	r2, r2
 80082f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	22ff      	movs	r2, #255	; 0xff
 80082f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2243      	movs	r2, #67	; 0x43
 8008310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008312:	4b03      	ldr	r3, [pc, #12]	; (8008320 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	bc80      	pop	{r7}
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	20000098 	.word	0x20000098

08008324 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2243      	movs	r2, #67	; 0x43
 8008330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008332:	4b03      	ldr	r3, [pc, #12]	; (8008340 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20000054 	.word	0x20000054

08008344 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2243      	movs	r2, #67	; 0x43
 8008350:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008352:	4b03      	ldr	r3, [pc, #12]	; (8008360 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	200000dc 	.word	0x200000dc

08008364 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220a      	movs	r2, #10
 8008370:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008372:	4b03      	ldr	r3, [pc, #12]	; (8008380 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	bc80      	pop	{r7}
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20000010 	.word	0x20000010

08008384 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800838e:	2302      	movs	r3, #2
 8008390:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d005      	beq.n	80083a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	371c      	adds	r7, #28
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr

08008408 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008416:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01c      	beq.n	800845c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008428:	2b00      	cmp	r3, #0
 800842a:	d115      	bne.n	8008458 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800844a:	b29b      	uxth	r3, r3
 800844c:	2181      	movs	r1, #129	; 0x81
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 fceb 	bl	8009e2a <USBD_LL_Transmit>

      return USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	e002      	b.n	800845e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008458:	2301      	movs	r3, #1
 800845a:	e000      	b.n	800845e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d017      	beq.n	80084b0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	7c1b      	ldrb	r3, [r3, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800848e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008492:	2101      	movs	r1, #1
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 fceb 	bl	8009e70 <USBD_LL_PrepareReceive>
 800849a:	e007      	b.n	80084ac <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084a2:	2340      	movs	r3, #64	; 0x40
 80084a4:	2101      	movs	r1, #1
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fce2 	bl	8009e70 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e000      	b.n	80084b2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80084b0:	2302      	movs	r3, #2
  }
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	4613      	mov	r3, r2
 80084c6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084ce:	2302      	movs	r3, #2
 80084d0:	e01a      	b.n	8008508 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	79fa      	ldrb	r2, [r7, #7]
 80084fe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f001 fb4f 	bl	8009ba4 <USBD_LL_Init>

  return USBD_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d006      	beq.n	8008532 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
 8008530:	e001      	b.n	8008536 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008532:	2302      	movs	r3, #2
 8008534:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 fb84 	bl	8009c58 <USBD_LL_Start>

  return USBD_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800857a:	2302      	movs	r3, #2
 800857c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00c      	beq.n	80085a2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	4611      	mov	r1, r2
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	4611      	mov	r1, r2
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fed8 	bl	800939a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80085f8:	461a      	mov	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008606:	f003 031f 	and.w	r3, r3, #31
 800860a:	2b02      	cmp	r3, #2
 800860c:	d016      	beq.n	800863c <USBD_LL_SetupStage+0x6a>
 800860e:	2b02      	cmp	r3, #2
 8008610:	d81c      	bhi.n	800864c <USBD_LL_SetupStage+0x7a>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <USBD_LL_SetupStage+0x4a>
 8008616:	2b01      	cmp	r3, #1
 8008618:	d008      	beq.n	800862c <USBD_LL_SetupStage+0x5a>
 800861a:	e017      	b.n	800864c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f9cb 	bl	80089c0 <USBD_StdDevReq>
      break;
 800862a:	e01a      	b.n	8008662 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fa2d 	bl	8008a94 <USBD_StdItfReq>
      break;
 800863a:	e012      	b.n	8008662 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fa6d 	bl	8008b24 <USBD_StdEPReq>
      break;
 800864a:	e00a      	b.n	8008662 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008656:	b2db      	uxtb	r3, r3
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fb5c 	bl	8009d18 <USBD_LL_StallEP>
      break;
 8008660:	bf00      	nop
  }

  return USBD_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	460b      	mov	r3, r1
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d14b      	bne.n	8008718 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008686:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800868e:	2b03      	cmp	r3, #3
 8008690:	d134      	bne.n	80086fc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	429a      	cmp	r2, r3
 800869c:	d919      	bls.n	80086d2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d203      	bcs.n	80086c0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80086bc:	b29b      	uxth	r3, r3
 80086be:	e002      	b.n	80086c6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	461a      	mov	r2, r3
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 ff57 	bl	800957e <USBD_CtlContinueRx>
 80086d0:	e038      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d105      	bne.n	80086f4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 ff54 	bl	80095a2 <USBD_CtlSendStatus>
 80086fa:	e023      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008702:	2b05      	cmp	r3, #5
 8008704:	d11e      	bne.n	8008744 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800870e:	2100      	movs	r1, #0
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f001 fb01 	bl	8009d18 <USBD_LL_StallEP>
 8008716:	e015      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00d      	beq.n	8008740 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800872a:	2b03      	cmp	r3, #3
 800872c:	d108      	bne.n	8008740 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	7afa      	ldrb	r2, [r7, #11]
 8008738:	4611      	mov	r1, r2
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	4798      	blx	r3
 800873e:	e001      	b.n	8008744 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008740:	2302      	movs	r3, #2
 8008742:	e000      	b.n	8008746 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	460b      	mov	r3, r1
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d17f      	bne.n	8008862 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3314      	adds	r3, #20
 8008766:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800876e:	2b02      	cmp	r3, #2
 8008770:	d15c      	bne.n	800882c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	429a      	cmp	r2, r3
 800877c:	d915      	bls.n	80087aa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	1ad2      	subs	r2, r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	b29b      	uxth	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fec1 	bl	800951e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800879c:	2300      	movs	r3, #0
 800879e:	2200      	movs	r2, #0
 80087a0:	2100      	movs	r1, #0
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f001 fb64 	bl	8009e70 <USBD_LL_PrepareReceive>
 80087a8:	e04e      	b.n	8008848 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	6912      	ldr	r2, [r2, #16]
 80087b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b6:	fb01 f202 	mul.w	r2, r1, r2
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d11c      	bne.n	80087fa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d316      	bcc.n	80087fa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d20f      	bcs.n	80087fa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087da:	2200      	movs	r2, #0
 80087dc:	2100      	movs	r1, #0
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 fe9d 	bl	800951e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	2100      	movs	r1, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f001 fb3c 	bl	8009e70 <USBD_LL_PrepareReceive>
 80087f8:	e026      	b.n	8008848 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800880c:	2b03      	cmp	r3, #3
 800880e:	d105      	bne.n	800881c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800881c:	2180      	movs	r1, #128	; 0x80
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f001 fa7a 	bl	8009d18 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fecf 	bl	80095c8 <USBD_CtlReceiveStatus>
 800882a:	e00d      	b.n	8008848 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008832:	2b04      	cmp	r3, #4
 8008834:	d004      	beq.n	8008840 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008840:	2180      	movs	r1, #128	; 0x80
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f001 fa68 	bl	8009d18 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800884e:	2b01      	cmp	r3, #1
 8008850:	d11d      	bne.n	800888e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fe81 	bl	800855a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008860:	e015      	b.n	800888e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00d      	beq.n	800888a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008874:	2b03      	cmp	r3, #3
 8008876:	d108      	bne.n	800888a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	7afa      	ldrb	r2, [r7, #11]
 8008882:	4611      	mov	r1, r2
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	4798      	blx	r3
 8008888:	e001      	b.n	800888e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	e000      	b.n	8008890 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088a0:	2340      	movs	r3, #64	; 0x40
 80088a2:	2200      	movs	r2, #0
 80088a4:	2100      	movs	r1, #0
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 f9f1 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2240      	movs	r2, #64	; 0x40
 80088b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088bc:	2340      	movs	r3, #64	; 0x40
 80088be:	2200      	movs	r2, #0
 80088c0:	2180      	movs	r1, #128	; 0x80
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f001 f9e3 	bl	8009c8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2240      	movs	r2, #64	; 0x40
 80088d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6852      	ldr	r2, [r2, #4]
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	4611      	mov	r1, r2
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
  }

  return USBD_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	460b      	mov	r3, r1
 8008924:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr

08008938 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2204      	movs	r2, #4
 8008950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896e:	2b04      	cmp	r3, #4
 8008970:	d105      	bne.n	800897e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr

0800898a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008998:	2b03      	cmp	r3, #3
 800899a:	d10b      	bne.n	80089b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089d6:	2b40      	cmp	r3, #64	; 0x40
 80089d8:	d005      	beq.n	80089e6 <USBD_StdDevReq+0x26>
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d84f      	bhi.n	8008a7e <USBD_StdDevReq+0xbe>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d009      	beq.n	80089f6 <USBD_StdDevReq+0x36>
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d14b      	bne.n	8008a7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4798      	blx	r3
      break;
 80089f4:	e048      	b.n	8008a88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d839      	bhi.n	8008a72 <USBD_StdDevReq+0xb2>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <USBD_StdDevReq+0x44>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a55 	.word	0x08008a55
 8008a08:	08008a69 	.word	0x08008a69
 8008a0c:	08008a73 	.word	0x08008a73
 8008a10:	08008a5f 	.word	0x08008a5f
 8008a14:	08008a73 	.word	0x08008a73
 8008a18:	08008a37 	.word	0x08008a37
 8008a1c:	08008a2d 	.word	0x08008a2d
 8008a20:	08008a73 	.word	0x08008a73
 8008a24:	08008a4b 	.word	0x08008a4b
 8008a28:	08008a41 	.word	0x08008a41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9dc 	bl	8008dec <USBD_GetDescriptor>
          break;
 8008a34:	e022      	b.n	8008a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fb3f 	bl	80090bc <USBD_SetAddress>
          break;
 8008a3e:	e01d      	b.n	8008a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fb7e 	bl	8009144 <USBD_SetConfig>
          break;
 8008a48:	e018      	b.n	8008a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fc07 	bl	8009260 <USBD_GetConfig>
          break;
 8008a52:	e013      	b.n	8008a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fc37 	bl	80092ca <USBD_GetStatus>
          break;
 8008a5c:	e00e      	b.n	8008a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fc65 	bl	8009330 <USBD_SetFeature>
          break;
 8008a66:	e009      	b.n	8008a7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fc74 	bl	8009358 <USBD_ClrFeature>
          break;
 8008a70:	e004      	b.n	8008a7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fccc 	bl	8009412 <USBD_CtlError>
          break;
 8008a7a:	bf00      	nop
      }
      break;
 8008a7c:	e004      	b.n	8008a88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fcc6 	bl	8009412 <USBD_CtlError>
      break;
 8008a86:	bf00      	nop
  }

  return ret;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop

08008a94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d005      	beq.n	8008aba <USBD_StdItfReq+0x26>
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d82e      	bhi.n	8008b10 <USBD_StdItfReq+0x7c>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <USBD_StdItfReq+0x26>
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d12a      	bne.n	8008b10 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d81d      	bhi.n	8008b02 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	889b      	ldrh	r3, [r3, #4]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d813      	bhi.n	8008af8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	88db      	ldrh	r3, [r3, #6]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d110      	bne.n	8008b0c <USBD_StdItfReq+0x78>
 8008aea:	7bfb      	ldrb	r3, [r7, #15]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10d      	bne.n	8008b0c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fd56 	bl	80095a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008af6:	e009      	b.n	8008b0c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fc89 	bl	8009412 <USBD_CtlError>
          break;
 8008b00:	e004      	b.n	8008b0c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fc84 	bl	8009412 <USBD_CtlError>
          break;
 8008b0a:	e000      	b.n	8008b0e <USBD_StdItfReq+0x7a>
          break;
 8008b0c:	bf00      	nop
      }
      break;
 8008b0e:	e004      	b.n	8008b1a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fc7d 	bl	8009412 <USBD_CtlError>
      break;
 8008b18:	bf00      	nop
  }

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	889b      	ldrh	r3, [r3, #4]
 8008b36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b40:	2b40      	cmp	r3, #64	; 0x40
 8008b42:	d007      	beq.n	8008b54 <USBD_StdEPReq+0x30>
 8008b44:	2b40      	cmp	r3, #64	; 0x40
 8008b46:	f200 8146 	bhi.w	8008dd6 <USBD_StdEPReq+0x2b2>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <USBD_StdEPReq+0x40>
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	f040 8141 	bne.w	8008dd6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
      break;
 8008b62:	e13d      	b.n	8008de0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d10a      	bne.n	8008b86 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	e12d      	b.n	8008de2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d007      	beq.n	8008b9e <USBD_StdEPReq+0x7a>
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	f300 811b 	bgt.w	8008dca <USBD_StdEPReq+0x2a6>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d072      	beq.n	8008c7e <USBD_StdEPReq+0x15a>
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d03a      	beq.n	8008c12 <USBD_StdEPReq+0xee>
 8008b9c:	e115      	b.n	8008dca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d002      	beq.n	8008bae <USBD_StdEPReq+0x8a>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d015      	beq.n	8008bd8 <USBD_StdEPReq+0xb4>
 8008bac:	e02b      	b.n	8008c06 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <USBD_StdEPReq+0xaa>
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	2b80      	cmp	r3, #128	; 0x80
 8008bb8:	d009      	beq.n	8008bce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 f8aa 	bl	8009d18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bc4:	2180      	movs	r1, #128	; 0x80
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 f8a6 	bl	8009d18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bcc:	e020      	b.n	8008c10 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc1e 	bl	8009412 <USBD_CtlError>
              break;
 8008bd6:	e01b      	b.n	8008c10 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	885b      	ldrh	r3, [r3, #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10e      	bne.n	8008bfe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00b      	beq.n	8008bfe <USBD_StdEPReq+0xda>
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b80      	cmp	r3, #128	; 0x80
 8008bea:	d008      	beq.n	8008bfe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	88db      	ldrh	r3, [r3, #6]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d104      	bne.n	8008bfe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 f88d 	bl	8009d18 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fccf 	bl	80095a2 <USBD_CtlSendStatus>

              break;
 8008c04:	e004      	b.n	8008c10 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fc02 	bl	8009412 <USBD_CtlError>
              break;
 8008c0e:	bf00      	nop
          }
          break;
 8008c10:	e0e0      	b.n	8008dd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d002      	beq.n	8008c22 <USBD_StdEPReq+0xfe>
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d015      	beq.n	8008c4c <USBD_StdEPReq+0x128>
 8008c20:	e026      	b.n	8008c70 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00c      	beq.n	8008c42 <USBD_StdEPReq+0x11e>
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	2b80      	cmp	r3, #128	; 0x80
 8008c2c:	d009      	beq.n	8008c42 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f870 	bl	8009d18 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c38:	2180      	movs	r1, #128	; 0x80
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 f86c 	bl	8009d18 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c40:	e01c      	b.n	8008c7c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fbe4 	bl	8009412 <USBD_CtlError>
              break;
 8008c4a:	e017      	b.n	8008c7c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	885b      	ldrh	r3, [r3, #2]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d112      	bne.n	8008c7a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 f877 	bl	8009d56 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fc9a 	bl	80095a2 <USBD_CtlSendStatus>
              }
              break;
 8008c6e:	e004      	b.n	8008c7a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fbcd 	bl	8009412 <USBD_CtlError>
              break;
 8008c78:	e000      	b.n	8008c7c <USBD_StdEPReq+0x158>
              break;
 8008c7a:	bf00      	nop
          }
          break;
 8008c7c:	e0aa      	b.n	8008dd4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d002      	beq.n	8008c8e <USBD_StdEPReq+0x16a>
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d032      	beq.n	8008cf2 <USBD_StdEPReq+0x1ce>
 8008c8c:	e097      	b.n	8008dbe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d007      	beq.n	8008ca4 <USBD_StdEPReq+0x180>
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	2b80      	cmp	r3, #128	; 0x80
 8008c98:	d004      	beq.n	8008ca4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fbb8 	bl	8009412 <USBD_CtlError>
                break;
 8008ca2:	e091      	b.n	8008dc8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	da0b      	bge.n	8008cc4 <USBD_StdEPReq+0x1a0>
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
 8008cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	3310      	adds	r3, #16
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	e00b      	b.n	8008cdc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	3304      	adds	r3, #4
 8008cdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fbfb 	bl	80094e6 <USBD_CtlSendData>
              break;
 8008cf0:	e06a      	b.n	8008dc8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	da11      	bge.n	8008d1e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	f003 020f 	and.w	r2, r3, #15
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	3318      	adds	r3, #24
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d117      	bne.n	8008d44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fb7b 	bl	8009412 <USBD_CtlError>
                  break;
 8008d1c:	e054      	b.n	8008dc8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	f003 020f 	and.w	r2, r3, #15
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4613      	mov	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fb68 	bl	8009412 <USBD_CtlError>
                  break;
 8008d42:	e041      	b.n	8008dc8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da0b      	bge.n	8008d64 <USBD_StdEPReq+0x240>
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	3310      	adds	r3, #16
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	4413      	add	r3, r2
 8008d60:	3304      	adds	r3, #4
 8008d62:	e00b      	b.n	8008d7c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	4413      	add	r3, r2
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <USBD_StdEPReq+0x266>
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	2b80      	cmp	r3, #128	; 0x80
 8008d88:	d103      	bne.n	8008d92 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	e00e      	b.n	8008db0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fffc 	bl	8009d94 <USBD_LL_IsStallEP>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2201      	movs	r2, #1
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	e002      	b.n	8008db0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2202      	movs	r2, #2
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fb95 	bl	80094e6 <USBD_CtlSendData>
              break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb26 	bl	8009412 <USBD_CtlError>
              break;
 8008dc6:	bf00      	nop
          }
          break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fb20 	bl	8009412 <USBD_CtlError>
          break;
 8008dd2:	bf00      	nop
      }
      break;
 8008dd4:	e004      	b.n	8008de0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb1a 	bl	8009412 <USBD_CtlError>
      break;
 8008dde:	bf00      	nop
  }

  return ret;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	2b06      	cmp	r3, #6
 8008e0e:	f200 8128 	bhi.w	8009062 <USBD_GetDescriptor+0x276>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <USBD_GetDescriptor+0x2c>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e35 	.word	0x08008e35
 8008e1c:	08008e4d 	.word	0x08008e4d
 8008e20:	08008e8d 	.word	0x08008e8d
 8008e24:	08009063 	.word	0x08009063
 8008e28:	08009063 	.word	0x08009063
 8008e2c:	08009003 	.word	0x08009003
 8008e30:	0800902f 	.word	0x0800902f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	7c12      	ldrb	r2, [r2, #16]
 8008e40:	f107 0108 	add.w	r1, r7, #8
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	60f8      	str	r0, [r7, #12]
      break;
 8008e4a:	e112      	b.n	8009072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	7c1b      	ldrb	r3, [r3, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10d      	bne.n	8008e70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	f107 0208 	add.w	r2, r7, #8
 8008e60:	4610      	mov	r0, r2
 8008e62:	4798      	blx	r3
 8008e64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e6e:	e100      	b.n	8009072 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	f107 0208 	add.w	r2, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	2202      	movs	r2, #2
 8008e88:	701a      	strb	r2, [r3, #0]
      break;
 8008e8a:	e0f2      	b.n	8009072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	885b      	ldrh	r3, [r3, #2]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b05      	cmp	r3, #5
 8008e94:	f200 80ac 	bhi.w	8008ff0 <USBD_GetDescriptor+0x204>
 8008e98:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <USBD_GetDescriptor+0xb4>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008eb9 	.word	0x08008eb9
 8008ea4:	08008eed 	.word	0x08008eed
 8008ea8:	08008f21 	.word	0x08008f21
 8008eac:	08008f55 	.word	0x08008f55
 8008eb0:	08008f89 	.word	0x08008f89
 8008eb4:	08008fbd 	.word	0x08008fbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7c12      	ldrb	r2, [r2, #16]
 8008ed0:	f107 0108 	add.w	r1, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eda:	e091      	b.n	8009000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa97 	bl	8009412 <USBD_CtlError>
            err++;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eea:	e089      	b.n	8009000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0e:	e077      	b.n	8009000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa7d 	bl	8009412 <USBD_CtlError>
            err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1e:	e06f      	b.n	8009000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e05d      	b.n	8009000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa63 	bl	8009412 <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e055      	b.n	8009000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e043      	b.n	8009000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa49 	bl	8009412 <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e03b      	b.n	8009000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008faa:	e029      	b.n	8009000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa2f 	bl	8009412 <USBD_CtlError>
            err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fba:	e021      	b.n	8009000 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	7c12      	ldrb	r2, [r2, #16]
 8008fd4:	f107 0108 	add.w	r1, r7, #8
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fde:	e00f      	b.n	8009000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa15 	bl	8009412 <USBD_CtlError>
            err++;
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	3301      	adds	r3, #1
 8008fec:	72fb      	strb	r3, [r7, #11]
          break;
 8008fee:	e007      	b.n	8009000 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fa0d 	bl	8009412 <USBD_CtlError>
          err++;
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008ffe:	e038      	b.n	8009072 <USBD_GetDescriptor+0x286>
 8009000:	e037      	b.n	8009072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	7c1b      	ldrb	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	f107 0208 	add.w	r2, r7, #8
 8009016:	4610      	mov	r0, r2
 8009018:	4798      	blx	r3
 800901a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800901c:	e029      	b.n	8009072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f9f6 	bl	8009412 <USBD_CtlError>
        err++;
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	3301      	adds	r3, #1
 800902a:	72fb      	strb	r3, [r7, #11]
      break;
 800902c:	e021      	b.n	8009072 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7c1b      	ldrb	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10d      	bne.n	8009052 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	f107 0208 	add.w	r2, r7, #8
 8009042:	4610      	mov	r0, r2
 8009044:	4798      	blx	r3
 8009046:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	3301      	adds	r3, #1
 800904c:	2207      	movs	r2, #7
 800904e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009050:	e00f      	b.n	8009072 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9dc 	bl	8009412 <USBD_CtlError>
        err++;
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	3301      	adds	r3, #1
 800905e:	72fb      	strb	r3, [r7, #11]
      break;
 8009060:	e007      	b.n	8009072 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f9d4 	bl	8009412 <USBD_CtlError>
      err++;
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	3301      	adds	r3, #1
 800906e:	72fb      	strb	r3, [r7, #11]
      break;
 8009070:	bf00      	nop
  }

  if (err != 0U)
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11c      	bne.n	80090b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009078:	893b      	ldrh	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d011      	beq.n	80090a2 <USBD_GetDescriptor+0x2b6>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	88db      	ldrh	r3, [r3, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00d      	beq.n	80090a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	88da      	ldrh	r2, [r3, #6]
 800908a:	893b      	ldrh	r3, [r7, #8]
 800908c:	4293      	cmp	r3, r2
 800908e:	bf28      	it	cs
 8009090:	4613      	movcs	r3, r2
 8009092:	b29b      	uxth	r3, r3
 8009094:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009096:	893b      	ldrh	r3, [r7, #8]
 8009098:	461a      	mov	r2, r3
 800909a:	68f9      	ldr	r1, [r7, #12]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fa22 	bl	80094e6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	88db      	ldrh	r3, [r3, #6]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d104      	bne.n	80090b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa79 	bl	80095a2 <USBD_CtlSendStatus>
 80090b0:	e000      	b.n	80090b4 <USBD_GetDescriptor+0x2c8>
    return;
 80090b2:	bf00      	nop
    }
  }
}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop

080090bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	889b      	ldrh	r3, [r3, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d130      	bne.n	8009130 <USBD_SetAddress+0x74>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	88db      	ldrh	r3, [r3, #6]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d12c      	bne.n	8009130 <USBD_SetAddress+0x74>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	885b      	ldrh	r3, [r3, #2]
 80090da:	2b7f      	cmp	r3, #127	; 0x7f
 80090dc:	d828      	bhi.n	8009130 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d104      	bne.n	80090fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f98b 	bl	8009412 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fc:	e01d      	b.n	800913a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	7bfa      	ldrb	r2, [r7, #15]
 8009102:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fe6e 	bl	8009dec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fa46 	bl	80095a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d004      	beq.n	8009126 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2202      	movs	r2, #2
 8009120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009124:	e009      	b.n	800913a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912e:	e004      	b.n	800913a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f96d 	bl	8009412 <USBD_CtlError>
  }
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	885b      	ldrh	r3, [r3, #2]
 8009152:	b2da      	uxtb	r2, r3
 8009154:	4b41      	ldr	r3, [pc, #260]	; (800925c <USBD_SetConfig+0x118>)
 8009156:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009158:	4b40      	ldr	r3, [pc, #256]	; (800925c <USBD_SetConfig+0x118>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d904      	bls.n	800916a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f955 	bl	8009412 <USBD_CtlError>
 8009168:	e075      	b.n	8009256 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009170:	2b02      	cmp	r3, #2
 8009172:	d002      	beq.n	800917a <USBD_SetConfig+0x36>
 8009174:	2b03      	cmp	r3, #3
 8009176:	d023      	beq.n	80091c0 <USBD_SetConfig+0x7c>
 8009178:	e062      	b.n	8009240 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800917a:	4b38      	ldr	r3, [pc, #224]	; (800925c <USBD_SetConfig+0x118>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01a      	beq.n	80091b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009182:	4b36      	ldr	r3, [pc, #216]	; (800925c <USBD_SetConfig+0x118>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2203      	movs	r2, #3
 8009190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009194:	4b31      	ldr	r3, [pc, #196]	; (800925c <USBD_SetConfig+0x118>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff f9e7 	bl	800856e <USBD_SetClassConfig>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d104      	bne.n	80091b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f932 	bl	8009412 <USBD_CtlError>
            return;
 80091ae:	e052      	b.n	8009256 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f9f6 	bl	80095a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091b6:	e04e      	b.n	8009256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f9f2 	bl	80095a2 <USBD_CtlSendStatus>
        break;
 80091be:	e04a      	b.n	8009256 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80091c0:	4b26      	ldr	r3, [pc, #152]	; (800925c <USBD_SetConfig+0x118>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d112      	bne.n	80091ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80091d0:	4b22      	ldr	r3, [pc, #136]	; (800925c <USBD_SetConfig+0x118>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <USBD_SetConfig+0x118>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7ff f9e3 	bl	80085ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f9db 	bl	80095a2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091ec:	e033      	b.n	8009256 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80091ee:	4b1b      	ldr	r3, [pc, #108]	; (800925c <USBD_SetConfig+0x118>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d01d      	beq.n	8009238 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	b2db      	uxtb	r3, r3
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff f9d1 	bl	80085ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800920a:	4b14      	ldr	r3, [pc, #80]	; (800925c <USBD_SetConfig+0x118>)
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009214:	4b11      	ldr	r3, [pc, #68]	; (800925c <USBD_SetConfig+0x118>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff f9a7 	bl	800856e <USBD_SetClassConfig>
 8009220:	4603      	mov	r3, r0
 8009222:	2b02      	cmp	r3, #2
 8009224:	d104      	bne.n	8009230 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f8f2 	bl	8009412 <USBD_CtlError>
            return;
 800922e:	e012      	b.n	8009256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 f9b6 	bl	80095a2 <USBD_CtlSendStatus>
        break;
 8009236:	e00e      	b.n	8009256 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f9b2 	bl	80095a2 <USBD_CtlSendStatus>
        break;
 800923e:	e00a      	b.n	8009256 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f8e5 	bl	8009412 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009248:	4b04      	ldr	r3, [pc, #16]	; (800925c <USBD_SetConfig+0x118>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff f9ac 	bl	80085ac <USBD_ClrClassConfig>
        break;
 8009254:	bf00      	nop
    }
  }
}
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20000834 	.word	0x20000834

08009260 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d004      	beq.n	800927c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f8cc 	bl	8009412 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800927a:	e022      	b.n	80092c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009282:	2b02      	cmp	r3, #2
 8009284:	dc02      	bgt.n	800928c <USBD_GetConfig+0x2c>
 8009286:	2b00      	cmp	r3, #0
 8009288:	dc03      	bgt.n	8009292 <USBD_GetConfig+0x32>
 800928a:	e015      	b.n	80092b8 <USBD_GetConfig+0x58>
 800928c:	2b03      	cmp	r3, #3
 800928e:	d00b      	beq.n	80092a8 <USBD_GetConfig+0x48>
 8009290:	e012      	b.n	80092b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3308      	adds	r3, #8
 800929c:	2201      	movs	r2, #1
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f920 	bl	80094e6 <USBD_CtlSendData>
        break;
 80092a6:	e00c      	b.n	80092c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	2201      	movs	r2, #1
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f918 	bl	80094e6 <USBD_CtlSendData>
        break;
 80092b6:	e004      	b.n	80092c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f8a9 	bl	8009412 <USBD_CtlError>
        break;
 80092c0:	bf00      	nop
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092da:	3b01      	subs	r3, #1
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d81e      	bhi.n	800931e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	88db      	ldrh	r3, [r3, #6]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d004      	beq.n	80092f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f891 	bl	8009412 <USBD_CtlError>
        break;
 80092f0:	e01a      	b.n	8009328 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f043 0202 	orr.w	r2, r3, #2
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	330c      	adds	r3, #12
 8009312:	2202      	movs	r2, #2
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f8e5 	bl	80094e6 <USBD_CtlSendData>
      break;
 800931c:	e004      	b.n	8009328 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f876 	bl	8009412 <USBD_CtlError>
      break;
 8009326:	bf00      	nop
  }
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	885b      	ldrh	r3, [r3, #2]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d106      	bne.n	8009350 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f929 	bl	80095a2 <USBD_CtlSendStatus>
  }
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	3b01      	subs	r3, #1
 800936a:	2b02      	cmp	r3, #2
 800936c:	d80b      	bhi.n	8009386 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	885b      	ldrh	r3, [r3, #2]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d10c      	bne.n	8009390 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f90f 	bl	80095a2 <USBD_CtlSendStatus>
      }
      break;
 8009384:	e004      	b.n	8009390 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f842 	bl	8009412 <USBD_CtlError>
      break;
 800938e:	e000      	b.n	8009392 <USBD_ClrFeature+0x3a>
      break;
 8009390:	bf00      	nop
  }
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781a      	ldrb	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	785a      	ldrb	r2, [r3, #1]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	3302      	adds	r3, #2
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	3303      	adds	r3, #3
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	021b      	lsls	r3, r3, #8
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	4413      	add	r3, r2
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	3304      	adds	r3, #4
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	3305      	adds	r3, #5
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	4413      	add	r3, r2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	3306      	adds	r3, #6
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	3307      	adds	r3, #7
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	021b      	lsls	r3, r3, #8
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4413      	add	r3, r2
 8009402:	b29a      	uxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	80da      	strh	r2, [r3, #6]

}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr

08009412 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800941c:	2180      	movs	r1, #128	; 0x80
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc7a 	bl	8009d18 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009424:	2100      	movs	r1, #0
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fc76 	bl	8009d18 <USBD_LL_StallEP>
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d032      	beq.n	80094b0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 f834 	bl	80094b8 <USBD_GetLen>
 8009450:	4603      	mov	r3, r0
 8009452:	3301      	adds	r3, #1
 8009454:	b29b      	uxth	r3, r3
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	75fa      	strb	r2, [r7, #23]
 8009464:	461a      	mov	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	4413      	add	r3, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	7812      	ldrb	r2, [r2, #0]
 800946e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	75fa      	strb	r2, [r7, #23]
 8009476:	461a      	mov	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4413      	add	r3, r2
 800947c:	2203      	movs	r2, #3
 800947e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009480:	e012      	b.n	80094a8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	60fa      	str	r2, [r7, #12]
 8009488:	7dfa      	ldrb	r2, [r7, #23]
 800948a:	1c51      	adds	r1, r2, #1
 800948c:	75f9      	strb	r1, [r7, #23]
 800948e:	4611      	mov	r1, r2
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	440a      	add	r2, r1
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	75fa      	strb	r2, [r7, #23]
 800949e:	461a      	mov	r2, r3
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4413      	add	r3, r2
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e8      	bne.n	8009482 <USBD_GetString+0x4e>
    }
  }
}
 80094b0:	bf00      	nop
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80094c4:	e005      	b.n	80094d2 <USBD_GetLen+0x1a>
  {
    len++;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
 80094c8:	3301      	adds	r3, #1
 80094ca:	73fb      	strb	r3, [r7, #15]
    buf++;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3301      	adds	r3, #1
 80094d0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1f5      	bne.n	80094c6 <USBD_GetLen+0xe>
  }

  return len;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr

080094e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	60f8      	str	r0, [r7, #12]
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	4613      	mov	r3, r2
 80094f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80094fc:	88fa      	ldrh	r2, [r7, #6]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009502:	88fa      	ldrh	r2, [r7, #6]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	2100      	movs	r1, #0
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fc8b 	bl	8009e2a <USBD_LL_Transmit>

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	4613      	mov	r3, r2
 800952a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	2100      	movs	r1, #0
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fc79 	bl	8009e2a <USBD_LL_Transmit>

  return USBD_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	4613      	mov	r3, r2
 800954e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2203      	movs	r2, #3
 8009554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009558:	88fa      	ldrh	r2, [r7, #6]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009560:	88fa      	ldrh	r2, [r7, #6]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	2100      	movs	r1, #0
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fc7e 	bl	8009e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	4613      	mov	r3, r2
 800958a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800958c:	88fb      	ldrh	r3, [r7, #6]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	2100      	movs	r1, #0
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fc6c 	bl	8009e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b082      	sub	sp, #8
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2204      	movs	r2, #4
 80095ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095b2:	2300      	movs	r3, #0
 80095b4:	2200      	movs	r2, #0
 80095b6:	2100      	movs	r1, #0
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fc36 	bl	8009e2a <USBD_LL_Transmit>

  return USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2205      	movs	r2, #5
 80095d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095d8:	2300      	movs	r3, #0
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fc46 	bl	8009e70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095f4:	2200      	movs	r2, #0
 80095f6:	4912      	ldr	r1, [pc, #72]	; (8009640 <MX_USB_DEVICE_Init+0x50>)
 80095f8:	4812      	ldr	r0, [pc, #72]	; (8009644 <MX_USB_DEVICE_Init+0x54>)
 80095fa:	f7fe ff5e 	bl	80084ba <USBD_Init>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009604:	f7f7 f900 	bl	8000808 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009608:	490f      	ldr	r1, [pc, #60]	; (8009648 <MX_USB_DEVICE_Init+0x58>)
 800960a:	480e      	ldr	r0, [pc, #56]	; (8009644 <MX_USB_DEVICE_Init+0x54>)
 800960c:	f7fe ff80 	bl	8008510 <USBD_RegisterClass>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009616:	f7f7 f8f7 	bl	8000808 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800961a:	490c      	ldr	r1, [pc, #48]	; (800964c <MX_USB_DEVICE_Init+0x5c>)
 800961c:	4809      	ldr	r0, [pc, #36]	; (8009644 <MX_USB_DEVICE_Init+0x54>)
 800961e:	f7fe feb1 	bl	8008384 <USBD_CDC_RegisterInterface>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009628:	f7f7 f8ee 	bl	8000808 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800962c:	4805      	ldr	r0, [pc, #20]	; (8009644 <MX_USB_DEVICE_Init+0x54>)
 800962e:	f7fe ff88 	bl	8008542 <USBD_Start>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009638:	f7f7 f8e6 	bl	8000808 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20000130 	.word	0x20000130
 8009644:	20000838 	.word	0x20000838
 8009648:	2000001c 	.word	0x2000001c
 800964c:	20000120 	.word	0x20000120

08009650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009654:	2200      	movs	r2, #0
 8009656:	4905      	ldr	r1, [pc, #20]	; (800966c <CDC_Init_FS+0x1c>)
 8009658:	4805      	ldr	r0, [pc, #20]	; (8009670 <CDC_Init_FS+0x20>)
 800965a:	f7fe fea9 	bl	80083b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800965e:	4905      	ldr	r1, [pc, #20]	; (8009674 <CDC_Init_FS+0x24>)
 8009660:	4803      	ldr	r0, [pc, #12]	; (8009670 <CDC_Init_FS+0x20>)
 8009662:	f7fe febe 	bl	80083e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009668:	4618      	mov	r0, r3
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000efc 	.word	0x20000efc
 8009670:	20000838 	.word	0x20000838
 8009674:	20000afc 	.word	0x20000afc

08009678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009678:	b480      	push	{r7}
 800967a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800967c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800967e:	4618      	mov	r0, r3
 8009680:	46bd      	mov	sp, r7
 8009682:	bc80      	pop	{r7}
 8009684:	4770      	bx	lr
	...

08009688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
 8009694:	4613      	mov	r3, r2
 8009696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009698:	79fb      	ldrb	r3, [r7, #7]
 800969a:	2b23      	cmp	r3, #35	; 0x23
 800969c:	d84a      	bhi.n	8009734 <CDC_Control_FS+0xac>
 800969e:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <CDC_Control_FS+0x1c>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	08009735 	.word	0x08009735
 80096a8:	08009735 	.word	0x08009735
 80096ac:	08009735 	.word	0x08009735
 80096b0:	08009735 	.word	0x08009735
 80096b4:	08009735 	.word	0x08009735
 80096b8:	08009735 	.word	0x08009735
 80096bc:	08009735 	.word	0x08009735
 80096c0:	08009735 	.word	0x08009735
 80096c4:	08009735 	.word	0x08009735
 80096c8:	08009735 	.word	0x08009735
 80096cc:	08009735 	.word	0x08009735
 80096d0:	08009735 	.word	0x08009735
 80096d4:	08009735 	.word	0x08009735
 80096d8:	08009735 	.word	0x08009735
 80096dc:	08009735 	.word	0x08009735
 80096e0:	08009735 	.word	0x08009735
 80096e4:	08009735 	.word	0x08009735
 80096e8:	08009735 	.word	0x08009735
 80096ec:	08009735 	.word	0x08009735
 80096f0:	08009735 	.word	0x08009735
 80096f4:	08009735 	.word	0x08009735
 80096f8:	08009735 	.word	0x08009735
 80096fc:	08009735 	.word	0x08009735
 8009700:	08009735 	.word	0x08009735
 8009704:	08009735 	.word	0x08009735
 8009708:	08009735 	.word	0x08009735
 800970c:	08009735 	.word	0x08009735
 8009710:	08009735 	.word	0x08009735
 8009714:	08009735 	.word	0x08009735
 8009718:	08009735 	.word	0x08009735
 800971c:	08009735 	.word	0x08009735
 8009720:	08009735 	.word	0x08009735
 8009724:	08009735 	.word	0x08009735
 8009728:	08009735 	.word	0x08009735
 800972c:	08009735 	.word	0x08009735
 8009730:	08009735 	.word	0x08009735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009734:	bf00      	nop
  }

  return (USBD_OK);
 8009736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop

08009744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Rx_to_buff(Buf, Len);
 800974e:	4b08      	ldr	r3, [pc, #32]	; (8009770 <CDC_Receive_FS+0x2c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	4806      	ldr	r0, [pc, #24]	; (8009774 <CDC_Receive_FS+0x30>)
 800975c:	f7fe fe41 	bl	80083e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009760:	4804      	ldr	r0, [pc, #16]	; (8009774 <CDC_Receive_FS+0x30>)
 8009762:	f7fe fe80 	bl	8008466 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009766:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	200012fc 	.word	0x200012fc
 8009774:	20000838 	.word	0x20000838

08009778 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009788:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <CDC_Transmit_FS+0x48>)
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800979a:	2301      	movs	r3, #1
 800979c:	e00b      	b.n	80097b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800979e:	887b      	ldrh	r3, [r7, #2]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	4806      	ldr	r0, [pc, #24]	; (80097c0 <CDC_Transmit_FS+0x48>)
 80097a6:	f7fe fe03 	bl	80083b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80097aa:	4805      	ldr	r0, [pc, #20]	; (80097c0 <CDC_Transmit_FS+0x48>)
 80097ac:	f7fe fe2c 	bl	8008408 <USBD_CDC_TransmitPacket>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20000838 	.word	0x20000838

080097c4 <CDC_Attach_Receive_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Receive_FS(CDC_Attach_Rx f){
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	CDC_Rx_to_buff = f;
 80097cc:	4a03      	ldr	r2, [pc, #12]	; (80097dc <CDC_Attach_Receive_FS+0x18>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6013      	str	r3, [r2, #0]
}
 80097d2:	bf00      	nop
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr
 80097dc:	200012fc 	.word	0x200012fc

080097e0 <CDC_Transmit_FS_Status>:

uint32_t CDC_Transmit_FS_Status(){
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80097e6:	4b06      	ldr	r3, [pc, #24]	; (8009800 <CDC_Transmit_FS_Status+0x20>)
 80097e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ec:	607b      	str	r3, [r7, #4]
	return hcdc->TxState;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bc80      	pop	{r7}
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20000838 	.word	0x20000838

08009804 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2212      	movs	r2, #18
 8009814:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009816:	4b03      	ldr	r3, [pc, #12]	; (8009824 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	bc80      	pop	{r7}
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	2000014c 	.word	0x2000014c

08009828 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2204      	movs	r2, #4
 8009838:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800983a:	4b03      	ldr	r3, [pc, #12]	; (8009848 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	bc80      	pop	{r7}
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000160 	.word	0x20000160

0800984c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	4907      	ldr	r1, [pc, #28]	; (8009880 <USBD_FS_ProductStrDescriptor+0x34>)
 8009862:	4808      	ldr	r0, [pc, #32]	; (8009884 <USBD_FS_ProductStrDescriptor+0x38>)
 8009864:	f7ff fde6 	bl	8009434 <USBD_GetString>
 8009868:	e004      	b.n	8009874 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	4904      	ldr	r1, [pc, #16]	; (8009880 <USBD_FS_ProductStrDescriptor+0x34>)
 800986e:	4805      	ldr	r0, [pc, #20]	; (8009884 <USBD_FS_ProductStrDescriptor+0x38>)
 8009870:	f7ff fde0 	bl	8009434 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009874:	4b02      	ldr	r3, [pc, #8]	; (8009880 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20001300 	.word	0x20001300
 8009884:	08009ff8 	.word	0x08009ff8

08009888 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	4904      	ldr	r1, [pc, #16]	; (80098a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009898:	4804      	ldr	r0, [pc, #16]	; (80098ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800989a:	f7ff fdcb 	bl	8009434 <USBD_GetString>
  return USBD_StrDesc;
 800989e:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20001300 	.word	0x20001300
 80098ac:	0800a010 	.word	0x0800a010

080098b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	221a      	movs	r2, #26
 80098c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098c2:	f000 f843 	bl	800994c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098c6:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	20000164 	.word	0x20000164

080098d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	6039      	str	r1, [r7, #0]
 80098de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098e0:	79fb      	ldrb	r3, [r7, #7]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d105      	bne.n	80098f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	4907      	ldr	r1, [pc, #28]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098ea:	4808      	ldr	r0, [pc, #32]	; (800990c <USBD_FS_ConfigStrDescriptor+0x38>)
 80098ec:	f7ff fda2 	bl	8009434 <USBD_GetString>
 80098f0:	e004      	b.n	80098fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	4904      	ldr	r1, [pc, #16]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098f6:	4805      	ldr	r0, [pc, #20]	; (800990c <USBD_FS_ConfigStrDescriptor+0x38>)
 80098f8:	f7ff fd9c 	bl	8009434 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098fc:	4b02      	ldr	r3, [pc, #8]	; (8009908 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20001300 	.word	0x20001300
 800990c:	0800a024 	.word	0x0800a024

08009910 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	4907      	ldr	r1, [pc, #28]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009926:	4808      	ldr	r0, [pc, #32]	; (8009948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009928:	f7ff fd84 	bl	8009434 <USBD_GetString>
 800992c:	e004      	b.n	8009938 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	4904      	ldr	r1, [pc, #16]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009932:	4805      	ldr	r0, [pc, #20]	; (8009948 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009934:	f7ff fd7e 	bl	8009434 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009938:	4b02      	ldr	r3, [pc, #8]	; (8009944 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20001300 	.word	0x20001300
 8009948:	0800a030 	.word	0x0800a030

0800994c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009952:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <Get_SerialNum+0x44>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009958:	4b0e      	ldr	r3, [pc, #56]	; (8009994 <Get_SerialNum+0x48>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800995e:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <Get_SerialNum+0x4c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009972:	2208      	movs	r2, #8
 8009974:	4909      	ldr	r1, [pc, #36]	; (800999c <Get_SerialNum+0x50>)
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f814 	bl	80099a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800997c:	2204      	movs	r2, #4
 800997e:	4908      	ldr	r1, [pc, #32]	; (80099a0 <Get_SerialNum+0x54>)
 8009980:	68b8      	ldr	r0, [r7, #8]
 8009982:	f000 f80f 	bl	80099a4 <IntToUnicode>
  }
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	1ffff7e8 	.word	0x1ffff7e8
 8009994:	1ffff7ec 	.word	0x1ffff7ec
 8009998:	1ffff7f0 	.word	0x1ffff7f0
 800999c:	20000166 	.word	0x20000166
 80099a0:	20000176 	.word	0x20000176

080099a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	4613      	mov	r3, r2
 80099b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	75fb      	strb	r3, [r7, #23]
 80099ba:	e027      	b.n	8009a0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	0f1b      	lsrs	r3, r3, #28
 80099c0:	2b09      	cmp	r3, #9
 80099c2:	d80b      	bhi.n	80099dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	0f1b      	lsrs	r3, r3, #28
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	005b      	lsls	r3, r3, #1
 80099ce:	4619      	mov	r1, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	440b      	add	r3, r1
 80099d4:	3230      	adds	r2, #48	; 0x30
 80099d6:	b2d2      	uxtb	r2, r2
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e00a      	b.n	80099f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	0f1b      	lsrs	r3, r3, #28
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	4619      	mov	r1, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	440b      	add	r3, r1
 80099ec:	3237      	adds	r2, #55	; 0x37
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	011b      	lsls	r3, r3, #4
 80099f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	3301      	adds	r3, #1
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4413      	add	r3, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	75fb      	strb	r3, [r7, #23]
 8009a0c:	7dfa      	ldrb	r2, [r7, #23]
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d3d3      	bcc.n	80099bc <IntToUnicode+0x18>
  }
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr

08009a20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a0d      	ldr	r2, [pc, #52]	; (8009a64 <HAL_PCD_MspInit+0x44>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d113      	bne.n	8009a5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a32:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <HAL_PCD_MspInit+0x48>)
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	4a0c      	ldr	r2, [pc, #48]	; (8009a68 <HAL_PCD_MspInit+0x48>)
 8009a38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a3c:	61d3      	str	r3, [r2, #28]
 8009a3e:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <HAL_PCD_MspInit+0x48>)
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	2014      	movs	r0, #20
 8009a50:	f7f8 f9ab 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009a54:	2014      	movs	r0, #20
 8009a56:	f7f8 f9c4 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a5a:	bf00      	nop
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40005c00 	.word	0x40005c00
 8009a68:	40021000 	.word	0x40021000

08009a6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009a80:	4619      	mov	r1, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f7fe fda5 	bl	80085d2 <USBD_LL_SetupStage>
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009aa2:	78fa      	ldrb	r2, [r7, #3]
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	00db      	lsls	r3, r3, #3
 8009aae:	440b      	add	r3, r1
 8009ab0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f7fe fdd7 	bl	800866c <USBD_LL_DataOutStage>
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009ad8:	78fa      	ldrb	r2, [r7, #3]
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	440b      	add	r3, r1
 8009ae6:	333c      	adds	r3, #60	; 0x3c
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	78fb      	ldrb	r3, [r7, #3]
 8009aec:	4619      	mov	r1, r3
 8009aee:	f7fe fe2e 	bl	800874e <USBD_LL_DataInStage>
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fe ff3e 	bl	800898a <USBD_LL_SOF>
}
 8009b0e:	bf00      	nop
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d001      	beq.n	8009b2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b2a:	f7f6 fe6d 	bl	8000808 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b34:	7bfa      	ldrb	r2, [r7, #15]
 8009b36:	4611      	mov	r1, r2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe feee 	bl	800891a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe fea7 	bl	8008898 <USBD_LL_Reset>
}
 8009b4a:	bf00      	nop
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fee8 	bl	8008938 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d005      	beq.n	8009b7c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b70:	4b04      	ldr	r3, [pc, #16]	; (8009b84 <HAL_PCD_SuspendCallback+0x30>)
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	4a03      	ldr	r2, [pc, #12]	; (8009b84 <HAL_PCD_SuspendCallback+0x30>)
 8009b76:	f043 0306 	orr.w	r3, r3, #6
 8009b7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	e000ed00 	.word	0xe000ed00

08009b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fee2 	bl	8008960 <USBD_LL_Resume>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009bac:	4a28      	ldr	r2, [pc, #160]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a26      	ldr	r2, [pc, #152]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bbe:	4a25      	ldr	r2, [pc, #148]	; (8009c54 <USBD_LL_Init+0xb0>)
 8009bc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bc2:	4b23      	ldr	r3, [pc, #140]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bc8:	4b21      	ldr	r3, [pc, #132]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bca:	2202      	movs	r2, #2
 8009bcc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bce:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bda:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <USBD_LL_Init+0xac>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009be0:	481b      	ldr	r0, [pc, #108]	; (8009c50 <USBD_LL_Init+0xac>)
 8009be2:	f7f8 fab5 	bl	8002150 <HAL_PCD_Init>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009bec:	f7f6 fe0c 	bl	8000808 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bf6:	2318      	movs	r3, #24
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	f7f9 ff29 	bl	8003a52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c06:	2358      	movs	r3, #88	; 0x58
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2180      	movs	r1, #128	; 0x80
 8009c0c:	f7f9 ff21 	bl	8003a52 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c16:	23c0      	movs	r3, #192	; 0xc0
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2181      	movs	r1, #129	; 0x81
 8009c1c:	f7f9 ff19 	bl	8003a52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	f7f9 ff10 	bl	8003a52 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2182      	movs	r1, #130	; 0x82
 8009c40:	f7f9 ff07 	bl	8003a52 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20001500 	.word	0x20001500
 8009c54:	40005c00 	.word	0x40005c00

08009c58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f8 fb79 	bl	8002366 <HAL_PCD_Start>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f94e 	bl	8009f1c <USBD_Get_USB_Status>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	4608      	mov	r0, r1
 8009c98:	4611      	mov	r1, r2
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	70fb      	strb	r3, [r7, #3]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70bb      	strb	r3, [r7, #2]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cb6:	78bb      	ldrb	r3, [r7, #2]
 8009cb8:	883a      	ldrh	r2, [r7, #0]
 8009cba:	78f9      	ldrb	r1, [r7, #3]
 8009cbc:	f7f8 fcf1 	bl	80026a2 <HAL_PCD_EP_Open>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f928 	bl	8009f1c <USBD_Get_USB_Status>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cea:	2300      	movs	r3, #0
 8009cec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cf4:	78fa      	ldrb	r2, [r7, #3]
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f8 fd38 	bl	800276e <HAL_PCD_EP_Close>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 f909 	bl	8009f1c <USBD_Get_USB_Status>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7f8 fdf8 	bl	800292c <HAL_PCD_EP_SetStall>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 f8ea 	bl	8009f1c <USBD_Get_USB_Status>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	460b      	mov	r3, r1
 8009d60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d70:	78fa      	ldrb	r2, [r7, #3]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7f8 fe39 	bl	80029ec <HAL_PCD_EP_ClrStall>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f8cb 	bl	8009f1c <USBD_Get_USB_Status>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009da6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	da0c      	bge.n	8009dca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	00db      	lsls	r3, r3, #3
 8009dc2:	440b      	add	r3, r1
 8009dc4:	3302      	adds	r3, #2
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	e00b      	b.n	8009de2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dd0:	68f9      	ldr	r1, [r7, #12]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	440b      	add	r3, r1
 8009ddc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009de0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr

08009dec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7f8 fc24 	bl	8002658 <HAL_PCD_SetAddress>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f880 	bl	8009f1c <USBD_Get_USB_Status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	60f8      	str	r0, [r7, #12]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	461a      	mov	r2, r3
 8009e36:	460b      	mov	r3, r1
 8009e38:	72fb      	strb	r3, [r7, #11]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e4c:	893b      	ldrh	r3, [r7, #8]
 8009e4e:	7af9      	ldrb	r1, [r7, #11]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	f7f8 fd28 	bl	80028a6 <HAL_PCD_EP_Transmit>
 8009e56:	4603      	mov	r3, r0
 8009e58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 f85d 	bl	8009f1c <USBD_Get_USB_Status>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e66:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	607a      	str	r2, [r7, #4]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	72fb      	strb	r3, [r7, #11]
 8009e80:	4613      	mov	r3, r2
 8009e82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e92:	893b      	ldrh	r3, [r7, #8]
 8009e94:	7af9      	ldrb	r1, [r7, #11]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	f7f8 fcb1 	bl	80027fe <HAL_PCD_EP_Receive>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 f83a 	bl	8009f1c <USBD_Get_USB_Status>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009eac:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7f8 fcd3 	bl	8002878 <HAL_PCD_EP_GetRxCount>
 8009ed2:	4603      	mov	r3, r0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <USBD_static_malloc+0x14>)
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bc80      	pop	{r7}
 8009eee:	4770      	bx	lr
 8009ef0:	200017ec 	.word	0x200017ec

08009ef4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]

}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bc80      	pop	{r7}
 8009f04:	4770      	bx	lr

08009f06 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009f12:	bf00      	nop
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr

08009f1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d817      	bhi.n	8009f60 <USBD_Get_USB_Status+0x44>
 8009f30:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <USBD_Get_USB_Status+0x1c>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009f49 	.word	0x08009f49
 8009f3c:	08009f4f 	.word	0x08009f4f
 8009f40:	08009f55 	.word	0x08009f55
 8009f44:	08009f5b 	.word	0x08009f5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f4c:	e00b      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f4e:	2302      	movs	r3, #2
 8009f50:	73fb      	strb	r3, [r7, #15]
    break;
 8009f52:	e008      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f54:	2301      	movs	r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
    break;
 8009f58:	e005      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f5e:	e002      	b.n	8009f66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f60:	2302      	movs	r3, #2
 8009f62:	73fb      	strb	r3, [r7, #15]
    break;
 8009f64:	bf00      	nop
  }
  return usb_status;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop

08009f74 <__libc_init_array>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	2600      	movs	r6, #0
 8009f78:	4d0c      	ldr	r5, [pc, #48]	; (8009fac <__libc_init_array+0x38>)
 8009f7a:	4c0d      	ldr	r4, [pc, #52]	; (8009fb0 <__libc_init_array+0x3c>)
 8009f7c:	1b64      	subs	r4, r4, r5
 8009f7e:	10a4      	asrs	r4, r4, #2
 8009f80:	42a6      	cmp	r6, r4
 8009f82:	d109      	bne.n	8009f98 <__libc_init_array+0x24>
 8009f84:	f000 f822 	bl	8009fcc <_init>
 8009f88:	2600      	movs	r6, #0
 8009f8a:	4d0a      	ldr	r5, [pc, #40]	; (8009fb4 <__libc_init_array+0x40>)
 8009f8c:	4c0a      	ldr	r4, [pc, #40]	; (8009fb8 <__libc_init_array+0x44>)
 8009f8e:	1b64      	subs	r4, r4, r5
 8009f90:	10a4      	asrs	r4, r4, #2
 8009f92:	42a6      	cmp	r6, r4
 8009f94:	d105      	bne.n	8009fa2 <__libc_init_array+0x2e>
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
 8009f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9c:	4798      	blx	r3
 8009f9e:	3601      	adds	r6, #1
 8009fa0:	e7ee      	b.n	8009f80 <__libc_init_array+0xc>
 8009fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa6:	4798      	blx	r3
 8009fa8:	3601      	adds	r6, #1
 8009faa:	e7f2      	b.n	8009f92 <__libc_init_array+0x1e>
 8009fac:	0800a068 	.word	0x0800a068
 8009fb0:	0800a068 	.word	0x0800a068
 8009fb4:	0800a068 	.word	0x0800a068
 8009fb8:	0800a06c 	.word	0x0800a06c

08009fbc <memset>:
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	4402      	add	r2, r0
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d100      	bne.n	8009fc6 <memset+0xa>
 8009fc4:	4770      	bx	lr
 8009fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fca:	e7f9      	b.n	8009fc0 <memset+0x4>

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
